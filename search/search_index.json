{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Services Web","text":"<p>Bienvenue sur le site du cours de Services Web de l'hiver 2025 du c\u00e9gep de Victoriaville. Cette plateforme se veut un compl\u00e9ment au groupe Teams du m\u00eame cours. Vous y retrouverez les notes de cours et les diff\u00e9rents exercices. Nous ajoutons continuellement du nouveau contenu, assurez-vous donc de revenir nous voir souvent.</p>"},{"location":"#pour-joindre-votre-enseignant","title":"Pour joindre votre enseignant","text":"<p>Mathieu Fr\u00e9chette</p><p>frechette.mathieu@cegepvicto.ca</p>"},{"location":"#un-peu-dhumour","title":"Un peu d'humour","text":""},{"location":"exercices/01_utilisation_api/","title":"Exercice 01 - Utilisation d\u2019un service web","text":"<p>Utilisez Postman et la documentation en lien pour faire les requ\u00eates suivantes.</p>"},{"location":"exercices/01_utilisation_api/#0-postman","title":"0 Postman","text":"<ul> <li> Cr\u00e9ez dans Postman une collection nomm\u00e9e Services Web H2025</li> <li> Dans cette collection cr\u00e9ez un dossier nomm\u00e9 Exercice 01</li> <li> Cr\u00e9ez une requ\u00eate pour chacune des questions suivantes.</li> </ul>"},{"location":"exercices/01_utilisation_api/#1-numbers-api","title":"1 Numbers API","text":"<p>Documentation : http://numbersapi.com/</p> <p>Requ\u00eates</p> <ul> <li> Affichez de l'information sur votre date de naissance</li> <li> Affichez une anecdote (trivia) al\u00e9atoire</li> </ul>"},{"location":"exercices/01_utilisation_api/#2-joke-api","title":"2 Joke Api","text":"<p>Documentation : https://jokeapi.dev/</p> <p>Requ\u00eates</p> <ul> <li> Affichez 2 blagues de programmation en anglais</li> <li> Affichez une blague en fran\u00e7ais de n'importe quel type mais qui n'est ni sexiste ni raciste.</li> </ul>"},{"location":"exercices/01_utilisation_api/#3-chucknorrisio","title":"3 Chucknorris.io","text":"<p>Documentation : https://api.chucknorris.io/</p> <p>Requ\u00eates</p> <ul> <li> Combien il y a de cat\u00e9gorie au total?</li> <li> Combien de blagues contiennent le mot \"beer\"?</li> </ul>"},{"location":"exercices/01_utilisation_api/#4-random-user","title":"4 Random User","text":"<p>Documentation : https://randomuser.me/documentation</p> <ul> <li> G\u00e9n\u00e9rez 10 utilisateurs al\u00e9atoire provenant du Canada. Retournez seulement les champs \"name\" et \"location\".</li> </ul>"},{"location":"exercices/01_utilisation_api/#5-imgflip","title":"5 ImgFlip","text":"<p>Documentation : https://imgflip.com/api</p> <p>Note</p> <p>Vous devez vous cr\u00e9er un compte sur imgflip pour pouvoir utiliser l'api.</p> <p>Requ\u00eates</p> <ul> <li> Cr\u00e9ez un meme de votre choix.</li> <li> Enregistrez votre chef d'oeuvre sous le format NomPrenom.jpg et t\u00e9l\u00e9versez le sur Teams dans le dossier de l'exercice 01 dans le groupe du cours. </li> </ul> <p>Astuce</p> <ul> <li>Commencez par trouver l'identifiant de l'image de base (template_id) que vous allez utiliser (il y a une route pour \u00e7a)</li> <li>Utilisez la route /caption_image pour cr\u00e9er votre meme en utilisant les bonnes informations</li> <li>Attention \u00e0 la m\u00e9thode de la route</li> <li>Les informations doivent \u00eatre envoy\u00e9es dans le corps de la requ\u00eate au format x-www-form-urlencoded</li> </ul> <p></p>"},{"location":"exercices/02_serverweb_node/","title":"Exercice 02 - Serveur web avec Node.js","text":"<p>Cr\u00e9ez un fichier nomm\u00e9 <code>serveur.js</code> qui contiendra le code de gestion de votre serveur. Vous pouvez vous inspirer des exemples dans les notes de cours comme code de d\u00e9part.</p> <p>Le serveur doit pouvoir r\u00e9cup\u00e9rer la valeur du param\u00eatre <code>code</code> dans l'url envoy\u00e9. Par exemple si j'envoie <code>localhost:3000/?code=1</code> la valeur est 1.</p> <p>Pour cette exercice nous ne tiendront pas compte de la m\u00e9thode HTTP de la requ\u00eate (GET, POST, etc.)</p> <p>Cr\u00e9ez un second fichier nomm\u00e9 <code>professeurs.js</code> qui aura la structure d'un module JS et qui contiendra l'objet suivant :  Ajoutez dans unl'objet JavaScript suivant \u00e0 votre code et importez-le dans votre ficher <code>serveur.js</code> : </p> <pre><code>const professeurs = {\n    1: { nom: \"Fr\u00e9chette\", prenom: \"Mathieu\"},\n    2: { nom: \"Lagac\u00e9\", prenom: \"Christiane\" },\n    3: { nom: \"Trottier\", prenom: \"S\u00e9bastien\" },\n    4: { nom: \"Tousignant\", prenom: \"Simon\" },\n    5: { nom: \"Mercier\", prenom: \"Fran\u00e7ois\" },\n    6: { nom: \"Croteau\", prenom: \"Carine\" },\n    7: { nom: \"Taleb\", prenom: \"Fr\u00e9d\u00e9rik\" },\n    8: { nom: \"Ouellet\", prenom: \"Alexandre\" },\n}\n</code></pre> <p>Manuel</p> <p>Pour plus d'information sur les modules en JavaScript, vous pouvez consulter ce site : https://fr.javascript.info/modules-intro</p> <p>Maintentant quand le serveur re\u00e7oit une url : </p> <ul> <li>Si le param\u00e8tre <code>code</code> est pr\u00e9sent, affichez le pr\u00e9nom et le nom du professeur correspondant \u00e0 sa valeur. Le texte retourn\u00e9 sera \"Bonjour pr\u00e9nom nom\" dans une balise H1 et le code de statut sera 200.</li> <li>Si le param\u00e8tre est absent ou bien que la valeur n'est pas pr\u00e9sente dans l'objet, affichez \"Professeur non trouv\u00e9, vous devez fournir un code de professeur valide\" dans une balise H1. Le code de statut sera 404.</li> </ul> <p>Astuce</p> <p>Changez la valeur du Content-Type pour que le format de la r\u00e9ponse soit du html.</p>"},{"location":"exercices/02_serverweb_node/#utilisation-de-modules-externes","title":"Utilisation de modules externes","text":"<ul> <li> Installez nodemon et configurez votre projet pour pouvoir le lancer avec la commande <code>npm dev</code>.</li> <li> Installez le module dotenv et modifiez votre code pour que la valeur du port \u00e0 utiliser soit stock\u00e9e dans un fichier .env. Utilisez 3030 comme valeur pour le port dans le fichier .env. Modifiez votre code pour que si la valeur du fichier .env ne peut \u00eatre lu le serveur utilisera le port 3000 \u00e0 la place.</li> </ul>"},{"location":"exercices/02_serverweb_node/#gestion-des-routes","title":"Gestion des routes","text":"<p>Maintenant que vous avez un serveur web qui fonctionne, on va l'am\u00e9liorer un peu avec une gestion basique de route.</p> <ul> <li>Quand on n'entre que l'h\u00f4te ou bien la route <code>/</code>, affichez en html \"Bienvenue \u00e0 mon premier api\" dans une balise h1</li> <li>Quand on entre la route <code>/professeurs</code>, reprenez le code de la premi\u00e8re partie. Donc si j'entre <code>localhost:3000/professeurs?code=1</code> la r\u00e9ponse sera \"Bonjour Mathieu Fr\u00e9chette\" dans une balise H1.</li> <li>Quand j'entre la route <code>/professeurs/tous</code> je retourne au format json l'objet professeurs. (N'oubliez pas dans ce cas de changer la valeur du content-Type pour indiquer qu'on retourne du JSON)</li> <li>Si j'entre une route qui n'est pas g\u00e9r\u00e9e par votre code, par exemple <code>/patate</code>, retournez au format JSON le message suivant :  <pre><code>{\n    \"message\":\"La route /patate n'existe pas\"\n}\n</code></pre></li> </ul> <p>Astuce</p> <p>Utilisez la fonction JSON.stringify() pour convertir un objet en JSON. Dans les notes de cours sur le format JSON vous avez des exemples.</p>"},{"location":"exercices/02_serverweb_node/#test-de-votre-serveur","title":"Test de votre serveur","text":"<p>Dans un nouveau r\u00e9pertoire sur Postman, cr\u00e9ez des requ\u00eates pour tester chacun des r\u00e9sultats possibles.</p> <p></p>"},{"location":"exercices/03_helloworld_api/","title":"Exercice 03 - HelloWorldApi","text":"<p>Cr\u00e9ez un nouveau projet dans lequel vous allez coder votre premier API en Node.js \u00e0 l'aide d'Express.</p>"},{"location":"exercices/03_helloworld_api/#installation-des-modules","title":"Installation des modules","text":"<ul> <li>Pour cet exercice utilisez les modules suivants : <code>Express</code> et <code>Nodemon</code></li> <li>Cr\u00e9ez ensuite un fichier index.js et utilisez le code donn\u00e9 en exemple dans les notes de cours d'un petit serveur web avec Express.</li> <li>Utilisez l'intergiciel express.json() dans votre fichier index.js pour convertir les donn\u00e9es JSON en objet JavaScript.</li> </ul>"},{"location":"exercices/03_helloworld_api/#structure-de-lapplication","title":"Structure de l'application","text":"<p>Respectez la structure d'application tel que d\u00e9crite dans les notes de cours. (Cr\u00e9ez uniquement les fichiers n\u00e9cessaires)</p> <ul> <li>index.js : La porte d'entr\u00e9e de votre api</li> <li>salutations.route.js : Les routes associ\u00e9es avec les salutations</li> <li>salutations.controller.js : La logique de votre code pour acc\u00e9der ou modifier les informations des salutations.</li> <li>salutations.model.js  : Les donn\u00e9es de salutations </li> </ul>"},{"location":"exercices/03_helloworld_api/#simulation-des-donnees","title":"Simulation des donn\u00e9es","text":"<p>On va simuler l'acc\u00e8s \u00e0 la base de donn\u00e9es avec le tableau d'objets suivant. Cr\u00e9ez le fichier salutations.model.js dans votre projet et copiez le code suivant: </p> salutations.model.js<pre><code>const salutations = [\n    { code_langue : \"fr\", langue : \"Fran\u00e7ais\", message : \"Bonjour le monde\"},\n    { code_langue : \"fr\", langue : \"Fran\u00e7ais\", message : \"Bon matin\"},\n    { code_langue : \"fr\", langue : \"Fran\u00e7ais\", message : \"Salut\"},\n    { code_langue : \"fr\", langue : \"Fran\u00e7ais\", message : \"Bonne nuit je vais travailler\"},\n    { code_langue : \"en\", langue : \"Anglais\", message : \"Hello world\"},\n    { code_langue : \"en\", langue : \"Anglais\", message : \"Good morning\"},\n    { code_langue : \"en\", langue : \"Anglais\", message : \"Hi\"},\n    { code_langue : \"en\", langue : \"Anglais\", message : \"Good night, i''m going to work\"},\n    { code_langue : \"es\", langue : \"Espagnol\", message : \"Hola Mundo\"},\n    { code_langue : \"es\", langue : \"Espagnol\", message : \"Buenos dias\"},\n    { code_langue : \"es\", langue : \"Espagnol\", message : \"Hola\"},\n    { code_langue : \"es\", langue : \"Espagnol\", message : \"Buenas noches me voy a trabajar\"},\n    { code_langue : \"de\", langue : \"Allemand\", message : \"Hallo Welt\"},\n    { code_langue : \"de\", langue : \"Allemand\", message : \"guten Morgen\"},\n    { code_langue : \"de\", langue : \"Allemand\", message : \"Hallo\"},\n    { code_langue : \"de\", langue : \"Allemand\", message : \"Gute Nacht, ich gehe zur Arbei\"}\n];\n\nexport { \n    salutations\n};\n</code></pre> <p>Ensuite pour utiliser votre tableau vous pouvez faire <code>import { salutations, AjouterSalutation } from '../salutations.model.js';</code> dans un autre fichier (ajuster le chemin au besoin).</p>"},{"location":"exercices/03_helloworld_api/#postman","title":"Postman","text":"<p>Dans le logiciel Postman, cr\u00e9z un r\u00e9pertoire pour l'exercice et enregistrez une requ\u00eate pour chacune des routes que vous allez cr\u00e9er.</p> <p></p> Une bonne habitude \u00e0 prendre"},{"location":"exercices/03_helloworld_api/#routage","title":"Routage","text":"<p>Votre api comportera les routes suivante: </p> M\u00e9thode Route Description GET /api Message de bienvenue \u00e0 l'api GET /api/salutations/liste Afficher la liste de toutes les salutations GET /api/salutations?langue=[fr,en,es,de] Afficher une salutation al\u00e9atoire. Si le param\u00e8tre est ajout\u00e9 et valide, la salutation sera dans la langue choisie POST /api/salutations Ajouter une salutation (voir aide plus bas) <ul> <li> Vous devez utiliser l'objet Router pour regrouper toutes les routes \"salutations\" dans un m\u00eame fichier: salutations.route.js.</li> </ul>"},{"location":"exercices/03_helloworld_api/#get-api","title":"GET /api","text":"<ul> <li>Vous pouvez conservez l'exemple pr\u00e9sent dans les notes de cours dans le fichier index.js</li> </ul>"},{"location":"exercices/03_helloworld_api/#get-apisalutationsliste","title":"GET /api/salutations/liste","text":"<ul> <li>Retournez simplement la liste de toutes les salutations au format JSON</li> </ul>"},{"location":"exercices/03_helloworld_api/#get-apisalutationslanguefrenesde","title":"GET /api/salutations?langue=[fr,en,es,de]","text":"<ul> <li>Retournez une salutations al\u00e9atoire depuis le tableau au format JSON</li> <li>Si un code de langue est fourni, s\u00e9lectionnez la salutation parmi celles de cette langue</li> <li>Si le code n'existe pas, si aucune salutation ne correspond \u00e0 ce code, retournez le message suivant au format JSON avec le code de statut 404. Remplacez la valeur de code par celle envoy\u00e9e en param\u00eatre. </li> </ul> <pre><code>{\n    \"message\" : \"Erreur, le code de langue [code] n'existe pas\"\n}\n</code></pre> <p>Aide</p> <p>Avec Express, pour acc\u00e9der aux param\u00e8tres de la section requ\u00eate de l'url on peut utiliser <code>req.query.nomParam</code>. Pour tester si le param\u00e8tre existe, on peut faire le test avec un simple if comme ceci <code>if(req.query.langue) {}</code></p> salutations.controller.js<pre><code>// Exemple de r\u00e9cup\u00e9ration du param\u00eatre langue\nif(req.query.langue) {\n    console.log(req.query.langue);\n} else {\n    console.log(\"Le param\u00e8tre langue est manquant\");\n} \n</code></pre> <p>J'ai utilis\u00e9 array.filter() pour ne conserver que les salutations qui correspondent au code de la langue. </p>"},{"location":"exercices/03_helloworld_api/#post-apisalutations","title":"POST /api/salutations","text":"<ul> <li>Vous devez dans le corps de la requ\u00eate envoyer les informations suivantes en JSON (utilisez Postman le faire) : </li> </ul> corps<pre><code>{ \n    \"code_langue\" : \"fr\", \n    \"langue\" : \"Fran\u00e7ais\", \n    \"message\" : \"Votre nouveau message\"\n}\n</code></pre> <ul> <li>Si vous utilisez l'intergiciel express.json() vous avez acc\u00e8s aux donn\u00e9es par l'objet req. Il ne vous reste ensuite qu'\u00e0 ajouter les valeurs au tableau salutations. </li> </ul> index.js<pre><code>app.post('/', (req, res) =&gt; {\n    const message = req.body.message; // Il y a un item message dans le json envoy\u00e9\n    ...\n    if(!req.body.message) {\n        console.log(\"Le param\u00e8tre message est absent\");\n    }\n    ...\n});\n</code></pre> <ul> <li>Cr\u00e9ez une fonction dans le fichier salutations.model.js qui va s'occuper d'ajouter dans le tableau le nouvel objet salutation.</li> <li>Dans le fichier salutations.controller.js validez que toutes les informations sont pr\u00e9sente, sinon retournez le message suivant au format JSON avec le code d'erreur 400.</li> </ul> <pre><code>{\n    \"message\" : \"Erreur, les param\u00e8tres code_langue, langue et message sont obligatoires\"\n}\n</code></pre> <ul> <li>Un fois l'ajour effectu\u00e9, retournez le message suivant en JSON. (<code>[message]</code> repr\u00e9sente la valeur du param\u00eatre message)</li> </ul> <pre><code>{\n    \"message\" : \"Salutation ajout\u00e9e\",\n    \"salutation\" : [message]\n}\n</code></pre>"},{"location":"exercices/03_helloworld_api/#intergiciel","title":"Intergiciel","text":"<p>\u00c0 l'aide de l'intergiciel Morgan ajoutez dans un fichier nomm\u00e9 access.log une entr\u00e9e \u00e0 chaque fois qu'on acc\u00e8de \u00e0 une route du serveur. Cette entr\u00e9e devra afficher la date au format clf, la m\u00e9thode http, la route, le status de la r\u00e9ponse et le temps de r\u00e9ponse en millisecondes. Le r\u00e9sultat doit \u00eatre format\u00e9 comme ceci: </p> access.log<pre><code>22/Jan/2024:15:07:15 +0000 =&gt; GET / 200 - 7.331 ms\n</code></pre> <p>Consultez les notes de cours sur les intergiciels et la documentation de Mogan pour vous aider.</p>"},{"location":"exercices/04_pokemon_api/","title":"Exercice 04 - Pokemon API (Formatif)","text":"<p>Dans cet exercice vous devez cr\u00e9er un api avec Express.js qui couvre toutes les op\u00e9rations CRUD sur une table MySQL. Vous trouverez la description des routes \u00e0 cr\u00e9er plus bas.</p>"},{"location":"exercices/04_pokemon_api/#configuration-du-projet","title":"Configuration du projet","text":"<ul> <li> Acceptez le devoir Gitub Classroom fourni par votre enseignant et clonez le projet.</li> <li> Lancez la commande <code>npm install</code> pour installer automatiquement les modules express, dotenv et nodemon car ils sont d\u00e9j\u00e0 pr\u00e9sent dans le fichier pacjage.json.</li> <li> Les valeurs des param\u00e8tres de connexion \u00e0 la base de donn\u00e9es ainsi que le num\u00e9ro de port doivent \u00eatre enregistr\u00e9es dans un fichier .env. </li> <li> Pour le projet installez aussi les modules mysql ou mysql2 selon votre SGBD.</li> <li> Vous devez utiliser une structure mod\u00e8les, routes et contr\u00f4leur comme d\u00e9crite dans la section Structure de projet avec Express.</li> </ul> <p>Note</p> <p>Une fois l'exercice termin\u00e9, faites un commit et un push de votre derni\u00e8re version.</p>"},{"location":"exercices/04_pokemon_api/#importation-de-la-base-de-donnees","title":"Importation de la base de donn\u00e9es","text":"<ul> <li> Ex\u00e9cutez le script SQL disponible ici : exercice04_data.sql</li> </ul> <p>Le script va cr\u00e9er la base de donn\u00e9es bd_exercices ainsi que la table pokemon.</p>"},{"location":"exercices/04_pokemon_api/#routes-a-creer","title":"Routes \u00e0 cr\u00e9er","text":""},{"location":"exercices/04_pokemon_api/#afficher-un-pokemon-selon-son-id","title":"Afficher un pokemon selon son id","text":"route<pre><code>GET /api/pokemons/:id\n</code></pre> reponse<pre><code>// Succ\u00e8s avec la route /api/pokemons/1\n// Code de statut 200\n{\n    \"nom\":\"Bulbasaur\",\n    \"type_primaire\":\"Grass\",\n    \"type_secondaire\":\"Poison\",\n    \"pv\":45,\n    \"attaque\":49,\n    \"defense\":49\n}\n\n// Erreur : Le pokemon n'est pas trouv\u00e9\n// Code de statut 404\n{\n    \"erreur\":\"Pokemon introuvable avec l'id 1245\"\n}\n\n// Erreur : Il y a eu une erreur lors de la requ\u00eate SQL \n// Code de statut 500\n// Inscrivez \u00e0 la console le code de statut SQL et le message d'erreur g\u00e9n\u00e9r\u00e9\n{\n    \"erreur\":\"Echec lors de la r\u00e9cup\u00e9ration du pokemon avec l'id 1245\"\n}\n</code></pre>"},{"location":"exercices/04_pokemon_api/#afficher-une-liste-paginee-de-tous-les-pokemons","title":"Afficher une liste pagin\u00e9e de tous les pokemons","text":"route<pre><code>GET /api/pokemons/liste?page=1&amp;type=grass\n</code></pre> <p>Cr\u00e9ez une route qui va afficher la liste de tous les pokemons. Cette route sera pagin\u00e9e et n'affichera que 25 pokemons par page. Chaque pokemon a aussi un type primaire. On va pouvoir ajouter un filtre en param\u00eatre pour n'afficher que les pokemons qui sont du type choisi.</p> <ul> <li>Le param\u00e8tre page est optionnel. S'il n'est pas fournie, on va retourner la page 1.</li> <li>Le param\u00e8tre type est aussi optionnel. S'il n'est pas fournie, afficher tous les pokemons. Si le type ne correspond \u00e0 aucun type primaire dans la table pokemon, on va retourner un tableau vide avec les valeurs nombrePokemonTotal \u00e0 0 et la page et totalPage \u00e0 1. </li> </ul> <p>Astuce</p> <p>Dans ma solution j'ai seulement ajout\u00e9 le type primaire comme param\u00e8tre de la requ\u00eate SQL. Ensuite j'ai utilis\u00e9 <code>array.slice()</code> pour effectuer la pagination sur le tableau de r\u00e9sultats.</p> reponse<pre><code>// Succ\u00e8s avec la route /api/pokemons/liste?page=2&amp;type=grass\n// Code de statut 200\n{\n    \"pokemons\" : [\n        {\n            \"nom\":\"Bulbasaur\",\n            \"type_primaire\":\"Grass\",\n            \"type_secondaire\":\"Poison\",\n            \"pv\":45,\n            \"attaque\":49,\n            \"defense\":49\n        },\n        {\n          ...\n        }\n    ],\n    // La valeur pass\u00e9 du param\u00eatre, si aucune laissez vide (\"type\" : \"\")\n    \"type\" : \"Grass\",\n    // Le nombre total de pokemons selon le filtre appliqu\u00e9 (ici il y a 94 pokemons de type \"Grass\").\n    \"nombrePokemonTotal\" : 94,\n    // La valeur du param\u00e8tre, sinon inscrire 1.\n    \"page\" : 2,\n    // Le nombre de pages au total, le nombre de pokemons totaux divis\u00e9s par le \n    // nombre de pokemons par page (25) arrondis \u00e0 l'entier sup\u00e9rieur.\n    \"totalPage\" : 4\n}\n\n// Erreur : Il y a eu une erreur lors de la requ\u00eate SQL \n// Code de statut 500\n// Inscrivez \u00e0 la console le code de statut SQL et le message d'erreur g\u00e9n\u00e9r\u00e9\n{\n    \"erreur\":\"Echec lors de la r\u00e9cup\u00e9ration de la liste des pokemons\"\n}\n</code></pre>"},{"location":"exercices/04_pokemon_api/#ajouter-un-pokemon","title":"Ajouter un pokemon","text":"route<pre><code>POST /api/pokemons\n\n// Structure des donn\u00e9es du corps de la requ\u00eate, en json. \u00c0 remplacer par des donn\u00e9es valides\n{\n    \"nom\":\"\",\n    \"type_primaire\":\"\",\n    \"type_secondaire\":\"\",\n    \"pv\":0,\n    \"attaque\":0,\n    \"defense\":0\n}\n</code></pre> reponse<pre><code>// Succ\u00e8s\n// Code de statut 201\n{\n    \"message\" : \"Le pokemon [nom] a \u00e9t\u00e9 ajout\u00e9 avec succ\u00e8s\",\n    // Nouvelle valeur du pokemon\n    \"pokemon\" : {\n        \"id\": 999, // Le id du nouveau pokemon dans la base de donn\u00e9es\n        \"nom\":\"\",\n        \"type_primaire\":\"\",\n        \"type_secondaire\":\"\",\n        \"pv\":0,\n        \"attaque\":0,\n        \"defense\":0\n    }\n}\n\n// Erreur : Le format du JSON dans le corps de la requ\u00eate est invalide\n// Exemple ici il manquait les champs pv et attaque.\n// Code de statut 400\n{\n    \"erreur\":\"Le format des donn\u00e9es est invalide\",\n    \"champ_manquant\": [\n        \"pv\",\n        \"attaque\"\n    ]\n}\n\n// Erreur : Il y a eu une erreur lors de la requ\u00eate SQL \n// Code de statut 500\n// Inscrivez \u00e0 la console le code de statut SQL et le message d'erreur g\u00e9n\u00e9r\u00e9\n{\n    \"erreur\":\"Echec lors de la cr\u00e9ation du pokemon [nom_du_pokemon]\"\n}\n</code></pre>"},{"location":"exercices/04_pokemon_api/#modifier-un-pokemon","title":"Modifier un pokemon","text":"route<pre><code>PUT /api/pokemons/:id\n\n// Structure des donn\u00e9es du corps de la requ\u00eate, en json. \u00c0 remplacer par des donn\u00e9es valides\n{\n    \"nom\":\"\",\n    \"type_primaire\":\"\",\n    \"type_secondaire\":\"\",\n    \"pv\":0,\n    \"attaque\":0,\n    \"defense\":0\n}\n</code></pre> reponse<pre><code>// Succ\u00e8s\n// Code de statut 200\n{\n    \"message\" : \"Le pokemon id [id] a \u00e9t\u00e9 modifi\u00e9 avec succ\u00e8s\",\n    // Nouvelle valeur du pokemon\n    \"pokemon\" : {\n        \"id\": 999,\n        \"nom\":\"\",\n        \"type_primaire\":\"\",\n        \"type_secondaire\":\"\",\n        \"pv\":0,\n        \"attaque\":0,\n        \"defense\":0\n    }\n}\n\n// Erreur : Le id n'existe pas dans la base de donn\u00e9es\n// Code de statut 404\n{\n    \"erreur\":\"Le pokemon id [id] n'existe pas dans la base de donn\u00e9es\",\n}\n\n// Erreur : Le format du JSON dans le corps de la requ\u00eate est invalide\n// Code de statut 400\n// Exemple ici il manquait les champs pv et attaque.\n{\n    \"erreur\":\"Le format des donn\u00e9es est invalide\",\n    \"champ_manquant\": [\n        \"pv\",\n        \"attaque\"\n    ]\n}\n\n// Erreur : Il y a eu une erreur lors de la requ\u00eate SQL \n// Code de statut 500\n// Inscrivez \u00e0 la console le code de statut SQL et le message d'erreur g\u00e9n\u00e9r\u00e9\n{\n    \"erreur\":\"Echec lors de la modification du pokemon [nom_du_pokemon]\"\n}\n</code></pre>"},{"location":"exercices/04_pokemon_api/#supprimer-un-pokemon","title":"Supprimer un pokemon","text":"route<pre><code>DELETE /api/pokemons/:id\n</code></pre> reponse<pre><code>// Succ\u00e8s\n// Code de statut 200\n{\n    \"message\" : \"Le pokemon id [id] a \u00e9t\u00e9 supprim\u00e9 avec succ\u00e8s\",\n    // Valeur du pokemon supprim\u00e9\n    \"pokemon\" : {\n        \"id\": 999,\n        \"nom\":\"\",\n        \"type_primaire\":\"\",\n        \"type_secondaire\":\"\",\n        \"pv\":0,\n        \"attaque\":0,\n        \"defense\":0\n    }\n}\n\n// Erreur : Le id n'existe pas dans la base de donn\u00e9es\n// Code de statut 404\n{\n    \"erreur\":\"Le pokemon id [id] n'existe pas dans la base de donn\u00e9es\",\n}\n\n// Erreur : Il y a eu une erreur lors de la requ\u00eate SQL \n// Code de statut 500\n// Inscrivez \u00e0 la console le code de statut SQL et le message d'erreur g\u00e9n\u00e9r\u00e9\n{\n    \"erreur\":\"Echec lors de la suppression du pokemon [nom_du_pokemon]\"\n}\n</code></pre>"},{"location":"exercices/04_pokemon_api/#documentation","title":"Documentation","text":"<p>Vous devez cr\u00e9er la documentation ad\u00e9quate pour l'api que vous avez d\u00e9velopp\u00e9 \u00e0 l'exercice 04.</p> <p>La m\u00e9thode pour documenter l'api doit \u00eatre celle d\u00e9crite dans les notes de cours \u00e0 la section Documentation d'un API avec OpenAPI</p>"},{"location":"exercices/04_pokemon_api/#detail-de-la-documentation","title":"D\u00e9tail de la documentation","text":"<ul> <li> Ajoutez la route <code>/api/docs</code> qui affichera la page de la documentation</li> <li> Configurez les valeurs de la section serveurs pour vous permettre de tester l'api depuis la documentation</li> <li> Les 5 routes doivent \u00eatre document\u00e9es</li> <li> Les param\u00e8tres doivent bien \u00eatre d\u00e9taill\u00e9s.</li> <li> Toute les r\u00e9ponses doivent \u00eatre d\u00e9crite avec un exemple de valeur.</li> <li> Utiliser un schema pour le mod\u00e8le pokemon et utilisez le lorsque c'est possible dans votre documentation</li> </ul>"},{"location":"exercices/04b_documentation/","title":"Exercice 04b - Documentation","text":"<p>Vous devez cr\u00e9er la documentation ad\u00e9quate pour l'api que vous avez d\u00e9velopp\u00e9 \u00e0 l'exercice 04.</p> <p>La m\u00e9thode pour documenter l'api doit \u00eatre celle d\u00e9crite dans les notes de cours \u00e0 la section Documentation d'un API avec OpenAPI</p>"},{"location":"exercices/04b_documentation/#detail-de-lexercice","title":"D\u00e9tail de l'exercice","text":"<ul> <li> Ajoutez la route <code>/api/docs</code> qui affichera la page de la documentation</li> <li> Configurez les valeurs de la section serveurs pour vous permettre de tester l'api depuis la documentation</li> <li> Les 5 routes doivent \u00eatre document\u00e9es</li> <li> Les param\u00e8tres doivent bien \u00eatre d\u00e9taill\u00e9s.</li> <li> Toute les r\u00e9ponses doivent \u00eatre d\u00e9crite avec un exemple de valeur.</li> <li> Utiliser un schema pour le mod\u00e8le pokemon et utilisez le lorsque c'est possible dans votre documentation</li> <li> Une fois la documentation termin\u00e9e, faites un push sur votre d\u00e9p\u00f4t Github.</li> </ul>"},{"location":"exercices/05_apikey/","title":"Exercice 05 - Authentification avec cl\u00e9 Api","text":"<p>Vous pouvez faire cet exercice \u00e0 partir de l'api que vous avez d\u00e9velopp\u00e9 \u00e0 l'exercice pr\u00e9c\u00e9dent ou bien d\u00e9buter un nouveau projet. Si vous recommencez un api, assurez-vous d'avoir au moins une route qui retourne un r\u00e9sultat et que vous pourrez prot\u00e9ger.</p>"},{"location":"exercices/05_apikey/#1-creation-dun-utilisateur","title":"1. Cr\u00e9ation d'un utilisateur","text":"<ul> <li> Cr\u00e9er une table utilisateurs dans votre base de donn\u00e9es. Vous devez avoir minimalement les champs id, nom, courriel, mot_de_passe et cle_api.</li> <li> Cr\u00e9ez une route pour ajouter un nouvel utilisateur.</li> </ul> <pre><code>POST /api/users\n\n// Les informations seront dans le corps de la requ\u00eate\n{\n    \"nom\" : \"Mathieu\",\n    \"courriel\" : \"math@cegepvicto.ca\",\n    \"mot_de_passe\" : \"123patates\"\n}\n</code></pre> <ul> <li> Avant de cr\u00e9er l'utilisateur, assurez-vous que tous les champs n\u00e9cessaire sont pr\u00e9sent et que le courriel est unique dans la table. Retournez le bon message d'erreur le cas \u00e9ch\u00e9ant.</li> <li> Utilisez la m\u00e9thode que vous souhaitez pour g\u00e9n\u00e9rer la cl\u00e9 api.</li> <li> Le mot de passe doit \u00eatre hash\u00e9 avec BCrypt avant d'\u00eatre sauvegarder dans la base de donn\u00e9es.</li> <li> La r\u00e9ponse de la requ\u00eate doit \u00eatre format\u00e9 comme suit.</li> </ul> <pre><code>{\n    \"message\" : \"L'utilisateur a \u00e9t\u00e9 cr\u00e9\u00e9\",\n    \"cle_api\" : \"123456\"\n}\n</code></pre>"},{"location":"exercices/05_apikey/#2-intergiciel-de-validation","title":"2. Intergiciel de validation","text":"<ul> <li> Cr\u00e9ez un intergiciel qui va valider que la cl\u00e9 est pr\u00e9sente dans l'ent\u00eate de la requ\u00eate existe dans la base de donn\u00e9e. Vous devez utiliser Authorization.</li> </ul> <pre><code>Authorization : \"cle_api 123456\"\n</code></pre> <ul> <li> Retournez une erreur si la cl\u00e9 n'est pas pr\u00e9sente ou si elle est invalide.</li> </ul>"},{"location":"exercices/05_apikey/#3-protection-dun-route","title":"3. Protection d'un route","text":"<ul> <li> Prot\u00e9gez une de vos routes avec l'intergiciel et testez son fonctionnement.</li> </ul>"},{"location":"exercices/05_apikey/#4-ajout-dune-route-pour-recuperer-la-cle","title":"4. Ajout d'une route pour r\u00e9cup\u00e9rer la cl\u00e9","text":"<ul> <li> Ajoutez une route pour permettre \u00e0 un utilisateur de r\u00e9cup\u00e9rer sa cl\u00e9 API s'il la oubli\u00e9. On peut aussi ajout\u00e9 un param\u00eatre dans l'url pour demander d'en g\u00e9n\u00e9rer une nouvelle.</li> </ul> <pre><code>GET /api/users/cle?nouvelle=1\n\n// Les informations seront dans le corps de la requ\u00eate\n{\n    \"courriel\" : \"math@cegepvicto.ca\",\n    \"mot_de_passe\" : \"123patates\"\n}\n</code></pre> <ul> <li> Validez que le courriel et le mot de passe correspondent.</li> <li> Si le param\u00eatre nouvelle est pr\u00e9sent et \u00e9gale \u00e0 1, g\u00e9n\u00e9rez une nouvelle cl\u00e9.</li> <li> Retourner la nouvelle cl\u00e9 ou l'ancienne \u00e0 l'utilisateur.</li> </ul> <pre><code>{\n    \"cle_api\" : \"654321\"\n}\n</code></pre>"},{"location":"exercices/06_render/","title":"Exercice 06 - D\u00e9ploiement sur Render","text":"<p>Objectif </p> <p>Vous devez d\u00e9ployer un API Rest avec une base de donn\u00e9es PostgreSQL.</p>"},{"location":"exercices/06_render/#etape-1-creation-de-la-base-de-donnees","title":"\u00c9tape 1 - Cr\u00e9ation de la base de donn\u00e9es","text":"<ul> <li> Cr\u00e9ez-vous un compte avec votre utilisateur Github sur Render.</li> <li> Cr\u00e9ez une base de donn\u00e9es PostgreSQL sur Render.</li> <li> Ajoutez une connexion dans DBeaver pour vous connecter \u00e0 la base de donn\u00e9es en ligne.</li> </ul>"},{"location":"exercices/06_render/#etape-2-modification-du-projet","title":"\u00c9tape 2 - Modification du projet","text":"<ul> <li> Faites une copie de l'exercice 4, c'est cette copie que nous allons modifier et utiliser pour le d\u00e9ploiement.</li> <li> Installez le module PG et modifiez votre projet pour l'utiliser.</li> <li> Cr\u00e9ez la table pokemon dans votre base de donn\u00e9es. Vous pouvez utiliser ce script SQL : exercice06_create_bd</li> </ul>"},{"location":"exercices/06_render/#etape-3-creation-du-service-web","title":"\u00c9tape 3 - Cr\u00e9ation du service web","text":"<ul> <li> Sur Render cr\u00e9ez un service web</li> <li> Ajoutez correctement les variables d'environnement au service.</li> <li> D\u00e9ployez votre api \u00e0 l'aide de Github</li> </ul>"},{"location":"exercices/06_render/#etape-4-test-et-remise","title":"\u00c9tape 4 - Test et remise","text":"<ul> <li> Testez votre api avec Postman.</li> <li> Remettez l'url de votre api par Teams dans le devoir de l'exercice. Donnez-moi l'url au complet avec la route pour afficher le Pokemon avec le id 37 (Pikachu).</li> </ul>"},{"location":"exercices/07_fetch/","title":"Exercice 07 - Consommer un api avec Fetch","text":"<p>Consultez la documentation de l'API disponible \u00e0 cette adresse : https://restcountries.com/.</p> <p>Vous devez cr\u00e9er une page html avec un script JavaScript qui va permettre les op\u00e9rations suivantes : </p> <ul> <li>Demander \u00e0 l'usager le nom d'un pays en fran\u00e7ais.</li> <li>En cliquand sur un bouton, envoyer une requ\u00eate \u00e0 l'API.</li> <li>R\u00e9cup\u00e9rer et afficher dans la page le nom officiel en fran\u00e7ais du pays, le drapeau, la capitale et la population.</li> </ul> <p>Voici un exemple de r\u00e9sultat.</p> <p> </p> Essayez de soigner un peu le css \ud83d\ude0b"},{"location":"exercices/08_toolpad/","title":"Exercice 08 - Premi\u00e8re application avec Toolpad Studio","text":"<p>\u00c0 l'aide de Toolpad Studio vous devez recr\u00e9er l'interface de l'exercice pr\u00e9c\u00e9dente avec de petites modifications.</p> <ul> <li>Une zone de texte permet d'inscrire le nom d'un pays en fran\u00e7ais.</li> <li>Utilisez la route suivante pour r\u00e9cup\u00e9rer les r\u00e9sultats quand on clique sur un bouton.</li> </ul> <pre><code>https://restcountries.com/v3.1/translation/nomDuPays\n</code></pre> <ul> <li>Cette route peut retourner plus d'un r\u00e9sultat. Remplissez un Select avec le code cca2 et le nom officiel en fran\u00e7ais de chaque pays.</li> <li>Utilisez l'expression suivante dans le transform de la requ\u00eate pour vous permettre de remplir le Select</li> </ul> <pre><code>return data.map((pays) =&gt; {\n  return {\n    label: pays.translations.fra.official,\n    value: pays.cca2\n  }\n});\n</code></pre> <ul> <li>Ensuite quand on s\u00e9lectionne un pays dans le Select lancez une seconde requ\u00eate qui va r\u00e9cup\u00e9rer le drapeau, la capitale et la population du pays.</li> <li>Par d\u00e9faut dans le Select le premier pays de la liste devrait \u00eatre s\u00e9lectionn\u00e9.</li> </ul> <p>Voici deux exemples de r\u00e9sultats</p> <p></p> <p></p>"},{"location":"exercices/09_toolpad_crud/","title":"Op\u00e9rations CRUD avec Toolpad Studio","text":"<p>\u00c0 partir de l'api que vous avez mise en ligne sur Render \u00e0 l'exercice 6 vous devez cr\u00e9er une interface avec Toolpad Studio qui comportera les fonctionnalit\u00e9s suivantes : </p> <ul> <li> Dresser la liste des enregistrements dans une grille.</li> <li> Permettre d'ajouter un enregistrement dans la base de donn\u00e9es.</li> <li> R\u00e9cup\u00e9rer un enregistrement et donner la possibilit\u00e9 de le modifier.</li> <li> Supprimer un enregistrement.</li> <li> Rafra\u00eechir la liste apr\u00e8s une op\u00e9tation (automatiquement ou sur un clique de bouton).</li> </ul> <p>Le fonctionnement de votre interface est \u00e0 votre discr\u00e8tion (grille modifiable, formulaire).</p> <p>Vous pouvez vous inpisrer de l'exemple suivant qui se retrouve dans la documentation de Toolpad Studio : https://mui.com/toolpad/studio/examples/basic-crud-app/.</p> <p> </p> Exemple tir\u00e9 de la documentation"},{"location":"exercices/10_meme_generator/","title":"Exercice 10 - G\u00e9n\u00e9rateur de meme","text":"<p>\u00c0 l'aide de l'api de ImgFlip et de Toolpad Studio vous devez creer un g\u00e9n\u00e9rateur de \"meme\".</p>"},{"location":"exercices/10_meme_generator/#documents-a-remettre","title":"Documents \u00e0 remettre","text":"<p>Voici ce que vous devez remettre dans un dossier compress\u00e9 nomm\u00e9 ex10_noDA sur Teams</p> <ul> <li>Le r\u00e9pertoire ex10_noDa situ\u00e9 dans votre projet dans <code>./toolpad/pages/</code>. (Voir la section Nom de votre page)</li> <li>La collection de vos requ\u00eates Postman en format JSON (Voir la section Test des routes avec Postman)</li> </ul>"},{"location":"exercices/10_meme_generator/#instructions","title":"Instructions","text":"<ul> <li>Cr\u00e9ez un nouveau projet avec Toolpad Studio pour cet exercice.</li> <li>Vous allez aussi devoir vous cr\u00e9er un compte gratuit sur le site de ImgFlip : https://imgflip.com/.</li> <li>Notez bien votre nom d'usager et votre mot de passe, vous allez en avoir besoin pour utiliser l'api.</li> <li>Consultez la documentation de l'api \u00e0 cette adresse : https://imgflip.com/api</li> <li>Pour le projet vous allez utiliser les routes <code>/get_memes</code> et <code>/caption_image</code>.</li> </ul>"},{"location":"exercices/10_meme_generator/#fonctionnement-de-lapplication","title":"Fonctionnement de l'application","text":"<ul> <li>Je vous laisse d\u00e9couper l'application en composante de la fa\u00e7on que vous jugez pertinante.</li> <li>Affichez \u00e0 l'utilisateur une liste de s\u00e9lection avec 10 images de meme parmi lesquelles il pourra choisir. Ces images seront r\u00e9cup\u00e9r\u00e9es depuis le r\u00e9sultat de la route <code>/get_memes</code>. Pour plus de simplicit\u00e9, ne retenez que les 10 premi\u00e8res images avec la valeur <code>\"box_count\" : 2</code>.</li> <li>Affichez dans la liste le nom de l'image et dans une zone sous la liste l'image s\u00e9lectionn\u00e9e.</li> <li>Ensuite ajoutez deux zones de saisies qui permettront d'ajouter deux textes \u00e0 votre image. </li> <li>Quand l'usager cliquera sur un bouton \"g\u00e9n\u00e9rer\", faites afficher l'image du r\u00e9sultat dans la page.</li> <li>Ajoutez aussi une lien hypertexte \"Ouvrir en taille r\u00e9elle\" qui ouvrira dans un nouvel onglet l'url de l'image.</li> <li>Utilisez la route <code>/caption_image</code> pour g\u00e9n\u00e9rer l'image. Attention, la fa\u00e7on d'envoyer les donn\u00e9es dans le body est un peu diff\u00e9rente de ce qu'on a vu auparavant, voir la note plus bas pour plus de d\u00e9tail.</li> <li>Donc en r\u00e9sum\u00e9, l'utilisateur s\u00e9lectionne une des 10 images, inscrit ensuite un texte dans chacune des zones et clique sur le bouton \"G\u00e9n\u00e9rer\".</li> </ul> Exemple de la page"},{"location":"exercices/10_meme_generator/#utilisation-de-variables-denvironnement","title":"Utilisation de variables d'environnement","text":"<p>Utilisez des variables d'environnement dans un fichier .env \u00e0 la racine du projet pour enregistrer les valeurs suivantes : </p> <ul> <li>Le host de l'api (https://api.imgflip.com)</li> <li>Votre nom d'usager</li> <li>Votre mot de passe</li> </ul>"},{"location":"exercices/10_meme_generator/#nom-de-votre-page","title":"Nom de votre page","text":"<p>Renommez votre page de la fa\u00e7on suivante : </p> <ul> <li>Node name : ex10_noDA</li> <li>Display name : ex10_noDA</li> <li>Page title : Exercice 10</li> </ul>"},{"location":"exercices/10_meme_generator/#test-des-routes-avec-postman","title":"Test des routes avec Postman","text":"<p>Dans Postman</p> <ul> <li>Cr\u00e9ez une nouvelle collection nomm\u00e9e ex10_noda</li> <li>Cr\u00e9ez une requ\u00eate fonctionnelle pour chacune des routes que vous allez utiliser (<code>/get_memes</code> et <code>/caption_image</code>)</li> <li>Vous pouvez exporter la collection en cliquant sur les trois points \u00e0 droite du titre de la collection. S\u00e9lectionnez Collection v2.1 dans les choix.</li> </ul>"},{"location":"exercices/10_meme_generator/#envoyer-des-valeurs-dans-le-corps-de-la-requetes","title":"Envoyer des valeurs dans le corps de la requ\u00eates","text":"<p>Jusqu'\u00e0 maintenant on a toujours utilis\u00e9 le format JSON pour envoyer des donn\u00e9es dans le \"body\" de nos requ\u00eates. L'api de ImgFlip accepte un autre format : <code>x-www-form-urlencoded</code>. Le format utilise aussi une syntaxe cl\u00e9/valeur mais la fa\u00e7on d'inclure les donn\u00e9es dans la requ\u00eate va diff\u00e9rer un peu.</p>"},{"location":"exercices/10_meme_generator/#sous-postman","title":"Sous Postman","text":"<p>Dans la section \"Body\", cochez l'option <code>x-www-form-urlencoded</code>. Ensuite entrez vos informations dans le tableau : </p> <p></p>"},{"location":"exercices/10_meme_generator/#dans-linterface-de-toolpad-studio","title":"Dans l'interface de Toolpad Studio","text":"<p>Dans la section body de la requ\u00eate, s\u00e9lectionnez x-www-form-urlencoded en entrez ensuite chacun de vos param\u00e8tres. Vous pouvez les binder \u00e0 des param\u00e8tres de la section parameters. </p> <p></p>"},{"location":"exercices/formatif/","title":"Formatif formel","text":"<p>\u00c0 partir d'une copie de votre exercice 3, vous devez modifier le fichier salutations.model.js pour qu'il interroge une base de donn\u00e9es.</p>"},{"location":"exercices/formatif/#configuration-du-projet","title":"Configuration du projet","text":"<ul> <li> Cr\u00e9ez une copie de votre exercice 3 et jumelez le \u00e0 un d\u00e9p\u00f4t sur github. Assurez-vous de cr\u00e9er un fichier .gitignore et d'exclure les fichiers et r\u00e9pertoires qui ne sont pas n\u00e9cessaire.</li> <li> Utilisez nodemon et configurez un script pour que votre application puisse \u00eatre lanc\u00e9 avec la commande <code>npm start</code>. (Nodemon doit \u00eatre install\u00e9 uniquement pour le d\u00e9veloppement).</li> <li> Les valeurs des param\u00e8tres de connexion \u00e0 la base de donn\u00e9es ainsi que le num\u00e9ro de port doivent \u00eatre enregistr\u00e9es dans un fichier .env. Ajoutez aussi un fichier .env.example qui est le gabarit vide de votre fichier .env.</li> <li> Pour le projet installez aussi les modules express et mysql.</li> <li> Vous devez utiliser une structure mod\u00e8les, routes et contr\u00f4leur comme d\u00e9crite dans la section Structure de projet avec Express.</li> </ul> <p>Note</p> <p>Une fois l'exercice termin\u00e9, remettez-moi dans le devoir Teams le lien vers votre d\u00e9p\u00f4t Github. Assurez-vous que la version de votre projet soit \u00e0 jour et que je puisse y acc\u00e9der.</p>"},{"location":"exercices/formatif/#importation-de-la-base-de-donnees","title":"Importation de la base de donn\u00e9es","text":"<ul> <li> Ex\u00e9cutez le script SQL disponible ici : exercice03_data.sql</li> </ul>"},{"location":"exercices/formatif/#consignes","title":"Consignes","text":"<ul> <li>Une fois le script ex\u00e9cut\u00e9, modifiez vos fichiers mod\u00e8les et controlleurs pour que toutes les transactions soient fait \u00e0 la base de donn\u00e9es.</li> </ul>"},{"location":"exercices/formatif/#grille-de-correction","title":"Grille de correction","text":"<p>La grille de correction est disponible ici : Grille de correction formatif</p>"},{"location":"notes_de_cours/workspace/","title":"Environnement de d\u00e9veloppement","text":"<p>Voici un r\u00e9sum\u00e9 des technologies et logiciel que nous utiliserons pour le cours. Je n'ai pas de probl\u00e8me \u00e0 ce que vous utilisiez autre chose mais validez avec moi quand-m\u00eame.</p>"},{"location":"notes_de_cours/workspace/#langage","title":"Langage","text":"<ul> <li>NodeJS</li> </ul>"},{"location":"notes_de_cours/workspace/#editeur-de-developement-integre-ide","title":"\u00c9diteur de d\u00e9velopement int\u00e9gr\u00e9 (IDE)","text":"<ul> <li>Visual Studio Code</li> </ul>"},{"location":"notes_de_cours/workspace/#sgbd-et-outils","title":"SGBD et outils","text":"<ul> <li>Devilbox : Essentiellement pour pouvoir g\u00e9rer des bases de donn\u00e9es MySQL ou PostgreSQL.</li> <li>DBeaver : Un outil de gestion des bases de donn\u00e9es. </li> </ul>"},{"location":"notes_de_cours/workspace/#client-api","title":"Client API","text":"<ul> <li>Postman : Logiciel qui nous permet d'interroger et de tester des apis.</li> </ul>"},{"location":"notes_de_cours/aide/cors/","title":"Erreur avec CORS (Cross-Origin Resource Sharing)","text":"Vous avez une erreur avec CORS <p>Pour des raisons de s\u00e9curit\u00e9, les requ\u00eates HTTP multi-origine \u00e9mises depuis les scripts sont restreintes. On peut modifier ce comportement en modifiant les param\u00e8tres CORS dans l'ent\u00e8te de la requ\u00eate. </p> <p>La m\u00e9thode la plus simple est de permettre toutes les requ\u00e8tes multi-origines. Devinez quoi, il y a un middleware qui s'int\u00e8gre facilement dans nos projet Express et qui joue exactement ce r\u00f4les.</p> Installation du module<pre><code>npm i cors\n</code></pre> app.js<pre><code>// Dans votre fichier de d\u00e9marrage\nconst cors = require('cors');\n\n// D\u00e9claration des middlewares\napp.use(cors());\n</code></pre> <p>On peut ajuster le comportement plus finement, mais dans l'exemple plus haut toute les routes seront accessible peut importe l'origine de la requ\u00e8te.  </p> <p>Manuel</p> <p>Pour plus de d\u00e9tail : https://expressjs.com/en/resources/middleware/cors.html</p>"},{"location":"notes_de_cours/aide/recuperer_parametres/","title":"R\u00e9cup\u00e9rer les param\u00e8tres d'une requ\u00eate HTTP","text":"<p>On a vu qu'il y a plusieurs m\u00e9thodes pour passer des param\u00e8tres dans une requ\u00eate HTML : dans la section \"query\" de l'url, directement dans l'url et dans le corps (body) de la requ\u00eate.</p> <p>Avec Express.js nous allons dans tous les cas utiliser l'objet Request (req).</p>"},{"location":"notes_de_cours/aide/recuperer_parametres/#parametre-de-la-section-query","title":"Param\u00e8tre de la section query","text":"Url exemple<pre><code>http://localhost:3000/api/users?code=1&amp;nom=Mathieu\n</code></pre> <p>Les param\u00eatres de la section query se retrouvent dans l'objet req.query. Donc pour acc\u00e9der \u00e0 la valeur d'un param\u00eatre on fera req.query.nomParametre. Pour valider qu'un param\u00eatre est pr\u00e9sent on peut faire une condition du genre <code>if(req.query.nomParam)</code> qui retournera true.</p> exemple.js<pre><code>app.get('/api/users', (req, res) =&gt; {\n    // R\u00e9cup\u00e8re les param\u00e8tres de la requ\u00eate\n    const queryParams = req.query;\n    console.log('code :', queryParams.code);\n    // On pourrait aussi faire\n    console.log('Nom :', req.query.nom);\n\n    // On v\u00e9rifie que le param\u00e8tre code est bien pr\u00e9sent\n    if(!queryParams.code) {\n        res.status(404);\n        res.send('Le code est obligatoire');\n        return;\n    }\n\n    res.send(`Vous avez envoy\u00e9 le code ${queryParams.code}`);\n});\n</code></pre>"},{"location":"notes_de_cours/aide/recuperer_parametres/#parametre-dans-la-route","title":"Param\u00e8tre dans la route","text":"Url exemple<pre><code>http://localhost:3000/api/1\n</code></pre> <p>On a vu qu'on pouvait aussi envoyer un param\u00eatre directement dans la route. Dans ce cas on va acc\u00e9der aux param\u00eatres par l'objet req.params. On peut utiliser le param\u00eatre de la m\u00eame fa\u00e7on qu'avec un param\u00eatre query.</p> exemple.js<pre><code>app.get('/api/users/:code', (req, res) =&gt; {\n    // R\u00e9cup\u00e8re les param\u00e8tres de la requ\u00eate\n    const params = req.params;\n    console.log('code :', params.code);\n    // On pourrait aussi faire\n    console.log('code :', req.params.code);\n\n    // On v\u00e9rifie que le param\u00e8tre code est bien pr\u00e9sent\n    if(!params.code) {\n        res.status(404);\n        res.send('Le code est obligatoire');\n        return;\n    }\n\n    res.send(`Vous avez envoy\u00e9 le code ${params.code}`);\n});\n</code></pre>"},{"location":"notes_de_cours/aide/recuperer_parametres/#parametre-dans-le-corps-de-la-requete","title":"Param\u00e8tre dans le corps de la requ\u00e8te","text":"Url exemple<pre><code>POST http://localhost:3000/api/1\n\nBODY\n{\n    \"prenom\" : \"Mathieu\",\n    \"nom\" : \"Fr\u00e9chette\"\n}\n</code></pre> <p>Pour r\u00e9cup\u00e9rer facilement les donn\u00e9es dans le corps de la requ\u00e8te on va utiser le middleware <code>express.json()</code>. Le contenu du corps de la requ\u00e8te se retrouvera dans l'objet req.body sous la forme d'un objet JavaScript.</p> exemple.js<pre><code>app.post('/api/users', (req, res) =&gt; {\n    // R\u00e9cup\u00e8re les param\u00e8tres de la requ\u00eate\n    const utilisateur = req.body;\n\n    // On v\u00e9rifie que le param\u00e8tre nom est bien pr\u00e9sent\n    if(!utilisateur.prenom || !utilisateur.nom) {\n        res.status(400);\n        res.send('Le nom complet est obligatoire');\n        return;\n    }\n\n    // Code pour enregistrer l'utilisateur dans la base de donn\u00e9es\n\n    res.send(`L'utilisateur ${utilisateur.prenom} ${utilisateur.nom} a \u00e9t\u00e9 cr\u00e9\u00e9`);\n});\n</code></pre>"},{"location":"notes_de_cours/aide/start_express/","title":"D\u00e9marrer un projet Express.js","text":""},{"location":"notes_de_cours/aide/start_express/#demarrer-un-projet-expressjs","title":"D\u00e9marrer un projet Express.js","text":"<p>Voici une petite liste de t\u00e2ches \u00e0 effectuer \u00e0 chaque fois que vous d\u00e9butez un nouveau projet en Express.</p> <ul> <li> S'assurer que Node.js est bien install\u00e9. En terminal <code>node -v</code> pour v\u00e9rifier.</li> <li> Cr\u00e9ez un nouveau r\u00e9pertoire pour le projet. Chaque projet doit \u00eatre dans un r\u00e9pertoire distinct.</li> <li> Initialisez le fichier package.json en ouvrant un terminal dans le dossier racine du projet et en faisant la commande <code>npm init -y</code></li> <li> Cr\u00e9ez le fichier de d\u00e9marrage de votre application, g\u00e9n\u00e9ralement index.js, \u00e0 la racine du projet.</li> <li> Installez le module nodemon uniquement pour le d\u00e9veloppement, en ligne de commande <code>npm install nodemon -D</code></li> <li> Dans le fichier package.json \u00e0 la section script ajoutez le script <code>\"start\" : \"nodemon index.js\"</code>. Adaptez le nom du fichier \u00e0 celui de votre fichier de d\u00e9marrage.</li> <li> Installez les autres modules n\u00e9cessaires \u00e0 votre application avec npm, minimalement <code>npm install express</code>. Vous pouvez installer plusieurs modules en m\u00eame temps en listant leur nom s\u00e9par\u00e9 par des espaces dans la commande : <code>npm install express dotenv morgan</code>.</li> <li> Dans votre fichier de d\u00e9marrage (index.js) ajoutez la ligne <code>console.log(\"Je suis pr\u00eat \u00e0 commencer\");</code></li> <li> Testez votre installation avec la commande <code>npm start</code> dans le terminal \u00e0 la racine de votre projet.</li> </ul>"},{"location":"notes_de_cours/api/bonnes_pratiques/","title":"Les bonnes pratiques dans la conception d'un API","text":""},{"location":"notes_de_cours/api/bonnes_pratiques/#utiliser-le-format-json","title":"Utiliser le format JSON","text":"<p>Le format \u00e0 pr\u00e9coniser pour recevoir et retourner de l'information de notre api est le format JSON. C'est de loin le plus utilis\u00e9 aujourd'hui et la grande majorit\u00e9 des langages de programmation on des fonctions natives pour le manipuler.</p> <p>Plus de d\u00e9tail dans cette section : Le format JSON</p>"},{"location":"notes_de_cours/api/bonnes_pratiques/#utiliser-des-noms-au-lieu-de-verbes-pour-les-routes","title":"Utiliser des noms au lieu de verbes pour les routes","text":"<p>Quand on nomme les routes de notre api, on ne devrait pas utiliser de verbe. L'emploi d'un nom significatif est \u00e0 privil\u00e9gier. Par exemple notre api nous permet de retourner une liste d'utilisateurs ou d'en cr\u00e9er un, on serait tent\u00e9 d'utiliser comme nom de route </p> <pre><code>https://monApi/getUtilisateurs\nhttps://monApi/createUtilisateurs\n</code></pre> <p>mais il est pr\u00e9f\u00e9rable d'utiliser dans les deux cas</p> <pre><code>https://monApi/utilisateurs\n</code></pre> <p>Une m\u00eame route peut avoir plus d'une fonctionnalit\u00e9, c'est la m\u00e9thode HTTP qui nous permet de les diff\u00e9renci\u00e9es.</p>"},{"location":"notes_de_cours/api/bonnes_pratiques/#utiliser-de-parametres-directement-dans-lurl","title":"Utiliser de param\u00e8tres directement dans l'url","text":"<p>Vous pouvez inclure des param\u00e8tes dans la route des deux fa\u00e7ons suivantes : </p> <p>Dans la section query de l'url : <pre><code>https://monApi/utilisateurs?code=1\n</code></pre> Cette m\u00e9thode permet d'ajouter facilement plusieurs param\u00e8tres.</p> <p>Directement dans la route <pre><code>https://monApi/utilisateurs/1\n</code></pre> Cette m\u00e9thode ne devrait pas \u00eatre utilis\u00e9 avec plus d'un param\u00e8tre. Vous devez aussi faire attention \u00e0 ne pas cr\u00e9er de confusion avec d'autres routes. <pre><code>https://monApi/utilisateurs/1\nhttps://monApi/utilisateurs/tous\n</code></pre> Dans cette exemple, selon l'ordre que les routes seront trait\u00e9es dans le code, la deuxi\u00e8me pourrait ne jamais \u00eatre accessible.</p>"},{"location":"notes_de_cours/api/bonnes_pratiques/#utiliser-la-methode-http-pour-decrire-la-fonctionnalite-de-la-ressource","title":"Utiliser la m\u00e9thode HTTP pour d\u00e9crire la fonctionnalit\u00e9 de la ressource","text":"<p>En lien avec le point suivant, utilisez la bonne m\u00e9thode HTTP pour indiquer quelle est la fonctionnalit\u00e9 de la route. Il existe une m\u00e9thode qui correspondante \u00e0 chaque op\u00e9ration CRUD. </p> Op\u00e9ration dans la BD M\u00e9thode http Lire GET Ins\u00e9rer POST Modifier PUT Modifier partiellement PATCH Supprimer DELETE <p>Attention</p> <p>On ne doit jamais modifier une ressource avec une m\u00e9thode GET.</p> <p>Les actions de modification PUT et PATCH sont tr\u00e8s similaires, la diff\u00e9rence est que PUT est utilis\u00e9 pour modifier toutes les valeurs de la ressource alors que PATCH l'est pour une modification partielle. Autre distinction de PUT, si la ressource n'est pas trouv\u00e9, elle sera cr\u00e9\u00e9e. Prenons l'exemple suivant, on veut pouvoir modifier un utilisateur ayant ces informations </p> <pre><code>{\n    \"id\" : \"1\",\n    \"username\" : \"[username]\",\n    \"first_name\" : \"[first_name]\",\n    \"last_name\" : \"[last_name]\",\n    \"email\" : \"[email]\"\n}\n</code></pre> <p>Avec PUT on doit envoyer toutes ces informations dans la requ\u00eate, alors qu'avec PATCH on pourrait permettre seulement d'envoyer et de modifier le email.</p> <p>L'utilisation de la bonne m\u00e9thode HTTP nous permet d'avoir le m\u00eame nom de route pour plus d'une fonction.</p> M\u00e9thode Route Description GET /utilisateurs Retourne la liste de tous les utilisateurs POST /utilisateurs Cr\u00e9ation d'un utilisateur PUT /utilisateurs/21 Modification de l'utilisateur avec le id 21 DELETE /utilisateurs/21 Suppression de l'utilisateur avec le id 21"},{"location":"notes_de_cours/api/bonnes_pratiques/#utiliser-les-codes-de-statut-http","title":"Utiliser les codes de statut HTTP","text":"<p>Dans la r\u00e9ponse de la requ\u00eate \u00e0 votre API utilisez une code de statut HTTP appropri\u00e9 \u00e0 la situation.</p> <ul> <li>200 - 299 indique un succ\u00e8s</li> <li>400 - 499 Il y a eu une erreur c\u00f4t\u00e9 client</li> <li>500 - 599 Il y a eu une erreur c\u00f4t\u00e9 serveur</li> </ul>"},{"location":"notes_de_cours/api/bonnes_pratiques/#resume-des-methodes-avec-le-code-de-statut-suggere","title":"R\u00e9sum\u00e9 des m\u00e9thodes avec le code de statut sugg\u00e9r\u00e9","text":"M\u00e9thode GLOBAL (/utilisateurs) Sur un element (/utilisateurs/{id}) POST 201 Created - La ressource est cr\u00e9\u00e9e et est retourn\u00e9e dans la r\u00e9ponse - GET 200 OK 200 OK 404 Not Found - La ressource n'a pas \u00e9t\u00e9 trouv\u00e9e, ex: le id utilisateur est invalide. PUT 405 Method Not Allowed - On ne devrait pas permettre de modifier toutes les ressources en une action 200 OK - La ressource est modifi\u00e9e et est retourn\u00e9e dans la r\u00e9ponse. 201 Created - La ressource a \u00e9t\u00e9 cr\u00e9\u00e9 car elle etait inexistante. PATCH 405 Method Not Allowed - On ne devrait pas permettre de modifier toutes les ressources en une action 200 OK - La ressource est modifi\u00e9e et est retourn\u00e9e dans la r\u00e9ponse. 404 Not Found - La ressource \u00e0 modifier n'a pas \u00e9t\u00e9 trouv\u00e9e, ex: le id utilisateur est invalide. DELETE 405 Method Not Allowed - On ne devrait pas permettre de supprimer toutes les ressources en une action. Si oui utilisez le code 200. 204 No Content - La ressource a \u00e9t\u00e9 supprim\u00e9 et aucune information n'est retourn\u00e9e dans la r\u00e9ponse. 200 OK - La ressource est supprim\u00e9 et est retourn\u00e9e dans la r\u00e9ponse. 404 Not Found - La ressource \u00e0 supprimer n'a pas \u00e9t\u00e9 trouv\u00e9e, ex: le id utilisateur est invalide."},{"location":"notes_de_cours/api/bonnes_pratiques/#codes-a-utiliser-pour-les-erreurs","title":"Codes \u00e0 utiliser pour les erreurs","text":"Code Utilisation 401 - Unauthorized Le client ne s'est pas encore authentifier pour acc\u00e9der \u00e0 l'api. 403 - Forbidden Le client est authentifi\u00e9 mais n'a pas les autorisations pour acc\u00e9der \u00e0 la ressource. 404 - Not Found L'url utilis\u00e9 est invalide, le client demande une ressource qui n'existe pas. 500 - Internal Server Error Une erreur est survenu c\u00f4t\u00e9 serveur. Retournez de l'information sur l'erreur dans la r\u00e9ponse."},{"location":"notes_de_cours/api/bonnes_pratiques/#utiliser-limbrication-dans-les-routes","title":"Utiliser l'imbrication dans les routes","text":"<p>Quand des ressources de votre api peuvent \u00eatre reli\u00e9es, utilisez l'imbrication pour cr\u00e9er des urls significatifs. Par exemple un auteur peut avoir \u00e9crit plusieurs livres, on pourrait avoir une route nomm\u00e9e <code>/{auteurs}/livres</code> qui retourne tous les livres de l'auteur en param\u00e8tre.</p> <p>Il faut cependant faire attention \u00e0 ne pas trop surcharger la route en allant trop profond\u00e9ment avec l'imbrication.</p>"},{"location":"notes_de_cours/api/bonnes_pratiques/#permettre-les-filtres-le-tri-selection-des-champs-retournes-et-la-pagination","title":"Permettre les filtres, le tri, s\u00e9lection des champs retourn\u00e9s et la pagination","text":"<p>Pour permettre \u00e0 l'utilisateur un meilleur contr\u00f4le sur les donn\u00e9es r\u00e9cup\u00e9r\u00e9es, permettez quand c'est possible l'utilisation de filtres, de tri et de pagination dans vos requ\u00eate. Les param\u00e8tres devraient \u00eatre situ\u00e9 dans la section \"requ\u00eate\" de l'url</p>"},{"location":"notes_de_cours/api/bonnes_pratiques/#filtre","title":"Filtre","text":"<p>Utilisez un nom de param\u00e8tre significatif. Pour saisir plusieurs valeurs \u00e0 un m\u00eame param\u00e8tre, on doit les s\u00e9parer par une virgule.</p> <p>Exemple : </p> <ul> <li><code>/livres?categorie=roman</code> pour afficher tous les livres de la cat\u00e9gorie roman.</li> <li><code>/livres?categorie=roman,documentaire</code> pour afficher tous les livres de la cat\u00e9gorie roman et documentaire.</li> </ul>"},{"location":"notes_de_cours/api/bonnes_pratiques/#tri","title":"tri","text":"<p>Utilisez comme valeur du param\u00e8tre le nom du champ avec un code pr\u00e9d\u00e9fini en pr\u00e9fixe ( + et - par exemple) qui indiquera si le tri est ascendant ou descendant. Le tri sur plus d'un champ devrait aussi \u00eatre permis.</p> <p>Exemple : </p> <ul> <li><code>/livres?tri=+titre,-prix</code> pour trier par les livres titre de mani\u00e8re ascendante et par prix de mani\u00e8re descendante.</li> </ul>"},{"location":"notes_de_cours/api/bonnes_pratiques/#selection-des-champs-retournes","title":"S\u00e9lection des champs retourn\u00e9s","text":"<p>Il peut aussi \u00eatre pertinent de permettre au client de pouvoir s\u00e9lectionner uniquement les champs qu'il veut avoir dans la r\u00e9ponse \u00e0 la requ\u00eate. </p> <p>Exemple : </p> <ul> <li><code>/livres?champs=titre,isbn</code> retournera la liste de tous les livres mais seulement le titres et isbn de chacun.</li> </ul>"},{"location":"notes_de_cours/api/bonnes_pratiques/#pagination","title":"Pagination","text":"<p>Il n'est pas rare qu'une ressource comporte plusieurs centaines sinon milliers d'enregistrements. On devrait permettre au client de pouvoir s\u00e9lectionner seulement une partie des enregistrements en d\u00e9finissant un point de d\u00e9part (offset) et un nombre d'enregistrement (limit). Si on utilise la pagination, on devrait d\u00e9finir des valeurs par d\u00e9faut au param\u00e8tre offset et limit (g\u00e9n\u00e9ralement offset sera \u00e9gale \u00e0 0 pour le premier enregistrement). </p> <p>Exemple : </p> <ul> <li><code>/livres?limit=50&amp;offset=100</code> En partant du centi\u00e8me enregistrement, affiche les 50 livres suivants.</li> </ul> <p>Pour faciliter le traitement des donn\u00e9es, on devrait ajouter dans la r\u00e9ponse le nombre total d'enregistrements ainsi que les valeurs de limit et offset.</p> <p>Une autre technique est d'avoir un nombre d'enregistrement fixe par page et de seulement permettre \u00e0 l'usager de choisir la page qu'il veut afficher. Exemple, on d\u00e9cide d'afficher 30 enregistrements par page, l'url suivant va afficher les enregistrement 61 \u00e0 90 : </p> <ul> <li><code>/livres?page=3</code></li> </ul> <p>On peut bien sur combiner les deux m\u00e9thodes comme c'est souvent le cas dans les sites d'achats en lignes (On peut choisir la page et le nombre d'articles affich\u00e9s par page).</p>"},{"location":"notes_de_cours/api/bonnes_pratiques/#source","title":"Source","text":"<ul> <li>API design patterns and best practices. API Design Patterns and Best Practices | API Guide. (2022, January 12). https://www.moesif.com/blog/api-guide/api-design-guidelines/</li> <li>Chris, K. (2021, September 16). Rest API best practices \u2013 rest endpoint design examples. freeCodeCamp.org. https://www.freecodecamp.org/news/rest-api-best-practices-rest-endpoint-design-examples/</li> <li>Mockel, J.-M. (2022, June 22). Rest api design best practices handbook \u2013 how to build a REST API with JavaScript, node.js, and express.js. freeCodeCamp.org. https://www.freecodecamp.org/news/rest-api-design-best-practices-build-a-rest-api/</li> <li>MozDevNet. (n.d.). M\u00e9thodes de requ\u00eate HTTP - http: MDN. MDN Web Docs. https://developer.mozilla.org/fr/docs/Web/HTTP/Methods </li> <li>Solutions, M.-W. (2017, May 16). 10 best practices for better restful API. Medium. https://medium.com/@mwaysolutions/10-best-practices-for-better-restful-api-cbe81b06f291</li> </ul>"},{"location":"notes_de_cours/api/documentation/","title":"Documentation d'un API avec OpenAPI","text":"<p>La documentation de l'api est une \u00e9tape essentielle qu'il ne faut pas n\u00e9gliger. Vous devez toujours garder \u00e0 l'esprit que votre API peut \u00eatre destin\u00e9 \u00e0 \u00eatre utilis\u00e9 par d'autres utilisateurs et la documentation va indiquer la marche \u00e0 suivre. </p> <p>Votre documentation doit absolument comporter les \u00e9l\u00e9ments suivants : </p> <ul> <li>Une liste de toutes les routes (endpoint) de votre api avec une description de leur utilit\u00e9.</li> <li>Les informations d'authentification s'il y a lieu.</li> <li>Pour chaque route, les param\u00e8tres \u00e0 ajouter \u00e0 la requ\u00eate.</li> <li>Pour chaque route, toutes les r\u00e9ponses possibles et les valeurs retourn\u00e9es (code de status, donn\u00e9es retourn\u00e9es)</li> </ul> <p>Note</p> <p>Nous allons utiliser la norme OpenAPI pour r\u00e9diger la documentation et le module Swagger UI Express pour le rendu visuel.</p>"},{"location":"notes_de_cours/api/documentation/#installation","title":"Installation","text":"<p>Installez le module Swagger UI Express avec npm</p> <pre><code>npm install swagger-ui-express\n</code></pre> <p>Dans le r\u00e9pertoire <code>./src/config/</code> cr\u00e9ez un fichier JSON qui va contenir votre documentation. Pour l'instant copiez le contenu qui suit, on va voir la composition du fichier en d\u00e9tail plus loin.</p> ./src/config/documentation.json<pre><code>{\n    \"openapi\": \"3.1.0\",\n    \"info\":{\n        \"title\": \"D\u00e9mo API\",\n        \"version\": \"1.0.0\"\n    }\n}\n</code></pre> <p>Dans le fichier de d\u00e9marrage de votre application, ajoutez les lignes de codes suivantes (en surlign\u00e9)</p> ./index.js<pre><code>import express, { json } from 'express';\nimport { config } from 'dotenv';\n// Importation du module swagger-ui-express\nimport swaggerUi from 'swagger-ui-express';\n// Le fichier qui contient la documentation au format JSON, ajustez selon votre projet\nimport fs from 'fs';\nconst swaggerDocument = JSON.parse(fs.readFileSync('./src/config/documentation.json', 'utf8'));\n\n// Options le l'interface, changez le titre \"Demo API\" pour le nom de votre projet \nconst swaggerOptions = {\n    customCss: '.swagger-ui .topbar { display: none }',\n    customSiteTitle: \"Demo API\"\n};\n\nconst app = express();\ndotenv.config();\n\n// Middleware\napp.use(express.json());\n\n// Routes\n// La route \u00e0 utiliser pour acc\u00e9der au rendu visuel de la documentation\napp.use('/api/docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument, swaggerOptions));\n\napp.listen(process.env.PORT || 3000, () =&gt; {\n    console.log(`Le serveur tourne sur le port ${process.env.PORT}`);\n});\n</code></pre> <p>Maintenant lancez votre application et acc\u00e9dez \u00e0 la route que vous avez d\u00e9finie (<code>/api/docs</code> si vous avez utilis\u00e9 le code plus haut). Vous devriez avoir ce r\u00e9sultat.</p> <p> </p> R\u00e9sultat de la route /api/docs/"},{"location":"notes_de_cours/api/documentation/#composition-du-fichier-de-documentation","title":"Composition du fichier de documentation","text":"<p>Le fichier JSON sera compos\u00e9 de plusieurs sections, certaines requises et d'autres optionnelles.</p> <p>\u00c0 la premi\u00e8re ligne, ajoutez la cl\u00e9 openapi avec la version d'OpenAPI que vous utilisez. Vous pouvez utiliser la version 3.1.0</p> documentation.json<pre><code>{\n    \"openapi\" : \"3.1.0\",\n    \"info\" : { objet info },\n    \"servers\" : [ objet server ],\n    \"paths\" : {\n        \"route1\" : { \"method\" : objet path }\n    }\n}\n</code></pre>"},{"location":"notes_de_cours/api/documentation/#info","title":"info","text":"<p>L'information g\u00e9n\u00e9rale au sujet de votre api.</p> documentation.json<pre><code>    \"info\" : {\n        \"title\": \"Titre de votre API [REQUIS]\",\n        \"summary\": \"Une courte description de ce que fait votre API\",\n        \"description\": \"Une description plus d\u00e9taill\u00e9 de ce que fait votre API\",\n        \"contact\": {\n            \"name\": \"API Support\",\n            \"url\": \"https://www.example.com/support\",\n            \"email\": \"support@example.com\"\n        },\n        \"version\": \"1.0.1 [REQUIS - Version de votre API]\"\n    },\n</code></pre>"},{"location":"notes_de_cours/api/documentation/#servers","title":"servers","text":"<p>Un tableau d'objets serveurs qui indique o\u00f9 on peut ex\u00e9cuter l'api.</p> documentation.json<pre><code>    \"servers\": [\n        {\n            \"url\": \"http://localhost:3000/\",\n            \"description\": \"Serveur de d\u00e9veloppement\"\n        },\n        {\n            \"url\": \"http://api.profs.ca\",\n            \"description\": \"Serveur en ligne\"\n        }\n    ],\n</code></pre> <p>Manuel</p> <p>https://swagger.io/specification/#server-object</p>"},{"location":"notes_de_cours/api/documentation/#paths","title":"paths","text":"<p>Une liste d'objets path qui d\u00e9taillent les routes de votre api.</p> documentation.json<pre><code>{\n    \"paths\" : {\n        \"route1\" : { objet path },\n        \"route2\" : { objet path },\n    }\n}\n</code></pre>"},{"location":"notes_de_cours/api/documentation/#objet-path","title":"Objet path","text":"<p>C'est avec l'objet path qu'on va d\u00e9tailler les routes. On va avoir une cl\u00e9 par route, m\u00eame si elle est utilis\u00e9e par plus d'une m\u00e9thode http. Par exemple si j'ai une route <code>GET /api/salutations</code> et <code>POST /api/salutations</code> je vais ne faire qu'une entr\u00e9e. Chaque m\u00e9thode va \u00eatre d\u00e9finie plus loin.</p> documentation.json<pre><code>{\n    \"paths\" : {\n        \"/api/salutations/liste\" : {\n            \"get\": {\n                \"description\": \"Retourne la liste de toutes les salutations\",\n                \"summary\": \"Liste des salutations\",\n                \"tags\": [ \"Salutions\" ],\n                \"parameters\": [ { objet parameter } ],\n                \"responses\": {\n                    \"200\": { response object }\n                }\n            },\n            \"post\": {\n                ...\n            }\n        }\n    }\n}\n</code></pre> <p>On ne fera pas l'\u00e9num\u00e9ration de toutes les options pour d\u00e9tailler une route, \u00e0 l'essentiel vous devez avoir</p> <ul> <li>Une description et un tags</li> <li>La liste des param\u00e8tres requis</li> <li>Toutes les r\u00e9ponses possibles detaill\u00e9es</li> </ul> <p>Pour plus d'information je vous invite \u00e0 consulter la documentation</p> <p>Manuel</p> <ul> <li>https://swagger.io/specification/#paths-object</li> <li>https://swagger.io/specification/#parameter-object</li> <li>https://swagger.io/specification/#response-object</li> </ul>"},{"location":"notes_de_cours/api/documentation/#exemple","title":"Exemple","text":"<p>Voici un exemple avec les routes :</p> <ul> <li>GET /api : Retourne un message en HTML</li> <li>GET /api/salutations?langue=fr : Retourne une salutation al\u00e9atoire avec un param\u00e8tre query optionnel</li> <li>POST /api/salutations : Ajout d'une salutation avec param\u00e8tre dans le body.</li> <li>GET /api/salutations/1 : Retourne une salutation selon un id dans la route.</li> </ul> documentation.json<pre><code>{\n    \"openapi\": \"3.1.0\",\n    \"info\":{\n        \"title\": \"D\u00e9mo API\",\n        \"version\": \"1.0.0\"\n    },\n    \"servers\": [\n        {\n            \"url\": \"http://localhost:3000/\",\n            \"description\": \"Serveur de d\u00e9veloppement\"\n        },\n        {\n            \"url\": \"http://api.profs.ca\",\n            \"description\": \"Serveur en ligne\"\n        }\n    ],\n    \"paths\": {\n        \"/api\": {\n            \"get\": {\n                \"summary\": \"Message de bienvenue\",\n                \"tags\": [\"Accueil\"],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Retourne un message de bienvenue\",\n                        \"content\": {\n                            \"text/html\": {\n                                \"example\": \"&lt;h1&gt;Mon premier serveur web sur express !&lt;/h1&gt;\"\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/api/salutations\": {\n            \"get\": {\n                \"summary\": \"R\u00e9cup\u00e9rer une salutation al\u00e9atoire\",\n                \"tags\": [\"Salutations\"],\n                \"description\": \"R\u00e9cup\u00e9rer une salutation al\u00e9atoire en fonction de la langue d'un code de langue\",\n                \"parameters\": [\n                    {\n                        \"in\": \"query\",\n                        \"name\": \"langue\",\n                        \"description\": \"Code souhait\u00e9 de langue de la salutation. Seulement les codes pr\u00e9sent par d\u00e9faut sont \u00e9num\u00e9r\u00e9s, d'autres peuvent \u00eatre pr\u00e9sents.\",\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"enum\": [ \"fr\", \"en\", \"es\", \"de\" ]\n                        },\n                        \"required\": false\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Salutation al\u00e9atoire r\u00e9cup\u00e9r\u00e9e avec succ\u00e8s\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"code_langue\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"fr\"\n                                        },\n                                        \"langue\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Fran\u00e7ais\"\n                                        },\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Bonjour le monde\"\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"404\" : {\n                        \"description\": \"Code de langue non trouv\u00e9\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Erreur, le code de langue [fr] n'existe pas\"\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"post\": {\n                \"summary\": \"Ajouter une salutation\",\n                \"tags\": [\"Salutations\"],\n                \"description\": \"Ajouter une salutation en fournissant un code de langue, la langue et un message\",\n                \"requestBody\": {\n                    \"required\": true,\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"code_langue\": {\n                                        \"type\": \"string\",\n                                        \"example\": \"fr\"\n                                    },\n                                    \"langue\": {\n                                        \"type\": \"string\",\n                                        \"example\": \"Fran\u00e7ais\"\n                                    },\n                                    \"message\": {\n                                        \"type\": \"string\",\n                                        \"example\": \"La nouvelle salutation\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Salutation ajout\u00e9e avec succ\u00e9sses\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Salutation ajout\u00e9e\"\n                                        },\n                                        \"salutation\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"La nouvelle salutation\"\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Erreur de param\u00e8tres manquants\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Erreur, les param\u00e8tres code_langue, langue et message sont obligatoires\"\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"500\" : {\n                        \"description\": \"Erreur serveur\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Echec lors de l'ajout de la salutation.\"\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/api/salutations/{id}\": {\n            \"get\": {\n                \"summary\": \"R\u00e9cup\u00e9rer une salutation\",\n                \"tags\": [\"Salutations\"],\n                \"description\": \"R\u00e9cup\u00e9rer une salutation en fonction de son id\",\n                \"parameters\": [\n                    {\n                        \"in\": \"path\",\n                        \"name\": \"id\",\n                        \"description\": \"Id de la salutation\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"integer\",\n                            \"format\": \"int32\",\n                            \"exemple\" : \"1\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Salutation retrouv\u00e9e avec succes\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"code_langue\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"fr\"\n                                        },\n                                        \"langue\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Fran\u00e7ais\"\n                                        },\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Bonjour le monde\"\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"404\" : {\n                        \"description\": \"Salutation non rencontr\u00e9e\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"object\",\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Erreur, la salutation [id] n'existe pas\"\n                                        }\n                                    }\n                                }   \n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"notes_de_cours/api/documentation/#mediagraphie","title":"Mediagraphie","text":"<ul> <li>OpenAPI specification. Swagger. (n.d.). https://swagger.io/specification/ </li> <li>Swagger-ui-express. npm. (n.d.). https://www.npmjs.com/package/swagger-ui-express </li> </ul>"},{"location":"notes_de_cours/api/introduction/","title":"Introduction","text":""},{"location":"notes_de_cours/api/introduction/#cest-quoi-un-service-web-api","title":"C'est quoi un service web (API)?","text":"<p>L'acronyme API signifie en anglais Application Programming Interface. On peut d\u00e9finir une api comme un interface qui permet d\u2019\u00e9changer de l\u2019informations avec d\u2019autres applications, peut importe le langage de programmation et le syst\u00e8me d\u2019exploitation.</p> <p>Il existe plusieurs types d'architectures d'api. Nous allons apprendre l'architecture REST qui se base sur les standards du web et le protocole HTTP. </p>"},{"location":"notes_de_cours/api/introduction/#court-resume-en-4-minutes","title":"Court r\u00e9sum\u00e9 en 4 minutes","text":""},{"location":"notes_de_cours/api/introduction/#fonctionnement-general","title":"Fonctionnement g\u00e9n\u00e9ral","text":"<p>Notre api va recevoir des requ\u00eates HTTP qui seront trait\u00e9es selon les param\u00eatres envoy\u00e9s et retournera ensuite une r\u00e9ponse \u00e0 la requ\u00eate.</p> <p> </p> Source : https://www.altexsoft.com/blog/rest-api-design/ <p>Une requ\u00eate \u00e0 un api REST va toujours \u00eatre compos\u00e9e de quatre parties essentielles:</p> <ul> <li>Method : Une m\u00e9thode HTTP: GET, POST, PUT, PATCH, DELETE.</li> <li>Endpoint : Une porte d'entr\u00e9e (endpoint), le plus souvent sous la forme d'une url.</li> <li>Headers : Une ent\u00eate \u00e0 la requ\u00eate HTTP qui contient plusieurs informations comme les informations de l'usager et une cl\u00e9 d'api. </li> <li>Body : Un \"corps\" qui peut contenir des informations a envoy\u00e9 \u00e0 l'api.</li> </ul> <p> </p> Source : https://www.apinewbies.com/api-request/"},{"location":"notes_de_cours/api/introduction/#envoyer-une-requete","title":"Envoyer une requ\u00eate","text":"<p>On peut envoyer une requ\u00eate \u00e0 un api depuis n'importe quel navigateur mais nous n'aurons pas de contr\u00f4le sur les informations envoy\u00e9 et on sera limit\u00e9 \u00e0 la m\u00e9thode GET.</p> <p>Il existe plusieurs outils qui nous permettent une utilisation plus pouss\u00e9 des apis, Postman en est un bon exemple. Sinon on peut incorpor\u00e9 le tout dans une application ou page web, la plupart des langages de programmation prennent en charge les requ\u00eates HTTP. </p>"},{"location":"notes_de_cours/api/json/","title":"Le format JSON","text":"<p>JSON (JavaScript Object Notation) est un format cr\u00e9\u00e9 pour faciliter l'\u00e9change de donn\u00e9es entre diff\u00e9rents syst\u00e8mes. Bien que grandement inspir\u00e9 de la notation objet de JavaScript le format JSON est ind\u00e9pendant de tout langage et peut \u00eatre interpr\u00e9ter par la majorit\u00e9 des diff\u00e9rents langage de programmation.</p>"},{"location":"notes_de_cours/api/json/#structure-de-base","title":"Structure de base","text":"<p>Les deux structures suivantes sont utilis\u00e9es pour construire notre JSON : </p>"},{"location":"notes_de_cours/api/json/#lobjet","title":"L'objet","text":"<p>Une suite d'\u00e9l\u00e9ments cl\u00e9/valeurs, s\u00e9rar\u00e9s par une virgule. L'objet sera entour\u00e9 par des accolades. <pre><code>{\n    \"cle1\" : \"valeur1\",\n    \"cle2\" : \"valeur2\"\n}\n</code></pre> </p>"},{"location":"notes_de_cours/api/json/#le-tableau","title":"Le tableau","text":"<p>Une suite d'\u00e9l\u00e9ments ordonn\u00e9s, s\u00e9par\u00e9e par une virgule et entour\u00e9e par des crochets [ ] <pre><code>[\"valeur1\", \"valeur2\"]\n</code></pre> </p> <p>On peut m\u00e9langer les deux structures sans probl\u00e8me (un tableau d'objet, une valeur de l'objet est un tableau, etc.) <pre><code>{\n    \"cle1\" : [\n        \"valeur1\", \n        \"valeur2\"\n    ],\n    \"cle2\" : \"valeur2\"\n}\n</code></pre></p> <p>Il est aussi possible d'avoir un objet ou un tableau vide, qu'on notera respectivement { } et [ ].</p>"},{"location":"notes_de_cours/api/json/#liste-des-valeurs-possibles","title":"Liste des valeurs possibles","text":"<ul> <li>string : du texte entour\u00e9 de guillemets \"</li> <li>number : sans les guillemets, on peut utiliser les d\u00e9cimales avec le point et les exposants avec le caract\u00e8re e.</li> <li>object : comme vu plus haut, liste de cl\u00e9/valeur entour\u00e9es par des accolades</li> <li>array : liste d'items entour\u00e9s de crochet</li> <li>boolean : utilisez true ou false sans guillemets et en minuscule</li> <li>valeur nulle : null sans guillemets et en minuscule</li> </ul> <p>Note sur les dates : Le format date n'\u00e9tant pas pleinenement support\u00e9, on devrait par pr\u00e9caution les stocker en texte.</p>"},{"location":"notes_de_cours/api/json/#valider-un-texte-au-format-json","title":"Valider un texte au format JSON","text":"<p>JSONLint est un petit outils en ligne tr\u00e8s pratique pour valider qu'un texte respecte le format JSON : www.jsonlint.com</p>"},{"location":"notes_de_cours/api/json/#utilisation-en-javascript","title":"Utilisation en JavaScript","text":""},{"location":"notes_de_cours/api/json/#jsonstringify","title":"JSON.stringify()","text":"<p>La m\u00e9thode la plus simple pour envoyer des donn\u00e9es au format JSON est de convertir un objet JavaScript avec la fonction <code>JSON.stringify()</code>.</p>"},{"location":"notes_de_cours/api/json/#jsonparse","title":"JSON.parse()","text":"<p>Les donn\u00e9es qu'on re\u00e7oit au format JSON sont sous forme de texte. Pour les utiliser facilement en JavaScript on va les convertir en objet avec la fonction <code>JSON.parse()</code>.</p> JSON.js<pre><code>// Objet JavaScript \u00e0 convertir en JSON\nconst usager = {prenom: \"Mathieu\", nom: \"Frechette\", age:43, cours:[\"Services Web\", \"Conception de syst\u00e8mes\"]};\n// Convertir l'objet JavaScript en JSON avec JSON.stringify()\nconst jsToJSON = JSON.stringify(usager);\n\nconsole.log('reponseJson: ', jsToJSON); // {\"prenom\":\"Mathieu\",\"nom\":\"Frechette\",\"age\":43,\"cours\":[\"Services Web\",\"Conception de syst\u00e8mes\"]}\n\n// Convertir le JSON en objet JavaScript avec JSON.parse()\nconst objJS = JSON.parse(jsToJSON);\n\nconsole.log('Nom: ', objJS.prenom + ' ' + objJS.nom); // Nom: Mathieu Frechette\n</code></pre>"},{"location":"notes_de_cours/api/json/#sources","title":"Sources","text":"<ul> <li>Toutes les images proviennent du site www.json.org</li> <li>ECMA-404 The JSON Data Interchange Standard.</li> <li>www.json.org</li> <li>Standart de l'ECMA en version PDF</li> </ul>"},{"location":"notes_de_cours/deploiement/postgresql/","title":"API Rest avec PostgreSQL","text":"<p>Il est tr\u00e8s simple de migrer nos API vers une BD PostgreSQL. </p>"},{"location":"notes_de_cours/deploiement/postgresql/#postgresql-et-devilbox","title":"PostgreSQL et Devilbox","text":"<p>Devilbox \u00e0 d\u00e9j\u00e0 une instance de PostgreSQL qui est lanc\u00e9 quand on le d\u00e9marre, pratique si on veut effectuer des tests. Elle est accessible via le port 5432 en localhost.</p> <p>Par d\u00e9faut le nom d'utilisateur est postgres et le mot de passe est vide. Il y a aussi une base de donn\u00e9es appel\u00e9e postgres o\u00f9 vous allez cr\u00e9er vos table. </p> <p>\u00c0 l'aide de votre IDE pr\u00e9f\u00e9r\u00e9 cr\u00e9ez une connexion vers l'instance PostgreSQL. Dans DBeaver, quand vous cr\u00e9er une nouvelle connexion vous devez choisir PostgreSQL au lieu de MariaDB. Vous devrez surement installer des pilotes, juste \u00e0 suivre les indications.</p> <p> </p> Exemple avec DBeaver"},{"location":"notes_de_cours/deploiement/postgresql/#migration-des-donnees-mysql-vers-une-bd-postgresql","title":"Migration des donn\u00e9es MySQL vers une BD PostgreSQL","text":"<p>Le plus simple \u00e0 notre niveau est de refaire un script sql de cr\u00e9ation de tables. Les instructions et les types de donn\u00e9es sont sensiblement les m\u00eames \u00e0 quelques exceptions pr\u00eat. Voici un exemple de cr\u00e9ation de la table pokemon qu'on a utilis\u00e9 \u00e0 l'exercice 04.</p> create_table_pokemon.sql<pre><code>drop table if exists public.pokemon;\nCREATE TABLE public.pokemon (\n    id SERIAL PRIMARY KEY,\n    nom VARCHAR(50),\n    type_primaire VARCHAR(50),\n    type_secondaire VARCHAR(50),\n    pv INTEGER,\n    attaque INTEGER,\n    defense INTEGER\n);\n</code></pre> <p>Dans PosgreSQL il existe un concept de schemas qu'on ne couvrira pas (dans mon exemple public est le nom du schema). Le seul autre changement qu'on peut remarquer ici est au niveau du champ id qui est de type SERIAL, c'est l'\u00e9quivalent du champs auto-increment.  </p> <p>Manuel</p> <ul> <li>Pour plus de d\u00e9tail sur PostgreSQL : https://docs.postgresql.fr/16/ </li> </ul>"},{"location":"notes_de_cours/deploiement/postgresql/#connexion-depuis-un-projet-expressjs","title":"Connexion depuis un projet Express.js","text":"<p>Nous allons conserver la m\u00eame structure de projet qu'on a utilis\u00e9 jusqu'\u00e0 maintenant. Dans le fichier .env ajoutez les entr\u00e9es suivantes : </p> .env<pre><code>PG_USER=\"postgres\"\nPG_HOST=\"localhost\"\nPG_DATABASE=\"postgres\"\nPG_PASSWORD=\"\"\nPG_PORT=5432\n</code></pre> <p>Les valeurs ci-dessus correspondent \u00e0 une connexion \u00e0 l'instance PostgreSQL de Devilbox. </p> <p>Ensuite installer le module PG avec npm.</p> <pre><code>npm i pg\n</code></pre> <p>Maintenant cr\u00e9er un nouveau fichier nomm\u00e9 <code>db_pg.js</code> dans le r\u00e9pertoire <code>./src/config</code> et copiez le code suivant : </p> dp_pg.js<pre><code>import { Pool } from 'pg'\nimport dotenv from 'dotenv';\ndotenv.config();\n\nconst pool = new Pool({\n  user: process.env.PG_USER,\n  host: process.env.PG_HOST,\n  database: process.env.PG_DATABASE,\n  password: process.env.PG_PASSWORD,\n  port: process.env.PG_PORT,\n})\n\nmodule.exports = pool;\n</code></pre> <p>Le fonctionnement est similaire \u00e0 ce qu'on faisait avec MySQL, on cr\u00e9\u00e9 un pool de connexion qui va \u00eatre utilis\u00e9 \u00e0 chaque fois qu'on veut faire une requ\u00eate.</p> <p>La derni\u00e8re chose \u00e0 faire est d'utilis\u00e9 le fichier <code>db_pg.js</code> au lieu de <code>db.js</code> dans vos mod\u00e8les. </p> script.js<pre><code>// Ancienne connexion \u00e0 MySQL\n// const sql = require(\"../config/db\");\n// Nouvelle connexion \u00e0 PostGreSQL\n\nimport sql from \"../config/pg_db.js\";\n</code></pre>"},{"location":"notes_de_cours/deploiement/postgresql/#modification-des-requetes-preparees","title":"Modification des requ\u00e8tes pr\u00e9par\u00e9es","text":"<p>La syntaxe pour passer des param\u00eatres \u00e0 une requ\u00eate pr\u00e9par\u00e9e avec le module PG est un peu diff\u00e9rente, vous allez devoir les modifier. Au lieu d'utiliser le caract\u00e8re ? pour indiquer un param\u00eatre vous devez utiliser le signe de dollar suivi d'un nombre incr\u00e9ment\u00e9 \u00e0 partir de 1.</p> <pre><code>const requete = 'SELECT id, nom, type_primaire, type_secondaire, pv, attaque, defense FROM public.pokemon WHERE type_primaire LIKE $1;';\n// un autre exemple\nconst requete = 'INSERT INTO pokemon (nom, type_primaire, type_secondaire, pv, attaque, defense) VALUES ($1, $2, $3, $4, $5, $6)';\n</code></pre> <p>Vous devez aussi modifier la fa\u00e7on dont vous r\u00e9cup\u00e9rez les r\u00e9sultats. Auparavant quand on lan\u00e7ait la requ\u00eate avec <code>sql.query</code> on recevait un objet resultat qui contenait un tableau de toutes les lignes du r\u00e9sultat de la requ\u00eate. Avec PG vous devez faire <code>resultat.rows</code> pour obtenir les r\u00e9sultats. </p> model.js<pre><code>static trouverUnPokemon(id) {\n        return new Promise((resolve, reject) =&gt; {\n            const requete = 'SELECT id, nom, type_primaire, type_secondaire, pv, attaque, defense FROM pokemon WHERE id = $1';\n            const parametres = [id];\n\n            sql.query(requete, parametres, (erreur, resultat) =&gt; {\n                if (erreur) {\n                    console.log('Erreur sqlState : ' + erreur);\n                    console.log(`Erreur sqlState ${erreur.sqlState} : ${erreur.sqlMessage}`);\n                    reject(erreur);\n                }\n\n                resolve(resultat.rows);\n            });\n        });\n    }\n</code></pre> <p>Et voil\u00e0! Vous \u00eates maintenant pr\u00eat \u00e0 utiliser PostgreSQL</p>"},{"location":"notes_de_cours/deploiement/render/","title":"D\u00e9ploiement sur Render","text":"<p>Render est une plate-forme d'h\u00e9bergement cloud qui offre un moyen transparent et simple de d\u00e9ployer et de g\u00e9rer des sites Web statiques, des applications Web \u00e0 part enti\u00e8re, des API ou des bases de donn\u00e9es PostgreSQL.</p> <p>Voici quelques caract\u00e9ristiques cl\u00e9s :</p> <ul> <li>Interface conviviale : Render fournit une interface simple et intuitive qui simplifie le processus de d\u00e9ploiement d'applications cr\u00e9\u00e9es \u00e0 l'aide de langages de programmation populaires tels que Python et Node.js.</li> <li>Bases de donn\u00e9es int\u00e9gr\u00e9es : Render offre une prise en charge int\u00e9gr\u00e9e des bases de donn\u00e9es PostgreSQL, ce qui facilite la configuration et l'int\u00e9gration de bases de donn\u00e9es dans des applications sans avoir \u00e0 configurer des serveurs de bases de donn\u00e9es s\u00e9par\u00e9s.</li> <li>Flux de travail de d\u00e9ploiement transparent : Render fournit des fonctionnalit\u00e9s telles que des d\u00e9ploiements automatis\u00e9s, des restaurations et des int\u00e9grations avec des services populaires tels que GitHub et GitLab.</li> <li>Domaines personnalis\u00e9s et SSL : Render offre la possibilit\u00e9 de configurer des noms de domaine personnalis\u00e9s pour les sites Web et les applications Web, et comprend des certificats SSL gratuits pour un acc\u00e8s HTTPS s\u00e9curis\u00e9.</li> </ul> <p>Attention</p> <p>Dans le forfait gratuit, on ne peut avoir qu'une base de donn\u00e9es et elle \u00e0 une dur\u00e9e de vie de 90 jours</p>"},{"location":"notes_de_cours/deploiement/render/#creation-dun-compte-sur-render","title":"Cr\u00e9ation d'un compte sur Render","text":"<p>Premi\u00e8re \u00e9tape, cr\u00e9er votre compte sur le site https://render.com/ et s\u00e9lectionnez le plan gratuit. Pour vous faciliter le travail connectez vous avec Github.</p>"},{"location":"notes_de_cours/deploiement/render/#creation-de-la-base-de-donnees","title":"Cr\u00e9ation de la base de donn\u00e9es","text":"<p>Dans le tableau de bord \u00e0 la section PostgreSQL, cliquez sur Create PostgreSQL (Vous pouvez aussi cliquer sur New en haut \u00e0 droite). Ensuite donnez un nom \u00e0 votre base de donn\u00e9es, laissez les autres options par d\u00e9faut, s\u00e9lectionnez le forfait gratuit et cliquez sur Create database. La cr\u00e9ation prendra un certain temps et une fois termin\u00e9e vous aurez acc\u00e8s aux informations de connexions plus bas dans la section Connections: </p> <p> </p> Image 1 - Informations de connexion"},{"location":"notes_de_cours/deploiement/render/#connexion-depuis-dbeaver","title":"Connexion depuis DBeaver","text":"<p>Maintenant cr\u00e9ez-vous une connexions depuis un IDE (J'ai uniquement test\u00e9 avec DBeaver). Copiez la valeur du champs External Database URL et conserver uniquement la section apr\u00e8s l'arobase. Vous avez aussi votre nom d'usager et votre mot de passe.</p> <pre><code>postgres://nomUsager:motDePasse@dpg-cnlkl76d3nmc7383kti0-a.ohio-postgres.render.com/pokemons_api_mcuk\n</code></pre> <p>Quand vous faites votre connexion dans DBeaver, l'url \u00e0 utiliser sera <code>jdbc:postgresql://</code> + la valeur qui suit l'arobase dans ce que vous aviez plus haut (Vous devez s\u00e9lectionner l'option \"Connect by: URL\"): </p> <pre><code>jdbc:postgresql://dpg-cnlkl76d3nmc7383kti0-a.ohio-postgres.render.com/pokemons_api_mcuk\n</code></pre> <p></p>"},{"location":"notes_de_cours/deploiement/render/#creation-du-service-web","title":"Cr\u00e9ation du service web","text":"<p>Render utilise Github pour le d\u00e9ploiement des services web. Assurez-vous que votre projet est dans un d\u00e9p\u00f4t Github et qu'il est \u00e0 jour.</p> <p>Sur le site de Render, cliquez sur le bouton New en haut \u00e0 gauche et s\u00e9lectionnez Web Service. S\u00e9lectionnez ensuite Build and deploy from a Git repository. Dans la section Connect a repository s\u00e9lectionnez le d\u00e9p\u00f4t Github de votre projet. Vous pouvez aussi plus bas s\u00e9lectionner n'importe quel d\u00e9p\u00f4t public. Cliquez ensuite sur Connect.</p> <p>\u00c0 l'\u00e9cran suivant, vous pouvez laisser la plupart des options par d\u00e9faut.</p> <ul> <li>Ajustez la valeur de Start command pour le nom du fichier de \"d\u00e9marrage\" de votre api.</li> <li>S\u00e9lectionnez le plan gratuit</li> <li>Ensuite ajoutez les variables d'environnement qui sont dans votre fichier et qui correspondent aux informations de la connexion avec PostgreSQL. Pour la valeur de PG_HOST utilisez la valeur qui vous avez pour Hostname dans l'\u00e9cran des informations de connexions (image 1).</li> </ul> <p> </p> Image 2 - Variable d'environnement <p>Cliquez ensuite sur Deploy et apr\u00e8s un petit moment votre api sera en ligne. </p> <p> </p> Image 3 - Le d\u00e9ploiement est termin\u00e9 <p>Vous avez en mauve dans le haut de la page l'url de votre api. Utilisez cette url suivi de la route pour acc\u00e9der \u00e0 votre api. </p> <p>Exemple</p> <p>https://demo-render-6ez9.onrender.com/api/pokemons/liste?page=1&amp;type=Grass</p>"},{"location":"notes_de_cours/deploiement/render/#modifier-le-service-web","title":"Modifier le service web","text":"<p>Par d\u00e9faut le d\u00e9ploiement est configur\u00e9 sur le mode automatique, ce qui veut dire que d\u00e8s que vous faites un push de votre projet, Render va aussi red\u00e9ployer les modifications. </p> <p>Attention</p> <p>C'est normal d'avoir un long d\u00e9lais apr\u00e8s un moment d'inactivit\u00e9, c'est un mauvais c\u00f4t\u00e9 du plan gratuit.</p>"},{"location":"notes_de_cours/deploiement/render/#references-et-tutoriels","title":"R\u00e9f\u00e9rences et tutoriels","text":"<ul> <li>https://docs.render.com/deploys</li> <li>https://docs.render.com/deploy-node-express-app</li> <li>https://www.makeuseof.com/deploy-expressjs-rest-api-on-render/</li> <li>https://blog.logrocket.com/crud-rest-api-node-js-express-postgresql/</li> </ul>"},{"location":"notes_de_cours/frontend/fetch/","title":"Fetch API sous Javascript","text":"<p>Fetch nous offre une interface JavaScript qui nous permet de faire des requ\u00e8tes http et d'en r\u00e9cup\u00e9rer les r\u00e9ponses. C'est inclus nativement dans Javascript, aucune librairie n'est \u00e0 installer. Fetch fonctionne de fa\u00e7on asynchrone et utilise les promesses.</p> <p>Manuel</p> <p>https://developer.mozilla.org/fr/docs/Web/API/Fetch_API</p>"},{"location":"notes_de_cours/frontend/fetch/#syntaxe","title":"Syntaxe","text":"<pre><code>// Envoi de la requ\u00e8te et r\u00e9cup\u00e9ration de la r\u00e9ponse\nlet reponse = await fetch(url, options);\n// Lecture de la r\u00e9ponse (ici en JSON)\nlet resultat = await reponse.json();\n</code></pre> <p>La m\u00eame chose sans await</p> <p><pre><code>fetch(url, options)\n    .then((reponse) =&gt; reponse.json())\n    .then((resultat) =&gt; /* Le code \u00e0 effectuer */);\n</code></pre> Dans le deuxi\u00e8me exemple. la fonction json() retourne aussi une promesse. Donc le second then sert \u00e0 r\u00e9cup\u00e9rer le r\u00e9sultat.</p>"},{"location":"notes_de_cours/frontend/fetch/#recuperer-la-reponse","title":"R\u00e9cup\u00e9rer la r\u00e9ponse","text":"<p>Pour r\u00e9cup\u00e9rer le code de statut de la r\u00e9ponse, on peut utiliser la propri\u00e9t\u00e9 status. Si on veut uniquement v\u00e9rifier que la requ\u00e8te retourne un r\u00e9sultat positif (un code entre 200 et 299) la propri\u00e9t\u00e9 ok nous retournera un boolean.</p> <pre><code>let reponse = await fetch(url);\n\nif (response.ok) { // Si le code de statut est entre 200 et 299\n  // Code \u00e0 effectuer lors d'un succ\u00e8s\n  let resultat = await reponse.json();\n  console.log(\"Resultat : \", resultat);\n} else {\n  console.log(\"Erreur code HTTP : \", response.status);\n}\n</code></pre> <p>Maintenant pour r\u00e9cup\u00e9rer le contenu de la r\u00e9ponse, on doit utiliser une seconde fonction \u00e0 la r\u00e9ponse qui va la convertir dans le type requis. Puisqu'on fonctionne uniquement avec du JSON, on va utiliser la fonction json(). Notez que cette fonction retourne une promesse qui doit \u00eatre trait\u00e9 ad\u00e9quatement. </p> script.js<pre><code>function recupererPokemon() {\n    const pokemon_id = document.getElementById('pokemon-id').value;\n\n    fetch(`https://demo-render-6ez9.onrender.com/api/pokemons/${pokemon_id}`)\n        // Envoi de la requ\u00e8te et r\u00e9cup\u00e9ration de la r\u00e9ponse    \n        .then(response =&gt; response.json())\n        // Traitement de la r\u00e9ponse\n        .then(data =&gt; {\n            console.log(data);\n            document.getElementById('pokemon-name').innerText = data.nom;\n        });\n}\n</code></pre>"},{"location":"notes_de_cours/frontend/fetch/#modifier-les-informations-de-lentete","title":"Modifier les informations de l'ent\u00eate","text":"<p>Dans le param\u00eatre options de fetch, on peut envoyer un objet Javascript qui contient un ensemble de propri\u00e9t\u00e9s. Pour ajouter des informations dans le headers, utilisez la propri\u00e9t\u00e9 headers avec un objet qui contient les valeurs.</p> <p>Par exemple pour envoyer une cl\u00e9 api comme on le fait \u00e0 l'exercice 5 :  script.js<pre><code>let response = fetch(url, {\n  headers: {\n    Authorization: 'cle_api dzIdZzvrPmokuWqkjbcN'\n  }\n});\n</code></pre></p>"},{"location":"notes_de_cours/frontend/fetch/#envoyer-des-donnees-dans-le-corps-de-la-requete","title":"Envoyer des donn\u00e9es dans le corps de la requ\u00eate","text":"<p>Encore avec le param\u00eatre options, on peut d\u00e9finir la m\u00e9thode http \u00e0 utiliser et le body. Pour envoyer des donn\u00e9es en JSON, il faut sp\u00e9cifier dans le header le Content-Type et utiliser JSON.stringify pour convertir un objet JavaScript en JSON.</p> <pre><code>let pokemon = {\n    nom:\"Mathieu\",\n    type_primaire:\"Professeur\",\n    type_secondaire:\"-\",\n    pv:10,\n    attaque:10,\n    defense:10\n};\n\nlet reponse = await fetch('http://localhost:3000/api/pokemons', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json;charset=utf-8'\n  },\n  body: JSON.stringify(pokemon)\n});\n\nlet resultat = await reponse.json();\nconsole.log(resultat)\n</code></pre>"},{"location":"notes_de_cours/frontend/fetch/#references","title":"R\u00e9f\u00e9rences","text":"<ul> <li>https://developer.mozilla.org/fr/docs/Web/API/Fetch_API</li> <li>https://javascript.info/fetch</li> </ul>"},{"location":"notes_de_cours/frontend/toolpad/","title":"Toolpad Studio","text":"<p>Pr\u00e9sentation </p> <p>Toolpad Studio est un g\u00e9n\u00e9rateur d'outils interne auto-h\u00e9berg\u00e9 et low-code. Bien que toujours en d\u00e9veloppement, il est open source et aliment\u00e9 par les composants de Material UI. Toolpad Studio est con\u00e7u pour tout d\u00e9veloppeur souhaitant cr\u00e9er des applications internes plus rapidement. Faites glisser et d\u00e9posez les composants d'interface utilisateur pr\u00e9d\u00e9finis, connectez vos sources de donn\u00e9es, publiez votre application et vous avez termin\u00e9\u00a0! </p> <p>Manuel</p> <p>https://mui.com/toolpad/studio/getting-started/</p> <p>Au niveau du fonctionnement, on cr\u00e9e un projet avec <code>npx</code>. Ensuite en d\u00e9marrant ce projet nous avons acc\u00e8s \u00e0 un interface graphique d\u00e9j\u00e0 programm\u00e9, un \u00e9diteur, qui nous permet de cr\u00e9er notre projet en s\u00e9lectionnant les composants qu'on veut utiliser. Une fois le projet termin\u00e9, on peut le d\u00e9ployer sur un serveur externe comme une application Node traditionnelle.</p>"},{"location":"notes_de_cours/frontend/toolpad/#installation","title":"Installation","text":"<p>Pour cr\u00e9er un nouveau projet Toolpad Studio, utilisez la commande </p> <pre><code>npx create-toolpad-app@latest my-toolpad-app\n</code></pre> <p>La commande suivante va cr\u00e9er un dossier nomm\u00e9 my-toolpad-app avec les fichiers pour ex\u00e9cut\u00e9 Toolpad Studio. </p> <p>Ensuite pour lancer l'application en mode d\u00e9veloppement, lancer la commande suivante dans le r\u00e9pertoire du projet:</p> <pre><code>npm run dev\n</code></pre>"},{"location":"notes_de_cours/frontend/toolpad/#construire-notre-premiere-application","title":"Construire notre premi\u00e8re application","text":"<p>Cette exercice est directement inspir\u00e9 de cette d\u00e9monstration : https://mui.com/toolpad/studio/getting-started/first-app/</p>"},{"location":"notes_de_cours/frontend/toolpad/#creer-une-nouvelle-application","title":"Cr\u00e9er une nouvelle application","text":"<p>Ex\u00e9cutez la commande suivante. </p> <pre><code>npx create-toolpad-app test-toolpad-app\n</code></pre> <p>Lancez le serveur de d\u00e9veloppement</p> <pre><code>cd test-toolpad-app\nnpm run dev\n</code></pre> <p>Toolpad studio devrait s'ouvrir automatiquement dans une fen\u00eatre de votre navigateur. Vous pouvez aussi y acc\u00e9der \u00e0 l'adresse http://localhost:3000</p>"},{"location":"notes_de_cours/frontend/toolpad/#mise-en-place-de-linterface-graphique","title":"Mise en place de l'interface graphique","text":"<p>Dans la section Component library, s\u00e9lectionnez un Data Grid et glissez le dans la section centrale. Faites de m\u00eame avec une Image. Votre interface devrait ressembler \u00e0 \u00e7a: </p> <p> </p>"},{"location":"notes_de_cours/frontend/toolpad/#recuperer-les-donnees","title":"R\u00e9cup\u00e9rer les donn\u00e9es","text":"<p>Dans la section Queries de l'explorateur, cliquez sur le + et s\u00e9lectionnez HTTP REST API. Nous allons r\u00e9cup\u00e9rer une liste de race de chiens pour cet exemple. Utilisez l'url suivante :  <pre><code>https://dog.ceo/api/breeds/list/all\n</code></pre></p> <p>Cliquez ensuite sur Run dans le bas \u00e0 droite pour lancer la requ\u00eate et inspecter les r\u00e9sultats.</p> <p> </p> <p>Dans l'onglet Transform on peut modifier le r\u00e9sultat en inscrivant une expression JavaScript qui retourne un r\u00e9sultat. Cliquez sur l'option Transform response pour activer cette option. Dans notre exemple nous voulons conserver uniquement les \u00e9l\u00e9ments de la r\u00e9ponse qui sont dans l'attribut message sous forme de tableau. Inscrivez le code suivant : </p> <p><pre><code>return Object.entries(data.message).map(entry =&gt; { \n  return {\n    race:entry[0],\n    sousRace:entry[1]\n  };\n});\n</code></pre> Vous pouvez ensuite cliquer sur Run \u00e0 nouveau pour voir les changements.</p> <p> </p> <p>Finalement cliquez sur Save pour enregistrer la requ\u00eate. Renommez l\u00e0 ensuite pour <code>dogQuery</code>.</p>"},{"location":"notes_de_cours/frontend/toolpad/#lier-les-donnees-a-linterface","title":"Lier les donn\u00e9es \u00e0 l'interface","text":"<p>La prochaine \u00e9tape est de lier les donn\u00e9es aux composantes. </p> <ul> <li>Cliquez sur le Data grid </li> <li>Dans l'inspecteur \u00e0 gauche trouvez la propri\u00e9t\u00e9 rows et cliquez sur l'icone Bind \"rows\" \u00e0 sa droite pour ouvrir l'\u00e9diteur de liaisons.</li> </ul> <p>Sur la gauche, vous verrez une liste de tous les \u00e9tats pouvant \u00eatre li\u00e9s dans la page et sur la droite, un \u00e9diteur de code qui accepte n'importe quelle expression JavaScript.</p> <p>Utilisez la requ\u00eate que vous venez d'enregistrer, <code>dogQuery</code>. Dans l'\u00e9diteur de code entrez la ligne suivante : </p> <pre><code>dogQuery.data\n</code></pre> <p>dogQuery est le nom de la requ\u00eate et data repr\u00e9sente le r\u00e9sultat.</p> <p>Cliquez sur Update binding et votre Data grid devrait se remplir avec le r\u00e9sultat de la requ\u00eate.</p>"},{"location":"notes_de_cours/frontend/toolpad/#ajouter-de-linteractivite-a-la-requete","title":"Ajouter de l'int\u00e9ractivit\u00e9 \u00e0 la requ\u00eate.","text":"<p>On va maintenant ajouter de l'int\u00e9ractivit\u00e9 \u00e0 notre application en cr\u00e9ant une seconde requ\u00eate qui va r\u00e9agir \u00e0 une s\u00e9lection de la grille.</p> <ul> <li>Cr\u00e9ez une autre requ\u00eate de type REST API et ajoutez un param\u00e8tre <code>breed</code> dans la section Parameters.</li> <li>Cliquez sur le bouton Bind du param\u00e8tre et ajoutez le code suivant dans l'\u00e9diteur : </li> </ul> script.js<pre><code>dataGrid.selection?.['race'] ?? 'akita'\n</code></pre> <p>Le param\u00e8tre va prendre la valeur de la premi\u00e8re colonne s\u00e9lectionn\u00e9e de la grille ou \"Akita\" si aucune ligne n'est s\u00e9lectionn\u00e9e.</p> <p>Dans l'url, cliquez sur le bouton Bind \"url\" et entrez le code suivant : </p> script.js<pre><code>`https://dog.ceo/api/breed/${parameters.breed}/images/random`\n</code></pre> <p>parameters permet d'acc\u00e9der \u00e0 la liste des param\u00e8tres et breed \u00e0 la valeur de notre param\u00e8tre du m\u00eame nom.</p> <ul> <li>Renommez la requ\u00e8te <code>imageQuery</code>.</li> <li>Dans l'\u00e9diteur, s\u00e9lectionnez votre image et dans l'inspecteur cliquez sur le bouton Bind \u00e0 la droite de src.</li> <li>Inscrivez le code suivant et cliquez sur Update binding</li> </ul> script.js<pre><code>imageQuery.data.message\n</code></pre>"},{"location":"notes_de_cours/frontend/toolpad/#previsualiser-lapplication","title":"Pr\u00e9visualiser l'application","text":"<p>Cliquez sur le bouton Preview pour afficher une visualisation de votre application.</p> <p> </p> Version finale"},{"location":"notes_de_cours/node/express/","title":"Express.js","text":"<p>Express.js est un framework pour construire des applications web en Node.js. C'est de fait le framework standard pour le d\u00e9veloppement de serveur web en Node.js. </p> <p>Documentation officielle: </p> <p>Manuel</p> <p>Express JS </p> <p>Pour installer Express :</p> console<pre><code>npm install express\n</code></pre>"},{"location":"notes_de_cours/node/express/#premier-serveur-web-avec-express","title":"Premier serveur web avec Express","text":"index.js<pre><code>// Importer le module express\nimport express from 'express';\n\n// Cr\u00e9er une application express\nconst app = express();\nconst PORT = 3000;\n\napp.get('/', (req, res) =&gt; {\n    res.send(\"&lt;h1&gt;Mon premier serveur web sur express !&lt;/h1&gt;\");\n});\n\napp.listen(PORT, () =&gt; {\n    console.log(`Serveur d\u00e9marr\u00e9 sur le port ${PORT}`);\n});\n</code></pre>"},{"location":"notes_de_cours/node/express/#les-objets-req-et-res","title":"Les objets req et res","text":"<p>L\u2019objet req repr\u00e9sente la requ\u00eate HTTP transmise au serveur. Cet objet permet, entre autres :  </p> <ul> <li>D\u2019acc\u00e9der aux param\u00e8tres transmis dans l\u2019URL  </li> <li>D\u2019acc\u00e9der aux donn\u00e9es transmise dans le corps de la requ\u00eate (body)  </li> <li>De manipuler les cookies   </li> </ul> <p>L\u2019objet res repr\u00e9sente la r\u00e9ponse HTTP transmise du serveur au client. Cet objet permet, entre autres : </p> <ul> <li>Retourner des informations au clien</li> <li>Modifier le code de statut de la requ\u00eate</li> <li>Rediriger une demande</li> <li>G\u00e9n\u00e9rer un mod\u00e8le de vue</li> </ul> <p>Manuel</p> <ul> <li>L'objet Request (req)</li> <li>L'objet Response (res)</li> </ul>"},{"location":"notes_de_cours/node/express/#routes-et-methodes-http","title":"Routes et m\u00e9thodes HTTP","text":"<p>Dans l\u2019exemple pr\u00e9c\u00e9dent, la requ\u00eate utilise la m\u00e9thode GET, qui r\u00e9cup\u00e8rent les informations directement dans l\u2019URL. </p> <p>D\u2019autres m\u00e9thodes sont aussi d\u00e9finies dans le protocole HTTP. Les plus communes sont : GET, POST, PUT, DELETE.   </p> <p>Avec Express.js, il est possible d\u2019utiliser la m\u00eame URL avec diff\u00e9rentes m\u00e9thodes. Cela se fait en modifiant la m\u00e9thode aupr\u00e8s de la route :</p> M\u00e9thode http Code GET router.get(path, function(req, res, next) { \u2026 }) POST router.post(path, function(req, res, next) { \u2026 }) PUT router.put(path, function(req, res, next) { \u2026 }) DELETE router.delete(path, function(req, res, next) { \u2026 }) <p>Manuel</p> <p>MDN HTTP Methods </p>"},{"location":"notes_de_cours/node/express_mysql/","title":"MySQL avec Express.js","text":""},{"location":"notes_de_cours/node/express_mysql/#installation","title":"Installation","text":"<p>Pour nous permettre d'interragir avec une base de donn\u00e9es MySQL nous allons installer un nouveau module avec npm.</p> <pre><code>npm install mysql\n</code></pre> <p>Manuel</p> <p>Documentation du module mysql</p>"},{"location":"notes_de_cours/node/express_mysql/#creation-du-pool-de-connexions","title":"Cr\u00e9ation du pool de connexions","text":"<p>Ensuite nous allons cr\u00e9er le fichier <code>./src/config/db.js</code> o\u00f9 nous allons d\u00e9clarer un pool de connexion \u00e0 notre BD. Notez aussi que j'utilise le module dotenv pour enregistrer les informations de connexion \u00e0 la base de donn\u00e9es</p> <p>Note</p> <p>On aurait aussi pu cr\u00e9er une connexion au lieu d'un pool, mais ce dernier est mieux adapt\u00e9 pour g\u00e9rer de multiples utilisateurs. Pour plus de d\u00e9tail, cet article (anglais) r\u00e9sume bien la situation : Why is Connection Pooling better than Single Connection</p> .env<pre><code>MYSQL_HOST=\"localhost\"\nMYSQL_USER=\"root\"\nMYSQL_PASSWORD=\"**********\"\nMYSQL_DATABASE=\"**********\"\nMYSQL_CONNECTION_LIMIT = 10\n</code></pre> .src/config/db.js<pre><code>import mysql from \"mysql\";\nimport dotenv from \"dotenv\";\ndotenv.config();\n\nconst pool = mysql.createPool({\n    connectionLimit: process.env.MYSQL_CONNECTION_LIMIT,\n    host: process.env.MYSQL_HOST,\n    user: process.env.MYSQL_USER,\n    password: process.env.MYSQL_PASSWORD,\n    database: process.env.MYSQL_DATABASE\n});\n\nexport default pool;\n</code></pre>"},{"location":"notes_de_cours/node/express_mysql/#utilisation","title":"Utilisation","text":"<p>Maintenant pour lancer des requ\u00eates \u00e0 notre base de donn\u00e9es MySQL il suffit d'importer le module db qu'on vient de cr\u00e9er et d'utiliser la fonction <code>query()</code></p> script.js<pre><code>// \u00c0 ajuster selon votre structure\nimport db from '../config/db.js';\n\n...\n\nconst requete = `SELECT nom, prenom FROM professeurs WHERE id = ?`;\n// Les param\u00e8tres doivent toujours \u00eatre pass\u00e9s sous forme de tableau, \n// m\u00eame quand il n'y en a qu'un.\nconst params = [id]\n\ndb.query(requete, params, (erreur, resultat) =&gt; {\n    // fonction \u00e0 ex\u00e9cuter une fois la requ\u00eate ex\u00e9cut\u00e9e\n    // erreur : Si une erreur SQL est survenur, objet contentant des informations sur celle-ci\n    // resultat : Le r\u00e9sultat de la requ\u00e8te sous forme d'un tableau d'objets.\n});\n</code></pre> <p>Attention l'objet resultat est toujours un tableau d'objets, m\u00eame s'il n'y a qu'une ligne de r\u00e9sultat. Si on veut acc\u00e9der \u00e0 la valeur d'une colonne de la premi\u00e8re ligne de r\u00e9sultat par exemple on peut faire <code>resultat[0].nomColonneDansLaRequ\u00eate</code>. Dans l'exemple plus haut <code>resultat[0].prenom</code> me retournerait le pr\u00e9nom du professeur de la premi\u00e8re ligne de r\u00e9sultat.</p> <p>Dans l'objet erreur vous pouvez r\u00e9cup\u00e9rer des informations sur l'erreur comme le code d'erreur SQL (erreur.sqlState) et un message explicatif (erreur.sqlMessage).</p> script.js<pre><code>console.log(`Erreur SQL (${erreur.sqlState}) : ${erreur.sqlMessage}`);\n</code></pre> <p>On va aussi englober notre code dans une promesse (Promise). Pour plus de d\u00e9tail sur les promesses, voir la page sur l'asynchronisme.</p>"},{"location":"notes_de_cours/node/express_mysql/#exemple","title":"Exemple","text":"<p>Voici un exemple complet d'une requ\u00eate SELECT avec le mod\u00e8le, la route et le controleur.</p> RouteControlleurMod\u00e8le professeurs.route.js<pre><code>// \u00c0 ajuster selon la structure\nimport express from 'express';\nimport { trouverUnProfesseur } from '../controllers/professeurs.controller.js';\n\nconst router = express.Router();\n\nrouter.get('/:id', trouverUnProfesseur);\n\nexport default router;\n</code></pre> professeurs.controller.js<pre><code>// \u00c0 ajuster selon la structure\nimport professeursModel from \"../models/professeurs.model.js\";\n\nconst trouverUnProfesseur = async (req, res) =&gt; {\n    // Teste si le param\u00e8tre id est pr\u00e9sent et valide\n    if(!req.params.id || parseInt(req.params.id) &lt;= 0){\n        res.status(400);\n        res.send({\n            message: \"L'id du professeur est obligatoire et doit \u00eatre sup\u00e9rieur \u00e0 0\"\n        });\n        return;\n    }\n\n    // Appel \u00e0 la fonction getProfesseur dans le mod\u00e8le\n    await professeursModel.getProfesseur(req.params.id)\n    // Si c'est un succ\u00e8s\n    .then((professeur) =&gt; {\n        // S'il n'y a aucun r\u00e9sultat, on retourne un message d'erreur avec le code 404\n        if (!professeur[0]) {\n            res.status(404);\n            res.send({\n                message: `Professeur introuvable avec l'id ${req.params.id}`\n            });\n            return;\n        }\n        // Sinon on retourne le premier objet du tableau de r\u00e9sultat car on ne devrait avoir qu'un professeur par id\n        res.send(professeur[0]);\n    })\n    // S'il y a eu une erreur au niveau de la requ\u00eate, on retourne un erreur 500 car c'est du serveur que provient l'erreur.\n    .catch((erreur) =&gt; {\n        console.log('Erreur : ', erreur);\n        res.status(500)\n        res.send({\n            message: \"Erreur lors de la r\u00e9cup\u00e9ration du professeur avec l'id \" + req.params.id\n        });\n    });\n};\n\nexport {\n    trouverUnProfesseur\n}\n</code></pre> professeurs.model.js<pre><code>// \u00c0 ajuster selon la structure\nimport db from '../config/db.js';\n\nconst getProfesseur = (id) =&gt; {\n    return new Promise((resolve, reject) =&gt; {\n\n        const requete = `SELECT nom, prenom FROM professeurs WHERE id = ?`;\n        const params = [id]\n\n        db.query(requete, params, (erreur, resultat) =&gt; {\n            if (erreur) {\n                console.log(`Erreur sqlState ${erreur.sqlState} : ${erreur.sqlMessage}`);\n                // S'il y a une erreur, je la retourne avec reject()\n                reject(erreur);\n            }\n            // Sinon je retourne le r\u00e9sultat sans faire de validation, c'est possible que le r\u00e9sultat soit vide\n            resolve(resultat);\n        });\n    });\n};\n\nexport default {\n    getProfesseur\n}\n</code></pre>"},{"location":"notes_de_cours/node/express_mysql/#references-et-autres-exemples","title":"R\u00e9f\u00e9rences et autres exemples","text":"<ul> <li>Complete Guide to Build a RESTful API with Node.js and Express</li> <li>Build Node.js Rest APIs with Express &amp; MySQL</li> </ul>"},{"location":"notes_de_cours/node/introduction/","title":"Introduction \u00e0 Node.js","text":"<p>Javascript est un langage de programmation qui est interpret\u00e9 par le navigateur dans lequel il est ex\u00e9cut\u00e9. Avec Node.js on s'affranchit de cette d\u00e9pendance au navigateur en pouvant lancer du code JavaScript directement depuis notre machine. On peut donc programmer notre logique c\u00f4t\u00e9 serveur (backend) directement en JavaScript. Pour le dire autrement, Node.js nous fournit un environnement d'ex\u00e9cution (runtime environment) Javascript sans aucun lien avec les navigateurs.</p>"},{"location":"notes_de_cours/node/introduction/#installation-de-node","title":"Installation de Node","text":"<ul> <li>T\u00e9l\u00e9chargement de Node.js</li> </ul>"},{"location":"notes_de_cours/node/introduction/#executer-du-code-javascript-sur-un-serveur","title":"Ex\u00e9cuter du code JavaScript sur un serveur","text":"<ul> <li>Cr\u00e9ez le fichier hello.js et copiez le code suivant:  </li> </ul> hello.js<pre><code>console.log(\n    'J\u2019\u00e9cris directement dans la console! Je peux faire du code qui ne s\u2019ex\u00e9cute que sur le serveur'\n);\n\nvar fruits = ['pomme', 'orange', 'banane'];\n\nfruits.forEach((fruit, index) =&gt; {\n    console.log(`${index + 1} : ${fruit}`);  \n});\n</code></pre> <ul> <li>Lancez le fichier avec la commande <code>node hello.js</code></li> </ul>"},{"location":"notes_de_cours/node/introduction/#references","title":"R\u00e9f\u00e9rences","text":"<ul> <li>Introduction \u00e0 Node.js</li> <li>Documentation officielle node.js</li> </ul>"},{"location":"notes_de_cours/node/javascript_promise/","title":"JavaScript asynchrone","text":"<p>Asynchrone\u00a0: fait r\u00e9f\u00e9rence \u00e0 un environnement de communication o\u00f9 chaque partie re\u00e7oit et traite les messages lorsque c'est possible ou plus pratique, au lieu de le faire au m\u00eame moment.  </p>"},{"location":"notes_de_cours/node/javascript_promise/#javascript-asynchrone_1","title":"JavaScript asynchrone","text":"<p>De nombreuses fonctionnalit\u00e9s des API Web utilisent d\u00e9sormais du code asynchrone pour s'ex\u00e9cuter, en particulier celles qui acc\u00e8dent \u00e0 un type de ressource ou le r\u00e9cup\u00e8rent \u00e0 partir d'un p\u00e9riph\u00e9rique externe, par exemple en r\u00e9cup\u00e9rant un fichier sur le r\u00e9seau, en acc\u00e9dant \u00e0 une base de donn\u00e9es et en renvoyant des donn\u00e9es, en acc\u00e9dant \u00e0 un flux vid\u00e9o \u00e0 partir d'une webcam ou en diffusant l'affichage vers un casque VR.  </p> <p>Manuel</p> <p>Concepts de l'asynchrone en JavaScript Documentation MDN pour le JavaScript asynchrone </p>"},{"location":"notes_de_cours/node/javascript_promise/#fonctions-de-rappel-asynchrones","title":"Fonctions de rappel asynchrones","text":"<p>Les\u00a0callbacks\u00a0asynchrones ou fonctions de rappels asynchrones sont des fonctions qui sont pass\u00e9es comme arguments lors de l'appel d'une fonction qui commencera \u00e0 ex\u00e9cuter du code en arri\u00e8re-plan. Lorsque le code d'arri\u00e8re-plan a fini de s'ex\u00e9cuter, il appelle la fonction de rappel pour vous faire savoir que le travail est termin\u00e9, ou pour vous faire savoir que quelque chose d'int\u00e9ressant s'est produit. L'utilisation des\u00a0callbacks\u00a0est un peu d\u00e9mod\u00e9e aujourd'hui, mais vous les verrez encore dans un certain nombre d'API plus anciennes encore couramment utilis\u00e9es.  </p> <p>Manuel</p> <p>Introduction \u00e0 l'asynchrone en JavaScript </p>"},{"location":"notes_de_cours/node/javascript_promise/#promesses-promises","title":"Promesses (Promises)","text":"<p>Les promesses sont le nouveau style de code asynchrone que vous verrez utilis\u00e9 dans les API Web modernes.  </p> <p>L'objet Promise (pour \u00ab promesse \u00bb) est utilis\u00e9 pour r\u00e9aliser des traitements de fa\u00e7on asynchrone. Une promesse repr\u00e9sente une valeur qui peut \u00eatre disponible maintenant, dans le futur voire jamais.  </p> <p>Une Promise est dans un de ces \u00e9tats :   </p> <ul> <li>pending (en attente) : \u00e9tat initial, la promesse n'est ni remplie, ni rompue ;  </li> <li>fulfilled (tenue) : l'op\u00e9ration a r\u00e9ussi ;  </li> <li>rejected (rompue) : l'op\u00e9ration a \u00e9chou\u00e9 ;  </li> <li>settled (acquitt\u00e9e) : la promesse est tenue ou rompue mais elle n'est plus en attente.  </li> </ul> <p>Une promesse en attente peut \u00eatre tenue avec une valeur ou rompue avec une raison (erreur). Quand on arrive \u00e0 l'une des deux situations, les gestionnaires associ\u00e9s lors de l'appel de la m\u00e9thode then sont alors appel\u00e9s.</p> <p></p>"},{"location":"notes_de_cours/node/javascript_promise/#gerer-les-operations-asynchrones-avec-elegance-grace-aux-promesses","title":"G\u00e9rer les op\u00e9rations asynchrones avec \u00e9l\u00e9gance gr\u00e2ce aux promesses","text":"<p>Essentiellement, une promesse est un objet qui repr\u00e9sente un \u00e9tat interm\u00e9diaire d'une op\u00e9ration - en fait, c'est une promesse qu'un r\u00e9sultat d'une certaine nature sera retourn\u00e9 \u00e0 un moment donn\u00e9 dans le futur. Il n'y a aucune garantie du moment exact o\u00f9 l'op\u00e9ration se terminera et o\u00f9 le r\u00e9sultat sera renvoy\u00e9, mais il est une garantie que lorsque le r\u00e9sultat est disponible, ou que la promesse \u00e9choue, le code que vous fournissez sera ex\u00e9cut\u00e9 afin de faire autre chose avec un r\u00e9sultat r\u00e9ussi, ou de g\u00e9rer gracieusement un cas d'\u00e9chec.  </p> <p>L'une des utilisations les plus courantes des promesses concerne les API web qui renvoient une promesse.  </p>"},{"location":"notes_de_cours/node/javascript_promise/#le-probleme-des-fonctions-de-rappel","title":"Le probl\u00e8me des fonctions de rappel","text":"<p>Code d\u00e9sordonn\u00e9 et difficile \u00e0 lire :  </p> callback.ts<pre><code>choisirIngredients(function(ingredients) {\n    placerLaCommande(ingredients, function(commande) {\n        ramasserLaCommande(commande, function(pizza) {\n            mangerLaPizza(pizza);\n        }, gererErreur);\n    }, gererErreur);\n}, gererErreur);\n</code></pre> <p>Am\u00e9lioration avec les promesses :  </p> promise.ts<pre><code>choisirIngredients()\n    .then(function(ingredients) {\n        placerLaCommande(ingredients);\n    })\n    .then(function(commande) {\n        ramasserLaCommande(commande);\n    })\n    .then(function(pizza) {\n        mangerLaPizza(pizza);\n    })\n    .catch(gererErreur);\n</code></pre>"},{"location":"notes_de_cours/node/javascript_promise/#creer-une-fonction-qui-retourne-une-promesse","title":"Cr\u00e9er une fonction qui retourne une promesse","text":"<p>Prenons par exemple l'extrait de code suivant. J'ai une fonction qui retourne un string, un affichage du r\u00e9sultat de la fonction \u00e0 la console et un dernier affichage \u00e0 la console.</p> <pre><code>function maFonction() {\n    return \"Tout va bien\";\n}\n\nconsole.log(maFonction());\nconsole.log('Fin du traitement');\n\n// R\u00e9sultat \u00e0 la console\n// &gt; Tout va bien\n// &gt; Fin du traitement\n</code></pre> <p>Maintentant si la fonction <code>maFonction</code> est longue \u00e0 ex\u00e9cuter et qu'on ne veu pas attendre le r\u00e9sultat pour continuer le traitement on peu  transformer la fonction en fonction asynchrone qui retourne une promesse. Il faut que la fonction retourne un objet Promise. La promesse prend en param\u00eatre une fonction de rappel o\u00f9 on va indiquer avec si la promesse est tenue (resolve()) ou rompue (reject()) </p> promise.js<pre><code>function maFonction() {\n    // On retourne un nouvel objet promise\n    return new Promise((resolve, reject) =&gt; {\n\n        // Mon traitement\n        try {\n            // Si tout va bien on retourne une valeur avec Resolve()\n            resolve(\"Tout va bien\");\n        } catch (error) {\n            // Si une erreur survient, on indique que l'op\u00e9ration a \u00e9chou\u00e9 avec reject()\n            reject(error);\n        }\n    });\n}\n\n// Maintenant quand on lance la fonction on peut effectuer du traitement lorsque \n// la promesse est tenue avec **then()** ou lorsqu'il y a une erreur avec **catch()**.\n// C'est deux fonctions prennent une fonction de rappel en param\u00eatre.\nmaFonction()\n.then((resultat) =&gt; {\n    console.log(resultat);\n})\n.catch((erreur) =&gt; {  \n    console.log(erreur);\n})\n\n// Cette ligne de code va \u00eatre ex\u00e9cut\u00e9 sans attendre la r\u00e9solution de la promesse, \n// elle peut donc \u00eatre affich\u00e9 avant le message dans la promesse.\nconsole.log('Fin du traitement');\n\n// R\u00e9sultat \u00e0 la console\n// &gt; Fin du traitement\n// &gt; Tout va bien\n</code></pre> <p>Dans certain cas on doit pouvoir attendre le r\u00e9sultat d'une fonction asynchrone. Dans ce cas on va ajouter l'instruction <code>async</code> \u00e0 la fonction asynchrone et <code>await</code> juste devant son appel</p> promise.js<pre><code>async function maFonction() {\n    // On retourne un nouvel objet promise\n    return new Promise((resolve, reject) =&gt; {\n\n        // Mon traitement\n        try {\n            // Si tout va bien on retourne une valeur avec Resolve()\n            resolve(\"Tout va bien\");\n        } catch (error) {\n            // Si une erreur survient, on indique que l'op\u00e9ration a \u00e9chou\u00e9 avec reject()\n            reject(error);\n        }\n    });\n}\n\n// Avec await on attend la resolution de la fonction\nawait maFonction()\n.then((resultat) =&gt; {\n    console.log(resultat);\n})\n.catch((erreur) =&gt; {  \n    console.log(erreur);\n})\n\n// Cette ligne de code va \u00e9tre ex\u00e9cut\u00e9 apr\u00e9s la resolution de la fonction   \nconsole.log('Fin du traitement');\n\n// R\u00e9sultat \u00e0 la console\n// &gt; Tout va bien\n// &gt; Fin du traitement\n</code></pre>"},{"location":"notes_de_cours/node/js_async_await/","title":"Async et await","text":"<p>https://javascript.info/async-await https://www.w3schools.com/js/js_async.asp https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function</p>"},{"location":"notes_de_cours/node/middleware/","title":"Intergiciel (Middleware)","text":"<p>En terme g\u00e9n\u00e9ral, un middleware est un logiciel qui est ex\u00e9cut\u00e9 durant la communication entre deux applications. Au niveau des services web, les middlewares seront utilis\u00e9s principalement pour manipuler la requ\u00eate en entr\u00e9e et la r\u00e9ponse en sortie. </p> <p>Les middlewares forment des couches concentriques autour de l\u2019application. En commen\u00e7ant par le plus r\u00e9cent, la requ\u00eate les traverses un a un jusqu\u2019\u00e0 l\u2019application pour ensuite refaire le chemin inverse avec la r\u00e9ponse.</p> <p> </p> Trajet d'une requ\u00eate HTTP dans les couches d'intergiciels <p>Un exemple d'utilisation serait un syst\u00e8me d'authentification qui ne laisserait \"passer\" la requ\u00eate HTTP \u00e0 notre api seulement si elle est authentifi\u00e9 ad\u00e9quatement. </p> <p>Avec Express.js, nous allons utiliser la fonction <code>app.use()</code> qui va prendre en param\u00e8tre une fonction (l'intergiciel). Lorsque la requ\u00eate arrive, elle passe \u00e0 travers chaque intergiciel dans l'ordre des fonctions use(). </p> <p>Note</p> <p>\u00c0 la fin de chaque intergiciel vous devez ex\u00e9cuter la fonction next() pour continuer le traitement et passer au prochain intergiciel sinon le traitement s'arr\u00eatera \u00e0 la fin de la fonction.</p> intergiciel.js<pre><code>function historique(req, res, next) {\n    // Affiche \u00e0 la console des informations de la requ\u00eate\n    console.log(`${req.method} ${req.url}`);\n    // Continue le traitement\n    next();\n}\n\napp.use(historique);\n</code></pre> <p>On peut aussi d\u00e9clarer l'utilisation d'un intergiciel au niveau de la route. </p> index.js<pre><code>app.get('/api/liste', historique, (req, res) =&gt; {\n    // ...\n})\n</code></pre>"},{"location":"notes_de_cours/node/middleware/#expressjson","title":"express.json()","text":"<p>Express.json() est un intergiciel d\u00e9j\u00e0 inclus dans Express et qui est utile pour transformer le json re\u00e7u du client en objet javascript. Il nous permet donc facilement d'acc\u00e9der aux donn\u00e9es que le client auraient envoy\u00e9es en JSON dans la requ\u00eate sous la forme d'un objet. On acc\u00e8de \u00e0 l'objet par <code>req.body</code> et le nom de la cl\u00e9 dans le json. </p> <p>Utilisation :  </p> tableau_de_fruits.js<pre><code>app.use(express.json());\n\napp.post('/', (req, res) =&gt; {\n    const id = req.body.id; // Il y a un item id dans le json envoy\u00e9\n\n    ...\n});\n</code></pre> <p>Manuel</p> <p>express.json - ExpressJS </p>"},{"location":"notes_de_cours/node/middleware/#morgan","title":"morgan","text":"<p>Morgan est un intergiciel pour garder l\u2019historique des requ\u00eates trait\u00e9es par votre serveur Express.</p> <p>Pour l\u2019installation : console<pre><code>npm install morgan\n</code></pre></p> <p>Utilisation :  </p> utilisation_morgan.js<pre><code>import morgan from 'morgan';\n\napp.use(morgan('dev')); // format pr\u00e9difini, voir dans la doc\n</code></pre> <p>Un autre exemple en \u00e9crivant dans un fichier</p> <pre><code>import fs from 'fs';\nvar accessLogStream = fs.createWriteStream('./access.log', { flags: 'a' })\napp.use(morgan('dev', { stream: accessLogStream }))\n</code></pre> <p>Manuel</p> <p>Morgan - ExpressJS </p>"},{"location":"notes_de_cours/node/npm/","title":"npm","text":"<p>Npm est le gestionnaire de paquets (modules) officiel de Node.js. Celui-ci permet d\u2019ajouter des modules externes dans une application Node.js Depuis la version 0.6.3 de Node.js, npm fait partie de l'environnement et est donc automatiquement install\u00e9 par d\u00e9faut. Npm fonctionne dans un terminal et g\u00e8re les d\u00e9pendances pour une application. Il permet \u00e9galement d'installer des applications Node.js disponibles sur le d\u00e9p\u00f4t npm.</p> <p>Manuel</p> <p>Documentation de npm js Wikipedia - Article sur npm </p>"},{"location":"notes_de_cours/node/npm/#npm-init","title":"npm init","text":"<p>La commande npm init permet d\u2019initialiser un projet Node.js dans le but de g\u00e9rer les modules associ\u00e9s au projet. </p> console<pre><code>npm init -y\n</code></pre> <p>Cette commande cr\u00e9e un fichier nomm\u00e9 package.json qui contiendra les configurations du projet ainsi que la liste des divers modules n\u00e9cessaires pour son bon fonctionnement. L'option -y va cr\u00e9er le fichier avec les informations par d\u00e9faut.</p> <p>Cette commande devrait toujours \u00eatre ex\u00e9cut\u00e9e avant de proc\u00e9der \u00e0 l\u2019installation de modules. </p> <p>Manuel</p> <p>npm init</p> package.json<pre><code>{\n  \"name\": \"AppName\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n</code></pre> <p>Si vous utilisez des ES module dans votre projet, ajouter la ligne <code>\"type\": \"module\"</code> comme on peut voir dans l'exemple plus haut \u00e0 la ligne 6.</p>"},{"location":"notes_de_cours/node/npm/#npm-install","title":"npm install","text":"<p>La commande npm install permet d\u2019installer des modules dans un projet. Lors de l\u2019ajout d\u2019un premier module au projet, le dossier node_modules est automatiquement cr\u00e9\u00e9.  Pour installer un module dans un projet :</p> console<pre><code>npm install nomModule\n</code></pre> <p>Pour chaque installation de module : Un sous-dossier au nom du module est cr\u00e9\u00e9. Toutes les d\u00e9pendances sont \u00e9galement charg\u00e9es. Le module et ses d\u00e9pendances sont ajout\u00e9es dans le fichier package.json </p> <p>Partage et D\u00e9ploiement : Lorsqu\u2019on partage un projet, on ne fournit g\u00e9n\u00e9ralement pas le dossier node_modules car sa taille peut devenir relativement \u00e9lev\u00e9e et les versions de Node.js ne sont pas n\u00e9cessairement les m\u00eames.  La commande npm install (sans pr\u00e9ciser le nom du module) permet d\u2019installer automatiquement tous les modules manquants (npm se fie au fichier package.json pour identifier les modules \u00e0 installer)</p>"},{"location":"notes_de_cours/node/npm/#les-options","title":"Les options","text":"<p>Lors de l\u2019installation de modules, je recommande toujours d\u2019utiliser la commande disponible dans la proc\u00e9dure d\u2019installation du module.  Parfois, certaines options sont n\u00e9cessaires.  </p> <p>Manuel</p> <p>npm-install </p> <p>Les plus courantes :  </p> <ul> <li>--save ou -S : Ajoute le module \u00e0 la liste de d\u00e9pendances dans le fichier package.json. Cette option n\u2019est plus n\u00e9cessaire depuis la version npm 5.0.0, les modules \u00e9tant ajout\u00e9s par d\u00e9faut \u00e0 la liste de d\u00e9pendances. Vous verrez cependant r\u00e9guli\u00e8rement cette option dans les proc\u00e9dures d\u2019installation de modules officiels.  </li> <li>--global ou -g : Ajoute le module globalement sur votre PC. Je recommande peu cette option \u00e0 moins que le module ne soit pas implicitement impliqu\u00e9 dans le projet. npm global (If you are using npm 5.2 or higher, we recommend using\u00a0npx\u00a0to run packages globally).  </li> </ul>"},{"location":"notes_de_cours/node/npm/#npm-install-save-dev","title":"npm install --save-dev","text":"<p>Dans votre d\u00e9veloppement, c\u2019est possible que vous utilisiez des modules seulement pour aider le d\u00e9veloppement, mais qui ne sont pas n\u00e9cessaires en production.</p> <p>Dans ce cas, il faut utiliser npm install avec l\u2019option --save-dev ou -D.  </p> <p>Ex :   </p> console<pre><code>npm install nodemon -D\n</code></pre> <p>Dans packages.json \u00e7a donne :  </p> packages.json<pre><code>{\n  \"name\": \"AppName\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"nodemon\": \"^3.0.2\"\n  }\n}\n</code></pre>"},{"location":"notes_de_cours/node/npm/#modules-utiles-au-developpement","title":"Modules utiles au d\u00e9veloppement","text":""},{"location":"notes_de_cours/node/npm/#nodemon","title":"nodemon","text":"<p>Module qui observe les fichiers de votre projet et qui red\u00e9marre le programme automatiquement.</p> <p>Installation : </p> Console<pre><code>npm install nodemon -D\n</code></pre> <p>L'option -D (ou --save-dev) indique que le module sera install\u00e9 que pour le d\u00e9veloppement et qui n'est pas n\u00e9cessaire. C'est le cas ici pour nodemon</p> <p>Pour faciliter l\u2019utilisation de nodemon, ajoutez un script dans packages.json en ajustant le nom du fichier JavaScript \u00e0 lancer au d\u00e9marrage : </p> packages.json<pre><code>{\n  \"name\": \"AppName\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"start\": \"nodemon fichier.js\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"nodemon\": \"^3.0.2\"\n  }\n}\n</code></pre> <p>Pour ex\u00e9cuter votre programme, il suffit de faire la commande suivante :</p> console<pre><code>npm start\n</code></pre> <p>Attention</p> <p>Si vous utilisez d'autres termes que start pour lancer votre script, vous devez faire la commande <code>npm run</code> et le nom \u00e0 utiliser. Par exemple si vous voulez lancer une commande avec le mot-cl\u00e9 dev, vous devrez faire : </p> console<pre><code>npm run dev\n</code></pre>"},{"location":"notes_de_cours/node/npm/#dotenv","title":"dotenv","text":"<p>Param\u00e9trez votre application directement dans le code est imprudent. Des informations confidentielles peuvent se retrouver dans votre d\u00e9p\u00f4t GitHub \u00e0 la vue de tout le monde, ex :  </p> a_ne_pas_faire.js<pre><code>const cleAPI = \"FKSDKLJFKDSKLJF898FSDKJKSD898F9DSKLFDSKFSD\";\nconst utilisateurBD = \"admin\";\nconst motDePasse=\"password\";\n</code></pre> <p>Installation : </p> console<pre><code>npm install dotenv  \n</code></pre> <p>Pour plus de s\u00e9curit\u00e9 cr\u00e9ez un fichier nomm\u00e9 .env qui va contenir les informations sensibles. Ce fichier ne doit pas \u00eatre index\u00e9 dans votre d\u00e9pot Github, penser \u00e0 l'ajouter au fichier .gitignore.</p> <p>.env<pre><code>cleAPI=\"FKSDKLJFKDSKLJF898FSDKJKSD898F9DSKLFDSKFSD\"\nutilisateurBD=\"admin\"\nmotDePasse=\"password\"\n</code></pre> Ensuite dans le code import\u00e9 le fichier et vous pouvez r\u00e9cup\u00e9rer les informations de cette fa\u00e7on :   </p> a_faire.js<pre><code>import dotenv from 'dotenv';\n\ndotenv.config();\n\nconst cleAPI = process.env.cleAPI;\n</code></pre>"},{"location":"notes_de_cours/node/npm/#information-a-ajouter-dans-le-fichier-gitignore","title":"Information \u00e0 ajouter dans le fichier .gitignore","text":"<p>Il est essentiel de ne pas envoyer dans votre d\u00e9p\u00f4t git le dossier node_modules ainsi que le fichier .env si vous en avez un. Ajoutez ces lignes dans .gitignore : </p> .gitignore<pre><code>**/node_modules \n.env  \n</code></pre> <p>Parcontre notre application \u00e0 besoin du fichier .env pour fonctionner. Une pratique courante est d'ajouter un fichier .env.exemple avec les constantes \u00e0 avoir mais sans valeur pour indiquer \u00e0 la personne qui va utiliser votre application quels champs remplir.</p> .env.exemple<pre><code>cleAPI=\nutilisateurBD=\nmotDePasse=\n</code></pre>"},{"location":"notes_de_cours/node/npm/#mise-a-jour-des-modules","title":"Mise \u00e0 jour des modules","text":"<p>Pour mettre \u00e0 jour les modules, on doit faire la commande </p> .gitignore<pre><code>npm update [-g] [&lt;pkg&gt;...]\n</code></pre> <p> </p> Le fonctionnement des versions <p>Explication du syst\u00e8me de version et des symboles utilis\u00e9s : npm version cheatsheet</p>"},{"location":"notes_de_cours/node/routage/","title":"Routage avec Express.js","text":""},{"location":"notes_de_cours/node/routage/#les-routes-dynamiques","title":"Les routes dynamiques","text":"<p>On a vue qu'on pouvait ajouter des param\u00e8tres \u00e0 l'url en utilisant le caract\u00e8re ? suivi du nom du param\u00e8te et de sa valeur.</p> <p><code>http://localhost:3000/professeurs?code=1</code></p> <p>On peut aussi ajouter la valeur du param\u00e8tre directement dans l'url sans le nommer, c'est ce qu'on appelle une route dynamique. </p> <p><code>http://localhost:3000/professeurs/1</code></p> <p>Dans cet exemple on pourra r\u00e9cup\u00e9rer la valeur 1 dans l'url comme \u00e9tant un param\u00e8tre. Les deux m\u00e9thodes se valent bien que je trouve celle-ci plus \"propre\" quand la situation le permet.</p> <p>Dans le code, quand on d\u00e9clare la route on va ajouter le nom du param\u00e8tre pr\u00e9c\u00e9d\u00e9 du caract\u00e8re :. Ensuite le param\u00e8tre sera stock\u00e9 dans l'objet <code>req.params</code> et portera le nom d\u00e9fini dans la route.</p> index.js<pre><code>app.get('/professeurs/:code', (req, res) =&gt; {\n    const code = req.params.code;\n    res.send(`Vous avez demand\u00e9 le professeur avec le code ${code}`);\n});\n</code></pre> <p>Si on veut utiliser deux param\u00e8tres de cette fa\u00e7on, on doit les s\u00e9parer par un /.</p> <p><code>http://localhost:3000/professeurs/1/mathieu</code></p> index.js<pre><code>app.get('/professeurs/:code/:nom', (req, res) =&gt; {\n    const params = req.params;\n    res.send(`Vous avez demand\u00e9 le professeur avec le code ${params.code} et le nom ${params.nom}`);\n});\n</code></pre> <p>Danger</p> <p>Faites attention \u00e0 l'ordre des routes dynamiques si la syntaxe de plusieurs routes se ressemble.</p> <p>Par exemple j'ai ces deux routes qui fonctionnent correctement</p> script.js<pre><code>app.get('/professeurs/tous', (req, res) =&gt; {\n    const code = req.params.code;\n    res.send(`Vous avez demand\u00e9 tous les professeurs.`);\n});\n\napp.get('/professeurs/:code', (req, res) =&gt; {\n    const code = req.params.code;\n    res.send(`Vous avez demand\u00e9 le professeur avec le code ${code}`);\n});\n</code></pre> <p>Par contre si j'inverse les routes et que la premi\u00e8re est la route avec le param\u00e8tre code, on ne pourra jamais acc\u00e9der \u00e0 la route <code>/professeurs/tous</code> car \"tous\" sera consid\u00e9rer comme une valeur donn\u00e9e au param\u00e8tre :code.</p>"},{"location":"notes_de_cours/node/routage/#le-routage","title":"Le routage","text":"<p>Le module Router permet de regrouper plusieurs routes similaire. C'est une tr\u00e8s bonne pratique pour maintenir un code clair et consistant qu'on pourra faire \u00e9voluer facilement.</p> <p>Reprenons l'exemple de mes deux routes professeurs plus haut. On doit premi\u00e8rement cr\u00e9er un fichier qui va contenir toutes ces routes similaires. Ensuite dans ce fichier on importe le module Express et cr\u00e9e un objet Router. Au lieu de d\u00e9finir les routes avec app on va utiliser l'objet Router qu'on vient de cr\u00e9er. Finalement \u00e0 la fin du fichier on va exporter le module pour pouvoir l'utiliser dans notre fichier index.js</p> professeurs.route.js<pre><code>// Nous avons besoin d'importer le module express pour utiliser le Router\nimport express from 'express';\n// Nous cr\u00e9ons un objet router qui va nous permettre de g\u00e9rer les routes\nconst router = express.Router();    \n\n// On utilise router au lieu de app\nrouter.get('/tous', (req, res) =&gt; {\n    res.send(`Vous avez demand\u00e9 tous les professeurs.`);\n});\n\nrouter.get('/:code', (req, res) =&gt; {\n    const code = req.params.code;\n    res.send(`Vous avez demand\u00e9 le professeur avec le code ${code}`);\n});\n\n// On exporte le router pour pouvoir l'utiliser dans index.js\nexport default router;\n</code></pre> <p>Vous avez remarqu\u00e9 que j'ai enlev\u00e9 <code>/professeurs</code> de mes routes? On va g\u00e9rer cette partie de la route dans le fichier index.js. La seule modification qu'on va faire \u00e0 ce fichier est d'ajouter ces deux lignes dans la section o\u00f9 l'on ajoute les intergiciels.</p> index.js<pre><code>// Importer le module express\nimport express from 'express';\n// Importer le fichier de router du fichier professeurs.route\nimport professeursRouter from './professeurs.route.js';\n\n// Cr\u00e9er une application express\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// On associe la route /api/professeurs au router import\u00e9\napp.use('/api/professeurs', professeursRouter);\n\napp.get('/', (req, res) =&gt; {\n    res.send(\"&lt;h1&gt;Mon premier serveur web sur express !&lt;/h1&gt;\");\n});\n\napp.listen(PORT, () =&gt; {\n    console.log(`Serveur d\u00e9marr\u00e9 sur le port ${PORT}`);\n});\n</code></pre> <p>Toutes les routes qui d\u00e9bute par <code>/api/professeurs</code> seront dirig\u00e9es vers le fichier ./professeurs.route.js (L'ajout de api dans la route est purement esth\u00e9tique). Donc maintenant quand le serveur recevra par exemple la route <code>/api/professeurs/tous</code> il va diriger la requ\u00e8te dans le fichier professeurs.route.js pour trouver quoi faire avec la route <code>/tous</code>.</p> <p>Avec Router on peut organiser notre projet de plusieurs fa\u00e7on. Nous verrons plus tard des exemples de bonnes structures \u00e0 adopter pour nos api.</p> <p>Manuel</p> <p>Router - ExpressJS </p>"},{"location":"notes_de_cours/node/server_web/","title":"Introduction \u00e0 Node.js - Serveur Web","text":""},{"location":"notes_de_cours/node/server_web/#un-hello-world-dans-un-serveur-web","title":"Un Hello World dans un serveur web","text":"<p>Voici un petit exemple tout simple de serveur web qui affiche le message \"Hello World\". L'exemple est tir\u00e9 de la documentation de Node.js.</p> serveur_hello.js<pre><code>import { createServer } from 'node:http';\n\nconst hostname = '127.0.0.1';\nconst port = 3000;\n\nconst server = createServer((req, res) =&gt; {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World');\n});\n\nserver.listen(port, hostname, () =&gt; {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});\n</code></pre> <ul> <li>Le module http de Node est inclus \u00e0 la premi\u00e8re ligne, c'est lui qui va \u00eatre en charge du serveur</li> <li>On d\u00e9finit ensuite une adresse d'h\u00f4te et un port pour notre serveur</li> <li>On cr\u00e9e un objet serveur \u00e0 la ligne 6. Dans la fonction de rappel les param\u00eatres repr\u00e9sentent des objets associ\u00e9s \u00e0 la requ\u00eate http qui est re\u00e7u (req) et la r\u00e9ponse retourn\u00e9e (res).</li> <li>Le statusCode est le code de statut retourn\u00e9, ici 200 pour un succ\u00e8s</li> <li>Le Content-Type d\u00e9fini le format de la r\u00e9ponse.</li> <li>Avec la fonction end() on envoi le texte de la r\u00e9ponse.</li> <li>La fonction listen \u00e0 la ligne 12 lance le serveur et le met en mode \"\u00e9coute\"</li> </ul> <p>Pour lancer le serveur</p> <ul> <li>Lancer le programme avec la commande <code>node serveur_hello.js</code> dans un terminal.</li> <li>Depuis un navigateur acc\u00e9d\u00e9 \u00e0 l'url <code>http://localhost:3000/</code></li> </ul>"},{"location":"notes_de_cours/node/server_web/#lurl-et-ses-parametres","title":"L'url et ses param\u00e8tres","text":"Comment extraire les parties d'un url <p>Deux modules \u00e0 ajouter pour utiliser les commandes de l'image</p> <pre><code>import url from 'url';\nimport querystring from 'querystring';\n</code></pre> <p>On peut aussi simplifier l'acquisition des param\u00e8tres en ajoutant le param\u00e8tre true \u00e0 la fonction url.parse(). \u00c7a permet d'automatiquement convertir les param\u00e8tres de la requ\u00eate en objet. \u00c7a \u00e9vite l'utilisation de <code>querystring</code>.</p> <pre><code>const params = url.parse(req.url, true).query;\n</code></pre> <p>La variable params est un tableau associatif avec le nom des param\u00e8tres en cl\u00e9. Donc si je re\u00e7ois le param\u00e8tre page=1, je peux y acc\u00e8der avec comme ceci.</p> <pre><code>console.log(params[\"page\"]);  // La valeur affich\u00e9 sera 1\n</code></pre>"},{"location":"notes_de_cours/node/server_web/#exemple-de-serveur-web-avec-gestion-des-parametres","title":"Exemple de serveur web avec gestion des param\u00e8tres","text":"serveur_parametres.js<pre><code>import { createServer } from 'node:http';\nimport url from 'url';\n\nconst hostname = 'localhost';\nconst port = 3000;\n\nconst server = createServer((req, res) =&gt; {\n    // R\u00e9cup\u00e9ration des param\u00e8tres\n    const params = url.parse(req.url, true).query;\n    const route = url.parse(req.url).pathname;\n\n    // Affichage des valeurs de la requ\u00eate\n    console.log('Route : ' + route);\n    console.log('Param\u00e8tres : ' + JSON.stringify(params));\n\n    // Retourne les param\u00e8tres en JSON dans la r\u00e9ponse\n    res.statusCode = 200;\n    res.setHeader('Content-Type', 'application/json');\n    res.write(JSON.stringify(params));\n\n    res.end();\n});\n\nserver.listen(port, hostname, () =&gt; {\n    console.log(`Le serveur est lanc\u00e9 \u00e0 l'adresse http://${hostname}:${port}/`);\n});\n</code></pre> <p>Pour lancer le code, ex\u00e9cutez le fichier et entrez l'url  <code>http://localhost:3000/</code> dans un navigateur avec n'importe quel route et param\u00e8tres. Par exemple  <code>http://localhost:3000/test?param1=hello&amp;param2=world</code>. Le serveur va retourner les param\u00e8tres sous format JSON.</p>"},{"location":"notes_de_cours/node/server_web/#autre-exemple-avec-gestion-des-routes","title":"Autre exemple avec gestion des routes","text":"serveur_route.js<pre><code>import { createServer } from 'node:http';\nimport url from 'url';\n\nconst hostname = 'localhost';\nconst port = 3000;\nconst server = createServer((req, res) =&gt; {\n\n    // R\u00e9cup\u00e9ration de la route\n    const route = url.parse(req.url).pathname;\n\n    res.statusCode = 200;\n    res.setHeader('Content-Type', 'text/plain; charset=utf-8');\n\n    if (route == '/') {\n        res.write(\"Bienvenue au jeu d'\u00e9vasion entrez dans la salle de regroupement.\");\n    } else if (route == '/salle-serveurs') {\n        res.write('Vous \u00eates dans la salles des serveurs, bonne chance !');\n    } else if (route == '/etage/1/prof') {\n        res.write('H\u00e9 ho, que fa\u00eetes-vous dans mon bureau !?!?!');\n    } else {\n        res.write('Page introuvable !');\n        res.statusCode = 404;\n    }\n    res.end();\n});\n\nserver.listen(port, hostname, () =&gt; {\n    console.log(`Le serveur est lanc\u00e9 \u00e0 l'adresse http://${hostname}:${port}/`);\n});\n</code></pre> <p>\u00c0 la ligne 9 on r\u00e9cup\u00e8re le nom de la route dans l'url. Ensuite avec une s\u00e9rie de if..else on peut ex\u00e9cut\u00e9 un traitement diff\u00e9rent selon la route. Si la route est diff\u00e9rente de ceux qu'on a cod\u00e9, on retourne une erreur 404.</p>"},{"location":"notes_de_cours/node/structure_projet/","title":"Structure d'un projet avec Express","text":"<p>Express est hautement configurable et permet pratiquement d'utiliser la structure de projet que l'on souhaite. Pour le cours nous allons adopter une approche dans laquelle nous allons s\u00e9parer les routes, le controlleur o\u00f9 sera fait la logique applicative et l'acc\u00e8s aux donn\u00e9es.</p> <ul> <li>Mod\u00e8le : Gestion des int\u00e9ractions avec la base de donn\u00e9es. C'est ici que nous ferons nos requ\u00eates et retourneront les r\u00e9sultats bruts.</li> <li>Route : Une s\u00e9rie de routes (endpoint). Chaque route fera appel \u00e0 une fonction du controlleur, il n'y a pas vraiment de traitement qui se fera \u00e0 ce niveau.</li> <li>Controlleur : C'est ici qu'on fait la logique de l'application, avec des appels au mod\u00e8le si besoin est.</li> </ul> <p> </p> Notre structure de projet <p>\u00c0 la racine du projet : </p> <ul> <li>.env : Contient les variables d'environnement qu'on utilise avec le module dotenv.</li> <li>package.json : La \"recette\" pour construire votre application, on y retrouve les modules \u00e0 installer et les scripts.</li> <li>server.js : Fichier de d\u00e9marrage de votre application. (ou index.js, app.js, etc..) </li> <li>/src : Dossier qui contient le restant de la logique de l'application</li> <li>/node_modules : Dossier des modules install\u00e9s, ne jamais rien modifier ou ajouter dans ce r\u00e9pertoire. \u00c0 ne pas inclure dans vos d\u00e9p\u00f4ts Git, ce dossier peut facilement \u00eatre \"reconstruit\" gr\u00e2ce \u00e0 la commande <code>npm install</code>.</li> </ul> <p>Dans le dossier src : </p> <ul> <li>/config : Les fichiers servants \u00e0 la configuration, comme la connexion \u00e0 la base de donn\u00e9es (db.js dans mon exemple).</li> <li>/controllers : Les fichiers controlleurs o\u00f9 la logique de l'application est \u00e9crite. Nommez les nomDeLaRessource.controller.js pour plus de clart\u00e9.</li> <li>/models : Les fichiers mod\u00e8les qui s'occuperont de la communication avec la base de donn\u00e9es. Nommez les nomDeLaRessource.model.js pour plus de clart\u00e9.</li> <li>/routes : Les fichiers de routage qui essentiellement appelleront le bon controlleur. Nommez les nomDeLaRessource.route.js pour plus de clart\u00e9.</li> </ul>"},{"location":"notes_de_cours/securite/authentification/","title":"Authentification d'un API avec JWT","text":"<p>api key jwt</p>"},{"location":"notes_de_cours/securite/authentification/#cle-api-vs-jwt","title":"Cl\u00e9 api vs JWT","text":"<p>api key vs JWT https://www.algolia.com/blog/engineering/api-keys-vs-json-web-tokens/</p>"},{"location":"notes_de_cours/securite/authentification/#fonctionnement","title":"Fonctionnement","text":"<p>https://www.geeksforgeeks.org/how-to-implement-jwt-authentication-in-express-js-app/ https://medium.com/@prashantramnyc/authenticate-rest-apis-in-node-js-using-jwt-json-web-tokens-f0e97669aad3 https://dev.to/cristain/how-to-implement-jwt-authentication-using-node-express-typescript-app-2023-2c5o https://www.digitalocean.com/community/tutorials/nodejs-jwt-expressjs https://www.npmjs.com/package/jsonwebtoken</p>"},{"location":"notes_de_cours/securite/cle_api/","title":"Cl\u00e9 API","text":"<p>Une cl\u00e9 d'api est une cha\u00eene de caract\u00e8res al\u00e9atoire unique qui est utilis\u00e9e pour identifier et authentifier un utilisateur qui effectue une requ\u00eate \u00e0 l'api. Ce n'est pas de l'information encrypt\u00e9 ou hash\u00e9. Par exemple on pourrait utiliser un UUID comme cl\u00e9 api. L'importe est que la cl\u00e9 api doit \u00eatre unique dans le syst\u00e8me.</p> <p>On ajoute la cl\u00e9 dans l'ent\u00eate de chaque requ\u00eate envoy\u00e9e \u00e0 l'API. Ensuite le serveur d\u00e9termine si la cl\u00e9 est valide, identifie l'utilisateur associ\u00e9 \u00e0 la cl\u00e9 (identification) et d\u00e9termine si celui-ci peut effectuer la requ\u00eate (authentification).</p>"},{"location":"notes_de_cours/securite/cle_api/#fonctionnement","title":"Fonctionnement","text":"<p>Voici le mode de fonctionnement que nous allons utiliser pour ajouter une protection par cl\u00e9 api \u00e0 notre projet:</p> <ul> <li> L'utilisateur doit se cr\u00e9er un compte \u00e0 l'aide d'une route de l'api en fournissant un email et un mot de passe.</li> <li> On va g\u00e9n\u00e9rer une cl\u00e9 d'api, enregistrer les informations dans la base de donn\u00e9es (hashez le mot de passe) et ensuite retourner la cl\u00e9 \u00e0 l'utilisateur</li> <li> L'utilisateur devra ensuite ajouter la cl\u00e9 dans l'ent\u00eate de chaque requ\u00eate qui est envoy\u00e9e au serveur.</li> <li> Un Intergiciel se chargera de valider si la cl\u00e9 est bonne en faisant une recherche dans la base de donn\u00e9es.</li> <li> On va ajouter le Intergiciel aux routes qu'on veut prot\u00e9ger.</li> </ul>"},{"location":"notes_de_cours/securite/cle_api/#ajouter-la-cle-a-lentete-de-la-requete","title":"Ajouter la cl\u00e9 \u00e0 l'ent\u00eate de la requ\u00eate","text":"<p>Dans la section ent\u00eate de la requ\u00eate il y a une cl\u00e9 qui est utilis\u00e9e pour envoyer des donn\u00e9es d'authorisation comme une cl\u00e9 api. Dans Postman vous pouvez ajouter l'information dans l'onglet Headers. Le nom de la cl\u00e9 est Authorization et comme valeur nous allons avoir cle_api suivi d'une espace et de la cl\u00e9. (Vous pouvez utiliser autre chose comme nom que cle_api, souvent dans les documentation on va voir Bearer, l'id\u00e9e est d'indiquer quelle genre d'autorisation on demande).</p> <p></p>"},{"location":"notes_de_cours/securite/cle_api/#intergiciel-de-confirmation-de-la-cle","title":"Intergiciel de confirmation de la cl\u00e9","text":"<p>Dans votre projet, cr\u00e9ez un r\u00e9pertoire middlewares dans le r\u00e9pertoire src. Le code suivant est un exemple d'intergiciel qui r\u00e9cup\u00e8re la valeur de la cl\u00e9 api dans l'ent\u00eate de la requ\u00eate et v\u00e9rifie \u00e0 l'aide d'une fonction dans le mod\u00e8le que la cl\u00e9 existe dans la base de donn\u00e9es. </p> authentification.middleware.js<pre><code>import { ValidationCle } from \"../models/utilisateur.model\";\n\nconst authentification = (req, res, next) =&gt; {\n\n    // V\u00e9rifier si la cl\u00e9 API est pr\u00e9sente dans l'ent\u00eate\n    if(!req.headers.authorization) {\n        return res.status(401).json({ message: \"Vous devez fournir une cl\u00e9 api\" });\n    }\n\n    // R\u00e9cup\u00e9rer la cl\u00e9 API qui est dans l'ent\u00eate au format \"cle_api XXXXXXXX\"\n    const cleApi = req.headers.authorization.split(' ')[1];\n    // V\u00e9rifier si la cl\u00e9 API est valide\n    ValidationCle(cleApi)\n    .then(resultat =&gt; {\n        if(!resultat) {\n            return res.status(401).json({ message: \"Cl\u00e9 API invalide\" });\n        } else {\n            // La cl\u00e9 API est valide, on continue le traitement avec la fonction next()\n            next();\n        }\n    })\n    .catch(erreur =&gt; {\n        return res.status(500).json({ message: \"Erreur lors de la validation de la cl\u00e9 api\" })\n    });    \n}\n\nexport default authentification;\n</code></pre> <p>Note</p> <p>Explication de la ligne 11 <code>req.headers.authorization</code> me retourne la valeur compl\u00e8te de la cl\u00e9 authorization, par exemple \"cle_api 123456\". En utilisant split avec un espace comme caract\u00e8re de s\u00e9paration je me retrouve avec un tableau avec \"cle_api\" \u00e0 l'index 0 et \"123456\" \u00e0 l'index 1. C'est ne r\u00e9cup\u00e9rer que la valeur de la cl\u00e9 que j'utilise split et ensuite je demande l'index 1. </p>"},{"location":"notes_de_cours/securite/cle_api/#protection-des-routes","title":"Protection des routes","text":"<p>On peut appliquer la protection \u00e0 toutes les routes de l'API. Par contre si on a une route qui permet de cr\u00e9er un utilisateur sans cl\u00e9 d'api ou une route pour la documentation, elles seront bloqu\u00e9es. Ce n'est donc pas la meilleure m\u00e9thode. Dans le fichier index.js on va simplement utiliser <code>app.use()</code> avec le nom de la fonction intergiciel qu'on aura import\u00e9.</p> index.js<pre><code>import authentification from './src/middlewares/authentification.middleware';\n// Toutes les requ\u00e8tes vont valid\u00e9es par l'intergiciel\napp.use(authentification);\n</code></pre> <p>\u00c9tant donn\u00e9e qu'on utilise le routage, on peut aussi ajouter la protection \u00e0 un groupe de route.</p> index.js<pre><code>import authentification from './src/middlewares/authentification.middleware';\nimport testRoute from './src/routes/test.route';\n// ...\napp.use('api/test', authentification, testRoute);\n</code></pre> <p>On peut aussi y aller route par route</p> pokemons.route.js<pre><code>import authentification from \"../middlewares/authentification.middleware\";  \nimport testController from \"../controllers/test.controller\";\n\n// Cette route n'est pas prot\u00e9g\u00e9e\nrouter.get(\"/liste\", testController.afficherListe);\n// Mais celle-ci l'est\nrouter.post(\"/\", authentification, testController.ajouterItem);\n</code></pre>"},{"location":"notes_de_cours/securite/cle_api/#mediagraphie","title":"Mediagraphie","text":"<ul> <li>Ali, M. (2023, April 28). Understanding API key authentication in Node.js. LogRocket Blog. https://blog.logrocket.com/understanding-api-key-authentication-node-js/ </li> <li>Villani, P. (n.d.). What is an API key &amp; how is it used for security?. Algolia. https://www.algolia.com/blog/engineering/search-101-what-is-an-api-key-how-does-it-provide-api-security/ </li> </ul>"},{"location":"notes_de_cours/securite/hashage/","title":"Hasher un mot de passe avec Node.js","text":"<p>Vous \u00eates responsable des donn\u00e9es qui transigent par votre api. Les informations sensibles comme un mot de passe doivent toujours \u00eatre hash\u00e9 avant d'\u00eatre enregistr\u00e9es dans une base de donn\u00e9es.</p> <p>Petit rappel, le hachage de mot de passe consiste \u00e0 transformer un mot de passe en lettres alphanum\u00e9riques \u00e0 l'aide d'algorithmes sp\u00e9cifiques. </p>"},{"location":"notes_de_cours/securite/hashage/#bcrypt","title":"BCrypt","text":"<p>Sous Node.js vous avez la librairie BCrypt qui vous aide \u00e0 hasher un mot de passe et ensuite de le valider. </p> <p>Manuel</p> <p>https://www.npmjs.com/package/bcrypt</p>"},{"location":"notes_de_cours/securite/hashage/#fonctionnement","title":"Fonctionnement","text":"<p>On va fournir \u00e0 BCrypt un mot de passe en clair qu'il va convertir en un hash. C'est cette donn\u00e9e que nous allons enregistrer dans la base de donn\u00e9es. BCrypt utilise aussi le concept de salt qui ajoute une couche suppl\u00e9mentaire de s\u00e9curit\u00e9. Un salt est une chaine de caract\u00e8re g\u00e9n\u00e9r\u00e9 al\u00e9atoirement et qui sera ajout\u00e9 au hash. Un autre concept utilis\u00e9 est le cost factor, un indicateur du temps pris pour g\u00e9n\u00e9rer le hash. Plus le cost factor est \u00e9lev\u00e9, plus le hash sera s\u00e9curitaire mais il sera plus long \u00e0 g\u00e9n\u00e9rer. </p>"},{"location":"notes_de_cours/securite/hashage/#utilisation","title":"Utilisation","text":"<p>Installation</p> <pre><code>npm install bcrypt\n</code></pre> <p>Pour hasher une chaine de caract\u00e8re on va utiliser la fonction <code>hash()</code> de BCrypt. La fonction va prendre en argument la chaine de caract\u00e8re \u00e0 hasher ainsi que le cost factor. Le salt va \u00e9tre g\u00e9n\u00e9r\u00e9 automatiquement et ajout\u00e9 au hash.</p> hashage.js<pre><code>import bcrypt from 'bcrypt';\nconst costFactor = 10;\nconst password = \"Admin@1234\";\n\nbcrypt.hash(password, costFactor)\n  .then(hash =&gt; {\n    console.log('Hash: ', hash)\n  })\n  .catch(err =&gt; console.error(err.message))\n</code></pre> <p>On pourrait aussi le faire en deux \u00e9tapes, g\u00e9n\u00e9rer le salt et ensuite le hash.</p> script.js<pre><code>import bcrypt from 'bcrypt';\nconst costFactor = 10;\nconst password = \"Admin@1234\";\n\nbcrypt.genSalt(costFactor)\n  .then(salt =&gt; {\n    console.log('Salt: ', salt)\n    bcrypt.hash(password, salt)\n        .then((hash) =&gt; {\n            console.log('Hash: ', hash)\n        })\n  })\n  .catch(err =&gt; console.error(err.message))\n</code></pre> <p>\u00c0 l'aide de async et await, on peut simplifier encore plus la syntaxe</p> <pre><code>const ajouterUtilisateur = async (req, res) =&gt; {\n    // ...\n    const hash = await bcrypt.hash(req.body.password, costFactor);\n    // ...\n}\n</code></pre>"},{"location":"notes_de_cours/securite/hashage/#structure-du-hash","title":"Structure du hash","text":"<p>Le hash obtenu sera une chaine d'une longueur de 60 caract\u00e8res sous le format $[Algorithme]$[costFactor]$[Salt/Hash].</p> Exemple de hash<pre><code>$2b$10$MUWYJRZ4mnHGfzf1Dy.34.1cXsQfJ9d3Me1YmUYWY90F1xXnthK2q\n</code></pre> <p>Il est compos\u00e9 de 4 parties, le signe $ fait office de s\u00e9parateur : </p> <ul> <li><code>2b</code> : L'algorithme utilis\u00e9, ici le code est pour BCrypt.</li> <li><code>10</code> : Le cost factor</li> <li><code>MUWYJRZ4mnHGfzf1Dy.34.</code> : Les 22 caract\u00e8res du salt.</li> <li><code>1cXsQfJ9d3Me1YmUYWY90F1xXnthK2q</code> : Le hash en 31 caract\u00e8res.</li> </ul>"},{"location":"notes_de_cours/securite/hashage/#comparer-un-mot-de-passe-a-un-hash","title":"Comparer un mot de passe \u00e0 un hash","text":"<p>Le mot de passe hash\u00e9 ne pourra jamais \u00eatre \"d\u00e9hash\u00e9\". Pour valider un mot de passe (ou tout autre chaine de caract\u00e8res) nous allons utiliser la fonction compare de BCrypt.</p> bcrypt.js<pre><code>bcrypt.compare(password, hash)\n.then(res =&gt; {\n    // Code si vrai\n})\n.catch(err =&gt; {\n    // code si faux\n})\n</code></pre> <p>La fonction va utiliser les informations de l'algorythme, du cost factor et du salt pour hasher le mot de passe sous les m\u00eames conditions et valider qu'il correspond.</p>"},{"location":"notes_de_cours/securite/hashage/#mediagraphie","title":"Mediagraphie","text":"<ul> <li>Bcrypt. npm. (n.d.-a). https://www.npmjs.com/package/bcrypt </li> <li>Patel, H. (2023, March 27). Password hashing in node.js with bcrypt. LogRocket Blog. https://blog.logrocket.com/password-hashing-node-js-bcrypt/ </li> </ul>"},{"location":"notes_de_cours/securite/jwt/","title":"JSON Web Token (JWT)","text":"<ul> <li>Qu'est-ce que c'est?</li> <li>Pourquoi on l'utilise, avantage</li> <li>Structure</li> </ul> <p>https://auth0.com/docs/secure/tokens/json-web-tokens https://jwt.io/ https://fr.wikipedia.org/wiki/JSON_Web_Token</p>"},{"location":"notes_de_cours/securite/jwt/#mediagraphie","title":"M\u00e9diagraphie","text":"<ul> <li>GeeksforGeeks. (2024, January 18). How to implement JWT Authentication in express app\u202f?. GeeksforGeeks. https://www.geeksforgeeks.org/how-to-implement-jwt-authentication-in-express-js-app/</li> <li>Silva, M. H. da. (2020, September 14). Creating a secure node.js REST API: Toptal\u00ae. Toptal Engineering Blog. https://www.toptal.com/nodejs/secure-rest-api-in-nodejs</li> </ul>"}]}