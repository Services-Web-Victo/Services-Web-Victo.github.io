{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Services Web","title":"Accueil"},{"location":"#services-web","text":"","title":"Services Web"},{"location":"evaluation/epreuve_finale/","text":"\u00c9preuve finale \u00c9nonc\u00e9 de l\u2019\u00e9preuve Vous devez d\u00e9velopper seul un service web selon les sp\u00e9cifications d\u00e9crites plus bas et l\u2019int\u00e9grer dans un site Web. Contexte de r\u00e9alisation Le d\u00e9veloppement se fera durant le temps en classe et hors classe. Date limite de remise : Jeudi le 11 mai \u00e0 23:59 La remise se fera par Github. Vous pouvez me faire un repo pour le service web et un autre pour le site ou bien me jumeler les deux dans le m\u00eame. Pour la base de donn\u00e9es, me faire un dump avec cr\u00e9ation de tables et inclure le fichier dans le projet du service web. Sp\u00e9cification de l\u2019\u00e9preuve Le service Web Le sujet du service web est \u00e0 votre choix, mais il doit r\u00e9pondre aux crit\u00e8res suivants. Le d\u00e9veloppement doit se faire en PHP avec le framework SLIM. La structure du projet doit respecter une s\u00e9paration entre la logique et les donn\u00e9es. Vous devez cr\u00e9er des routes pour couvrir les m\u00e9thodes HTTP suivantes: GET, POST, PUT, DELETE. Les routes doivent retourner le bon code d\u2019\u00e9tat selon leur m\u00e9thode et la situation. (200, 201, 403, etc.). Fiez-vous aux notes de cours pour la convention qu'on utilise dans le cours. Toutes les routes cr\u00e9\u00e9es doivent \u00eatre document\u00e9es selon la norme openAPI qu\u2019on a vue en classe. Toutes les routes doivent \u00eatre couvertes par des tests fonctionnels. (Voir section Tests plus loin) Au moins une des routes doit \u00eatre prot\u00e9g\u00e9e par un syst\u00e8me d\u2019authentification de votre choix (basic, avec JWT, etc.) Le service web doit \u00eatre h\u00e9berg\u00e9 en ligne sur l\u2019h\u00e9bergeur de votre choix. Le client Web Le client web doit utiliser React pour l\u2019affichage et la gestion des op\u00e9rations avec le service web. Il permettra de se connecter \u00e0 votre service web et d\u2019interagir avec les routes. L\u2019utilisateur devra pouvoir utiliser votre site web pour pouvoir afficher, ajouter, modifier et supprimer des donn\u00e9es. Comme pour le service web, vous n\u2019\u00eates pas oblig\u00e9 de couvrir toutes les tables possibles de votre base de donn\u00e9es. Le site web doit aussi utiliser une seconde API que vous n\u2019avez pas d\u00e9velopp\u00e9e. \u00c7a peut \u00eatre une API publique (m\u00e9t\u00e9o, Random User, Unsplash, etc.) ou bien l\u2019api d\u2019un autre \u00e9l\u00e8ve. L\u2019aspect esth\u00e9tique ne sera pas \u00e9valu\u00e9, je veut que \u00e7a fonctionne avant tout. Suivi de version Vous devez faire un suivi de version sur Github. Un premier push \u00e0 votre repo distant doit \u00eatre fait avant de commencer \u00e0 d\u00e9velopper. Ajoutez-moi comme collaborateur \u00e0 votre repo. Utilisateur : FrechetteMathieu Email : frechette.mathieu@carrefour.cegepvicto.ca Vous devez faire des commits et des push de fa\u00e7on r\u00e9guli\u00e8re (id\u00e9alement apr\u00e8s chaque fonctionnalit\u00e9 termin\u00e9e que vous codez). Tests Pour chaque route, vous devez tester au minimum les deux points suivants : Le code de statut retourn\u00e9 est bon Les valeurs de retours sont ce qui est attendu Vous devez effectuer vos tests directement dans l\u2019api avec PHPUnit. Grille de correction Crit\u00e8res pond\u00e9ration Partie #1 - Le service Web /65 La base de donn\u00e9es doit \u00eatre compos\u00e9e d\u2019un minimum de deux tables. 5 Vous devez cr\u00e9er les routes pour couvrir toutes les op\u00e9rations CRUD sur une des tables de la base de donn\u00e9es. 40 Les routes doivent retourner le bon code d\u2019\u00e9tat selon leur type et la situation. 5 Toutes les routes cr\u00e9\u00e9es doivent \u00eatre document\u00e9es selon la norme openAPI. 5 Au moins une des routes doit \u00eatre prot\u00e9g\u00e9e par un syst\u00e8me d\u2019authentification de votre choix (basic, avec JWT, etc.) 5 Le service web doit \u00eatre h\u00e9berg\u00e9 en ligne sur l\u2019h\u00e9bergeur de votre choix. 5 Partie #2 - Client React /25 Le site web doit utiliser React pour l\u2019affichage et la gestion des op\u00e9rations avec le service web. 5 L\u2019utilisateur devra pouvoir utiliser votre site web pour pouvoir afficher, ajouter, modifier et supprimer des donn\u00e9es. 15 Le site web doit aussi utiliser une seconde API que vous n\u2019avez pas d\u00e9velopp\u00e9e. \u00c7a peut \u00eatre une API publique bien l\u2019api d\u2019un autre \u00e9l\u00e8ve. 5 Suivi de version /5 Un suivi de version est fait avec Github 5 Tests unitaires /5 Chaque route est test\u00e9 avec PHPUnit 5 Total / 100","title":"\u00c9preuve finale"},{"location":"evaluation/epreuve_finale/#epreuve-finale","text":"","title":"\u00c9preuve finale"},{"location":"evaluation/epreuve_finale/#enonce-de-lepreuve","text":"Vous devez d\u00e9velopper seul un service web selon les sp\u00e9cifications d\u00e9crites plus bas et l\u2019int\u00e9grer dans un site Web.","title":"\u00c9nonc\u00e9 de l\u2019\u00e9preuve"},{"location":"evaluation/epreuve_finale/#contexte-de-realisation","text":"Le d\u00e9veloppement se fera durant le temps en classe et hors classe. Date limite de remise : Jeudi le 11 mai \u00e0 23:59 La remise se fera par Github. Vous pouvez me faire un repo pour le service web et un autre pour le site ou bien me jumeler les deux dans le m\u00eame. Pour la base de donn\u00e9es, me faire un dump avec cr\u00e9ation de tables et inclure le fichier dans le projet du service web.","title":"Contexte de r\u00e9alisation"},{"location":"evaluation/epreuve_finale/#specification-de-lepreuve","text":"","title":"Sp\u00e9cification de l\u2019\u00e9preuve"},{"location":"evaluation/epreuve_finale/#le-service-web","text":"Le sujet du service web est \u00e0 votre choix, mais il doit r\u00e9pondre aux crit\u00e8res suivants. Le d\u00e9veloppement doit se faire en PHP avec le framework SLIM. La structure du projet doit respecter une s\u00e9paration entre la logique et les donn\u00e9es. Vous devez cr\u00e9er des routes pour couvrir les m\u00e9thodes HTTP suivantes: GET, POST, PUT, DELETE. Les routes doivent retourner le bon code d\u2019\u00e9tat selon leur m\u00e9thode et la situation. (200, 201, 403, etc.). Fiez-vous aux notes de cours pour la convention qu'on utilise dans le cours. Toutes les routes cr\u00e9\u00e9es doivent \u00eatre document\u00e9es selon la norme openAPI qu\u2019on a vue en classe. Toutes les routes doivent \u00eatre couvertes par des tests fonctionnels. (Voir section Tests plus loin) Au moins une des routes doit \u00eatre prot\u00e9g\u00e9e par un syst\u00e8me d\u2019authentification de votre choix (basic, avec JWT, etc.) Le service web doit \u00eatre h\u00e9berg\u00e9 en ligne sur l\u2019h\u00e9bergeur de votre choix.","title":"Le service Web"},{"location":"evaluation/epreuve_finale/#le-client-web","text":"Le client web doit utiliser React pour l\u2019affichage et la gestion des op\u00e9rations avec le service web. Il permettra de se connecter \u00e0 votre service web et d\u2019interagir avec les routes. L\u2019utilisateur devra pouvoir utiliser votre site web pour pouvoir afficher, ajouter, modifier et supprimer des donn\u00e9es. Comme pour le service web, vous n\u2019\u00eates pas oblig\u00e9 de couvrir toutes les tables possibles de votre base de donn\u00e9es. Le site web doit aussi utiliser une seconde API que vous n\u2019avez pas d\u00e9velopp\u00e9e. \u00c7a peut \u00eatre une API publique (m\u00e9t\u00e9o, Random User, Unsplash, etc.) ou bien l\u2019api d\u2019un autre \u00e9l\u00e8ve. L\u2019aspect esth\u00e9tique ne sera pas \u00e9valu\u00e9, je veut que \u00e7a fonctionne avant tout.","title":"Le client Web"},{"location":"evaluation/epreuve_finale/#suivi-de-version","text":"Vous devez faire un suivi de version sur Github. Un premier push \u00e0 votre repo distant doit \u00eatre fait avant de commencer \u00e0 d\u00e9velopper. Ajoutez-moi comme collaborateur \u00e0 votre repo. Utilisateur : FrechetteMathieu Email : frechette.mathieu@carrefour.cegepvicto.ca Vous devez faire des commits et des push de fa\u00e7on r\u00e9guli\u00e8re (id\u00e9alement apr\u00e8s chaque fonctionnalit\u00e9 termin\u00e9e que vous codez).","title":"Suivi de version"},{"location":"evaluation/epreuve_finale/#tests","text":"Pour chaque route, vous devez tester au minimum les deux points suivants : Le code de statut retourn\u00e9 est bon Les valeurs de retours sont ce qui est attendu Vous devez effectuer vos tests directement dans l\u2019api avec PHPUnit.","title":"Tests"},{"location":"evaluation/epreuve_finale/#grille-de-correction","text":"Crit\u00e8res pond\u00e9ration Partie #1 - Le service Web /65 La base de donn\u00e9es doit \u00eatre compos\u00e9e d\u2019un minimum de deux tables. 5 Vous devez cr\u00e9er les routes pour couvrir toutes les op\u00e9rations CRUD sur une des tables de la base de donn\u00e9es. 40 Les routes doivent retourner le bon code d\u2019\u00e9tat selon leur type et la situation. 5 Toutes les routes cr\u00e9\u00e9es doivent \u00eatre document\u00e9es selon la norme openAPI. 5 Au moins une des routes doit \u00eatre prot\u00e9g\u00e9e par un syst\u00e8me d\u2019authentification de votre choix (basic, avec JWT, etc.) 5 Le service web doit \u00eatre h\u00e9berg\u00e9 en ligne sur l\u2019h\u00e9bergeur de votre choix. 5 Partie #2 - Client React /25 Le site web doit utiliser React pour l\u2019affichage et la gestion des op\u00e9rations avec le service web. 5 L\u2019utilisateur devra pouvoir utiliser votre site web pour pouvoir afficher, ajouter, modifier et supprimer des donn\u00e9es. 15 Le site web doit aussi utiliser une seconde API que vous n\u2019avez pas d\u00e9velopp\u00e9e. \u00c7a peut \u00eatre une API publique bien l\u2019api d\u2019un autre \u00e9l\u00e8ve. 5 Suivi de version /5 Un suivi de version est fait avec Github 5 Tests unitaires /5 Chaque route est test\u00e9 avec PHPUnit 5 Total / 100","title":"Grille de correction"},{"location":"exercices/01_utilisation_api/","text":"Exercice 01 - Utilisation d\u2019un service web T\u00e9l\u00e9chargez le fichier suivant et inscrivez-y vos r\u00e9ponse : exercice_01.docx . Pour chaque r\u00e9ponse, vous devez aussi \u00e9crire l'url que vous avez utilis\u00e9. Une fois termin\u00e9, remettez-moi votre fichier sur Teams. # 1 Bored API \u00c0 l\u2019aide de la documentation de l\u2019api ( https://www.boredapi.com/documentation ) ex\u00e9cutez les requ\u00eates suivantes. Affichez l\u2019activit\u00e9 avec la cl\u00e9 6482790 Affichez une activit\u00e9 de type \u00ab cooking \u00bb et avec 2 participants # 2 Chucknorris.io \u00c0 l'aide de l'api disponible sur le site https://api.chucknorris.io/ r\u00e9pondez aux questions suivantes. Pour chacune des questions je veux avoir aussi l'url que vous avez utilis\u00e9 pour trouver la r\u00e9ponse. Combien il y a de cat\u00e9gorie au total? Combien de blagues contiennent le mot \"beer\"? # 3 XKCD \u00c0 l'aide de l'api disponible sur le site https://xkcd.com/json.html r\u00e9cup\u00e9rez l'image du jour et ins\u00e9rez l\u00e0 dans le document de vos r\u00e9ponses.","title":"01 - Utilisation d\u2019un service web"},{"location":"exercices/01_utilisation_api/#exercice-01-utilisation-dun-service-web","text":"T\u00e9l\u00e9chargez le fichier suivant et inscrivez-y vos r\u00e9ponse : exercice_01.docx . Pour chaque r\u00e9ponse, vous devez aussi \u00e9crire l'url que vous avez utilis\u00e9. Une fois termin\u00e9, remettez-moi votre fichier sur Teams.","title":"Exercice 01 - Utilisation d\u2019un service web"},{"location":"exercices/01_utilisation_api/#1-bored-api","text":"\u00c0 l\u2019aide de la documentation de l\u2019api ( https://www.boredapi.com/documentation ) ex\u00e9cutez les requ\u00eates suivantes. Affichez l\u2019activit\u00e9 avec la cl\u00e9 6482790 Affichez une activit\u00e9 de type \u00ab cooking \u00bb et avec 2 participants","title":"# 1 Bored API"},{"location":"exercices/01_utilisation_api/#2-chucknorrisio","text":"\u00c0 l'aide de l'api disponible sur le site https://api.chucknorris.io/ r\u00e9pondez aux questions suivantes. Pour chacune des questions je veux avoir aussi l'url que vous avez utilis\u00e9 pour trouver la r\u00e9ponse. Combien il y a de cat\u00e9gorie au total? Combien de blagues contiennent le mot \"beer\"?","title":"# 2 Chucknorris.io"},{"location":"exercices/01_utilisation_api/#3-xkcd","text":"\u00c0 l'aide de l'api disponible sur le site https://xkcd.com/json.html r\u00e9cup\u00e9rez l'image du jour et ins\u00e9rez l\u00e0 dans le document de vos r\u00e9ponses.","title":"# 3 XKCD"},{"location":"exercices/02_revision_php/","text":"Exercice 02 - Revision PHP Cr\u00e9er un fichier nomm\u00e9 exercice02.php et ajoutez la structure de base d'un fichier HTML. Cr\u00e9er une variable qui va contenir le texte \"J'adore le PHP!!!\" et afficher le contenu de la variable dans la une balise H1. Cr\u00e9ez un tableau associatif (cl\u00e9 - valeur) avec une dizaine de valeurs \u00e0 votre choix. Ajouter un nouvel \u00e9l\u00e9ment dans le tableau dont la cl\u00e9 se nommera \"sous-tableau\". La valeur de celui-ci sera un tableau sans cl\u00e9 avec les valeurs de votre choix. Modifier la valeur du dernier \u00e9l\u00e9ment du sous-tableau que vous venez d'ajouter. Ajouter 10 \u00e9l\u00e9ments dans le tableau de l'\u00e9l\u00e9ment \"sous-tableau\" \u00e0 l'aide d'une boucle. Supprimer le dernier \u00e9l\u00e9ment du tableau de l'\u00e9l\u00e9ment \"sous-tableau\". Afficher le contenu du tableau dans la page web sous la forme d'une liste \u00e0 puces. Les valeurs du tableau de l'\u00e9l\u00e9ment \"sous-tableau\" sera une sous-liste de la premi\u00e8re. Cr\u00e9ez un deuxi\u00e8me tableau associatif et ajoutez le au premier en les \"d\u00e9ballants\". Si vous n'avez pas la bonne version de PHP vous pouvez utiliser la fonction array_merge(). Avec l'api de Random User , cr\u00e9ez une requ\u00eate GET qui retournera 50 utilisateurs al\u00e9atoire qui proviennent du Canada. Avec les fonction array_map() et array_filter() cr\u00e9ez un nouveau tableau avec uniquement les valeurs du nom, prenom, adresse courriel et nom d'usager de chacun des utilisateurs qui ont moins de 40 ans. Affichez le r\u00e9sultat dans la page HTML sous la forme d'un tableau. Convertissez le tableau obtenu au du point 11 en format json et validez le avec jsonlint . Pour r\u00e9cup\u00e9rer le r\u00e9sultat, inscrivez-le dans le fichier de log de PHP ou dans la page html. Remettez-moi le fichier exercice02.php une fois termin\u00e9 sur Teams.","title":"02 - Revision PHP"},{"location":"exercices/02_revision_php/#exercice-02-revision-php","text":"Cr\u00e9er un fichier nomm\u00e9 exercice02.php et ajoutez la structure de base d'un fichier HTML. Cr\u00e9er une variable qui va contenir le texte \"J'adore le PHP!!!\" et afficher le contenu de la variable dans la une balise H1. Cr\u00e9ez un tableau associatif (cl\u00e9 - valeur) avec une dizaine de valeurs \u00e0 votre choix. Ajouter un nouvel \u00e9l\u00e9ment dans le tableau dont la cl\u00e9 se nommera \"sous-tableau\". La valeur de celui-ci sera un tableau sans cl\u00e9 avec les valeurs de votre choix. Modifier la valeur du dernier \u00e9l\u00e9ment du sous-tableau que vous venez d'ajouter. Ajouter 10 \u00e9l\u00e9ments dans le tableau de l'\u00e9l\u00e9ment \"sous-tableau\" \u00e0 l'aide d'une boucle. Supprimer le dernier \u00e9l\u00e9ment du tableau de l'\u00e9l\u00e9ment \"sous-tableau\". Afficher le contenu du tableau dans la page web sous la forme d'une liste \u00e0 puces. Les valeurs du tableau de l'\u00e9l\u00e9ment \"sous-tableau\" sera une sous-liste de la premi\u00e8re. Cr\u00e9ez un deuxi\u00e8me tableau associatif et ajoutez le au premier en les \"d\u00e9ballants\". Si vous n'avez pas la bonne version de PHP vous pouvez utiliser la fonction array_merge(). Avec l'api de Random User , cr\u00e9ez une requ\u00eate GET qui retournera 50 utilisateurs al\u00e9atoire qui proviennent du Canada. Avec les fonction array_map() et array_filter() cr\u00e9ez un nouveau tableau avec uniquement les valeurs du nom, prenom, adresse courriel et nom d'usager de chacun des utilisateurs qui ont moins de 40 ans. Affichez le r\u00e9sultat dans la page HTML sous la forme d'un tableau. Convertissez le tableau obtenu au du point 11 en format json et validez le avec jsonlint . Pour r\u00e9cup\u00e9rer le r\u00e9sultat, inscrivez-le dans le fichier de log de PHP ou dans la page html. Remettez-moi le fichier exercice02.php une fois termin\u00e9 sur Teams.","title":"Exercice 02 - Revision PHP"},{"location":"exercices/03_hello_world_api/","text":"Exercice 03 - HelloWorldApi On va cr\u00e9er notre premi\u00e8re api en PHP avec le framework en partant d'un template github. Quoi de mieux qu'un Hello World pour commencer... Installation Devilbox Composer - https://getcomposer.org/ Description des routes M\u00e9thode Route Description GET / Message de bienvenue GET /greetings Afficher une salutation al\u00e9atoire Cr\u00e9ation du r\u00e9pertoire du projet Cr\u00e9ez un nouveau d\u00e9p\u00f4t \u00e0 partir de celui-ci : https://github.com/Services-Web-Victo/ex03-helloworldapi . Clonez le ensuite dans le r\u00e9pertoire www de devilbox et faites le n\u00e9cessaire pour que \u00e7a fonctionne. En entrant l'url de votre projet vous devriez avoir un message de bienvenue. Cr\u00e9ation de la base de donn\u00e9es et insertion des donn\u00e9es Dans le r\u00e9pertoire resources/sql roulez le fichier helloworld_insertdata.sql dans la base de donn\u00e9e Ajout des informations de connexion Modifier les informations de connexion \u00e0 la base de donn\u00e9es dans le fichier config/settings.php Point #1 Route \u00e0 ajouter M\u00e9thode Route Description GET /languages Afficher la liste de toutes les langues Ajoutez la route /languages qui va afficher la liste de toutes les langues pr\u00e9sentent dans la base de donn\u00e9es, avec le code de la langue et sa description. Ajoutez aussi le nombre de langues totales. La r\u00e9ponse devra est format\u00e9 comme suit : { \"langues\": [ { \"code\": \"de\", \"langue\": \"Allemand\" }, { \"code\": \"en\", \"langue\": \"Englais\" }, { \"code\": \"es\", \"langue\": \"Espagnol\" }, { \"code\": \"fr\", \"langue\": \"Fran\u00e7ais\" } ], \"total\": 4 } Point #2 Ajout d'un param\u00e8tre \u00e0 une route M\u00e9thode Route Description GET /greetings?language=[fr,en,es,de] Afficher une salutation al\u00e9atoire En vous servant de la route /greetings ajoutez la possibilit\u00e9 d'inclure le param\u00e8tre language pour sp\u00e9cifier dans quelle langue on veut avoir notre message. Les valeurs possibles sont : fr : Fran\u00e7ais en : Anglais es : Espagnol de : Allemand /greetings?langue=fr Vous avez la m\u00e9thode pour r\u00e9cup\u00e9rer le param\u00e8tre dans les notes de cours ici Si l'usager entre un code inexistant, le message de retour sera \"Aucune salutation trouv\u00e9e, bonjour quand-m\u00eame\" La r\u00e9ponse devra \u00eatre format\u00e9e de la fa\u00e7on suivante (la valeur de code est la donn\u00e9e extrait de la base de donn\u00e9es et non du param\u00e8tre, m\u00eame si elle est pareil): { \"code\":\"fr\", \"message\":\"Bonjour le monde\" } Point #3 Ajouter une salutation Ajoutez la route suivante qui va permettre d'ajouter une salutation dans la base de donn\u00e9es. M\u00e9thode Route Description POST /greetings Afficher une salutation al\u00e9atoire Les donn\u00e9es seront envoy\u00e9es en param\u00e8tre dans le corps de la requ\u00eate. { \"code\" : \"fr\", \"message\" : \"Ceci est mon nouveau message en fran\u00e7ais\" } Si le code de la langue n'est pas pr\u00e9sent dans la base de donn\u00e9es, annuler l'ajout et retournez le message suivant : { \"id\" : null, \"erreur\" : \"Le code de la langue est inexistant\" } Si l'ajout du message fonctionne, retournez la r\u00e9ponse suivante : { \"id\" : Le id du nouvel enregistrement, \"code\" : \"Le code de la langue du message\", \"message\" : \"Le message ajout\u00e9\" } Extrait de code pour vous aider avec le point #3 Fonction pour ajouter le message dans la base de donn\u00e9es et retourner le id /** * Ajoute un message de salutation * * @param int $langueId Le id du code de langue * @param string $message Le message \u00e0 ajouter * * @return int Le id du message ajout\u00e9 */ public function insertGreeting(int $langueId, string $message): int { $row = [ 'langue_id' => $langueId, 'message' => $message ]; $sql = \"INSERT INTO salutations SET langue_id=:langue_id, message=:message\"; $this->connection->prepare($sql)->execute($row); return (int)$this->connection->lastInsertId(); } Corrig\u00e9 Voici ma version de l'exercice : https://github.com/Services-Web-Victo/ex03-helloworldapi_final","title":"03 - Hello World API"},{"location":"exercices/03_hello_world_api/#exercice-03-helloworldapi","text":"On va cr\u00e9er notre premi\u00e8re api en PHP avec le framework en partant d'un template github. Quoi de mieux qu'un Hello World pour commencer...","title":"Exercice 03 - HelloWorldApi"},{"location":"exercices/03_hello_world_api/#installation","text":"Devilbox Composer - https://getcomposer.org/","title":"Installation"},{"location":"exercices/03_hello_world_api/#description-des-routes","text":"M\u00e9thode Route Description GET / Message de bienvenue GET /greetings Afficher une salutation al\u00e9atoire","title":"Description des routes"},{"location":"exercices/03_hello_world_api/#creation-du-repertoire-du-projet","text":"Cr\u00e9ez un nouveau d\u00e9p\u00f4t \u00e0 partir de celui-ci : https://github.com/Services-Web-Victo/ex03-helloworldapi . Clonez le ensuite dans le r\u00e9pertoire www de devilbox et faites le n\u00e9cessaire pour que \u00e7a fonctionne. En entrant l'url de votre projet vous devriez avoir un message de bienvenue.","title":"Cr\u00e9ation du r\u00e9pertoire du projet"},{"location":"exercices/03_hello_world_api/#creation-de-la-base-de-donnees-et-insertion-des-donnees","text":"Dans le r\u00e9pertoire resources/sql roulez le fichier helloworld_insertdata.sql dans la base de donn\u00e9e","title":"Cr\u00e9ation de la base de donn\u00e9es et insertion des donn\u00e9es"},{"location":"exercices/03_hello_world_api/#ajout-des-informations-de-connexion","text":"Modifier les informations de connexion \u00e0 la base de donn\u00e9es dans le fichier config/settings.php","title":"Ajout des informations de connexion"},{"location":"exercices/03_hello_world_api/#point-1-route-a-ajouter","text":"M\u00e9thode Route Description GET /languages Afficher la liste de toutes les langues Ajoutez la route /languages qui va afficher la liste de toutes les langues pr\u00e9sentent dans la base de donn\u00e9es, avec le code de la langue et sa description. Ajoutez aussi le nombre de langues totales. La r\u00e9ponse devra est format\u00e9 comme suit : { \"langues\": [ { \"code\": \"de\", \"langue\": \"Allemand\" }, { \"code\": \"en\", \"langue\": \"Englais\" }, { \"code\": \"es\", \"langue\": \"Espagnol\" }, { \"code\": \"fr\", \"langue\": \"Fran\u00e7ais\" } ], \"total\": 4 }","title":"Point #1 Route \u00e0 ajouter"},{"location":"exercices/03_hello_world_api/#point-2-ajout-dun-parametre-a-une-route","text":"M\u00e9thode Route Description GET /greetings?language=[fr,en,es,de] Afficher une salutation al\u00e9atoire En vous servant de la route /greetings ajoutez la possibilit\u00e9 d'inclure le param\u00e8tre language pour sp\u00e9cifier dans quelle langue on veut avoir notre message. Les valeurs possibles sont : fr : Fran\u00e7ais en : Anglais es : Espagnol de : Allemand /greetings?langue=fr Vous avez la m\u00e9thode pour r\u00e9cup\u00e9rer le param\u00e8tre dans les notes de cours ici Si l'usager entre un code inexistant, le message de retour sera \"Aucune salutation trouv\u00e9e, bonjour quand-m\u00eame\" La r\u00e9ponse devra \u00eatre format\u00e9e de la fa\u00e7on suivante (la valeur de code est la donn\u00e9e extrait de la base de donn\u00e9es et non du param\u00e8tre, m\u00eame si elle est pareil): { \"code\":\"fr\", \"message\":\"Bonjour le monde\" }","title":"Point #2 Ajout d'un param\u00e8tre \u00e0 une route"},{"location":"exercices/03_hello_world_api/#point-3-ajouter-une-salutation","text":"Ajoutez la route suivante qui va permettre d'ajouter une salutation dans la base de donn\u00e9es. M\u00e9thode Route Description POST /greetings Afficher une salutation al\u00e9atoire Les donn\u00e9es seront envoy\u00e9es en param\u00e8tre dans le corps de la requ\u00eate. { \"code\" : \"fr\", \"message\" : \"Ceci est mon nouveau message en fran\u00e7ais\" } Si le code de la langue n'est pas pr\u00e9sent dans la base de donn\u00e9es, annuler l'ajout et retournez le message suivant : { \"id\" : null, \"erreur\" : \"Le code de la langue est inexistant\" } Si l'ajout du message fonctionne, retournez la r\u00e9ponse suivante : { \"id\" : Le id du nouvel enregistrement, \"code\" : \"Le code de la langue du message\", \"message\" : \"Le message ajout\u00e9\" } Extrait de code pour vous aider avec le point #3 Fonction pour ajouter le message dans la base de donn\u00e9es et retourner le id /** * Ajoute un message de salutation * * @param int $langueId Le id du code de langue * @param string $message Le message \u00e0 ajouter * * @return int Le id du message ajout\u00e9 */ public function insertGreeting(int $langueId, string $message): int { $row = [ 'langue_id' => $langueId, 'message' => $message ]; $sql = \"INSERT INTO salutations SET langue_id=:langue_id, message=:message\"; $this->connection->prepare($sql)->execute($row); return (int)$this->connection->lastInsertId(); }","title":"Point #3 Ajouter une salutation"},{"location":"exercices/03_hello_world_api/#corrige","text":"Voici ma version de l'exercice : https://github.com/Services-Web-Victo/ex03-helloworldapi_final","title":"Corrig\u00e9"},{"location":"exercices/04_imdb/","text":"Exercice 04 - IMDB Pour cet exercice nous allons travailler avec les 1000 films les mieux not\u00e9s sur IMDB. M\u00eame si le sujet est assez simple, nous allons cr\u00e9er une api un peu plus \u00e9toffer gr\u00e2ce au framework SLIM . Cet exercice va \u00eatre utiliser sur plusieurs cours, on va y int\u00e9grer petit \u00e0 petit plusieurs notions essentielles, alors il est important de suivre chaque \u00e9tape et de les compl\u00e9ter. Pr\u00e9requis Devilbox, Ampps ou une autre \"stack\" incluant au minimum Apache, MySQL et PHP) - https://ampps.com/ Composer - https://getcomposer.org/ Installation Cr\u00e9ez un nouveau d\u00e9p\u00f4t \u00e0 partir de celui-ci : https://github.com/Services-Web-Victo/ex04-depart Roulez la commande composer update dans le r\u00e9pertoire de votre projet. Cr\u00e9ez le fichier config/env.php en copiant le fichier config/env.exemple.php et modifiez les informations de connexion \u00e0 la base de donn\u00e9es dans le fichier config/env.php. Roulez le script ressource/sql/insertData.sql dans la base de donn\u00e9es que vous allez utiliser pour l'exercice. Test de l'installation Vous devriez avoir acc\u00e8s maintenant aux routes suivantes. Testez les avec Postman et un navigateur pour la route de la documentation. M\u00e9thode Route Description GET / Message de bienvenue GET /docs Documentation de l'api GET /film Liste de tous les films Structure du projet /config Bootstrap.php Point d\u2019entr\u00e9e Routes.php C\u2019est ici qu\u2019on va d\u00e9finir les routes Settings.php et env.php Constantes de configuration. Par exemple les informations pour se connecter \u00e0 la bd Container.php Fonctions \u201cinject\u00e9es\u201d dans le constructeur. Middleware.php Code qui s\u2019execute automatiquement avant ou apr\u00e8s les requ\u00eates. (Authentication) /src /action Les controlleurs, un fichier par \u201caction\u201d /domain /nom_du_modele S\u00e9parer la logique application de l\u2019acc\u00e8s aux donn\u00e9es /Repository Acc\u00e8s aux donn\u00e9es /Service Logique de l\u2019api. Chaque classe doit n\u2019avoir qu\u2019une seule responsabilit\u00e9e La route appelle une classe action, ensuite le bon service est appel\u00e9. Le service va chercher les donn\u00e9es avec la classe repository correspondante. Exercices Premi\u00e8re partie - Routes Cr\u00e9ez les routes suivantes pour agr\u00e9menter la gestion de films. Voir plus bas pour le format de chaque r\u00e9ponse : M\u00e9thodes Route Description GET /film/{id} Lister seulement le film avec le id en param\u00e8tre POST /film Ajouter un film avec les informations dans le \"body\" de la requ\u00eate PUT /film/{id} Modifier un film avec le id en param\u00e8tre et les informations dans le \"body\" DELETE /film/{id} Supprimer le film avec le id en param\u00e8tre Pour chaque route, cr\u00e9ez une classe \"action\", \"service\" et \"repository\". Retourner aussi les bons codes de statut, voir la section \"Utiliser les codes de statut HTTP\" dans les bonnes pratiques. Testez ensuite vos routes avec Postman. Film \u00e0 utiliser pour l'ajout Vous pouvez utiliser les informations suivantes pour cr\u00e9er un nouveau film ( Attention : augmenter la taille de la colonne genre \u00e0 varchar(200)): { \"poster_link\": \"https://www.imdb.com/title/tt0091369/mediaviewer/rm2649548544/?ref_=tt_ov_i\", \"series_title\": \"Labyrinth\", \"released_year\": 1986, \"certificate\": \"PG\", \"runtime\": \"101 min\", \"genre\": \"Adventure, Family, Fantasy, Musical\", \"imdb_rating\": 7.3, \"overview\": \"Sixteen-year-old Sarah is given thirteen hours to solve a labyrinth and rescue her baby brother Toby when her wish for him to be taken away is granted by the Goblin King Jareth.\", \"meta_score\": 50, \"director\": \"Jim Henson\", \"star1\": \"David Bowie\", \"star2\": \"Jennifer Connelly\", \"star3\": \"Toby Froud\", \"star4\": \"Shelley Thompson\", \"no_of_votes\": 140392, \"gross\": \"13,915,874\" } Format des r\u00e9ponses Pour les 4 routes \u00e0 ajouter, on va retourner l'objet \"film\" au complet apr\u00e8s l'op\u00e9ration faite. (ex. le film apr\u00e8s la modification, le film qui vient d'\u00eatre supprim\u00e9, etc.) { \"id\": 1001, \"poster_link\": \"https://m.media-amazon.com/images/M/MV5BMDFkYTc0MGEtZmNhMC00ZDIzLWFmNTEtODM1ZmRlYWMwMWFmXkEyXkFqcGdeQXVyMTMxODk2OTU@._V1_UX67_CR0,0,67,98_AL_.jpg\", \"series_title\": \"The Shawshank Redemption\", \"released_year\": 1994, \"certificate\": \"A\", \"runtime\": \"142 min\", \"genre\": \"Drama\", \"imdb_rating\": 9.3, \"overview\": \"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.\", \"meta_score\": 80, \"director\": \"Frank Darabont\", \"star1\": \"Tim Robbins\", \"star2\": \"Morgan Freeman\", \"star3\": \"Bob Gunton\", \"star4\": \"William Sadler\", \"no_of_votes\": 2343110, \"gross\": \"28,341,469\" } Deuxi\u00e8me partie - Filtre et pagination \u00c0 l'aide des notes de cours sur les bonnes pratiques de conception d'un api, ajouter les options de filtre et de pagination pour la route GET /film qui affiche la liste de tous les livres. Le filtre se fera sur la colonne genre de la table imdb_top, ex /film?genre=Fantasy Pour la pagination, l'usager ne pourra que choisir la page \u00e0 afficher. Par d\u00e9faut on va afficher 50 films par page et si aucun num\u00e9ro de page n'est fournis, on va afficher la page 1. Ex: /film?page=2 Bien sur on va pouvoir combiner les deux param\u00e8tres comme ceci : /film?genre=Fantasy&page=1 Modifiez la r\u00e9ponse pour y ajouter les informations suivantes : genre : La valeur qu'on a pass\u00e9 en param\u00e8tre, si aucune laisser vide \"genre\" : \"\", nombreFilms : Le nombre total de films selon le filtre appliqu\u00e9. page : La valeur du param\u00e8tre, si aucun inscrire 1. totalPage : Le nombre de pages au total, le nombre de films total divis\u00e9 par le nombre de film par page (50) arrondis \u00e0 l'entier sup\u00e9rieur. { \"movies\" : [ { ... }, { ... } ], \"genre\" : \"Fantasy\", \"nombreFilmsTotal\" : 66, \"page\" : 1, \"totalPage\" : 2 } Pour d\u00e9couper le r\u00e9sultat en page, vous pouvez utiliser LIMIT et OFFSET dans la requ\u00eate SQL ou bien array_slice sur le tableau de r\u00e9sultat de la requ\u00eate qui aurait d\u00e9j\u00e0 filtr\u00e9 les films. (Vous faites une requ\u00eate qui filtre les films selon le genre et ensuite utilisez array_slice sur le r\u00e9sultat en PHP). Troisi\u00e8me partie - Utilisation de Monolog \u00c0 l'aide des notes de cours sur l'utilisation de Monolog, faites en sorte qu'\u00e0 chaque fois qu'on supprime un film, un message d'\u00e9v\u00e9nement s'inscrit dans un fichier de log avec les configurations suivantes : Nom du fichier de log : MoviesLog Identification du message : deleteMovie Niveau de s\u00e9v\u00e9rit\u00e9 : INFO Message : \"Le film \" titre_du_film \" id [ id_du_film ] a \u00e9t\u00e9 supprim\u00e9.\" Exemple de r\u00e9sultat [2022-02-11T06:43:08.169802+01:00] deleteMovie.INFO: Le film \"Labyrinth\" id [1001] a \u00e9t\u00e9 supprim\u00e9. Quatri\u00e8me partie - Documentation Cr\u00e9ez la documentation pour les routes d\u00e9j\u00e0 existantes. \u00c0 partir de maintenant, pour chaque route que nous allons ajouter, on va cr\u00e9er en m\u00eame temps la documentation. Renommez le fichier de documentation resources/docs/base_slim_skeleton_v1.yaml pour imdb_api.yaml . C'est dans ce fichier que vous allez \u00e9crire la documentation. Il y a d\u00e9j\u00e0 du code dans se fichier que j'ai laiss\u00e9 en exemple. Vous pourrez le supprimer quand il ne vous sera plus n\u00e9cessaire. Modifiez le code du fichier src/Action/Docs/SwaggerUiAction.php pour que la variable $yamlFile fasse r\u00e9f\u00e9rence \u00e0 votre fichier renomm\u00e9. En vous inspirant de ce qui est d\u00e9j\u00e0 pr\u00e9sent dans le fichier de documentation et du site swagger.io, r\u00e9digez la documentation pour les 4 routes que vous avez cr\u00e9\u00e9 dans la premi\u00e8re partie. Une fois termin\u00e9 elle devrait apparaitre dans la page affich\u00e9 quand vous utilisez la route /docs Cinqui\u00e8me partie - Middleware Faites le n\u00e9cessaire pour qu'\u00e0 chaque requ\u00eate HTTP vers votre projet, les informations suivantes soient inscrite dans un fichier de log (utilisez le nom de fichier que vous voulez): L'identificateur de la ligne sera RouteLogMiddleware Le niveau de s\u00e9v\u00e9rit\u00e9 est INFO Ensuite ajoutez la m\u00e9thode HTTP (GET, POST, PUT, PATCH, DELETE) utilis\u00e9e Suivra le nom de la route, les param\u00e8tres de la section \"query\" s'il y en a et le contenu du body Attention, l'appel \u00e0 votre middleware doit se faire avant la ligne $app->addBodyParsingMiddleware(); dans le fichier config\\middleware.php Exemple [2023-03-01T21:08:01.186402+01:00] RouteLogMiddleware.INFO: [200] GET / [2023-03-01T21:08:05.876724+01:00] RouteLogMiddleware.INFO: [200] GET /film/1074 [2023-03-01T21:08:09.243410+01:00] RouteLogMiddleware.INFO: [200] GET /film?page=1&genre=Romance,Comedy [2023-03-01T21:08:28.284023+01:00] RouteLogMiddleware.INFO: [200] PUT /film/2024 {\"poster_link\":\"https:\\/\\/www.imdb.com\\/title\\/tt0091369\\/mediaviewer\\/rm2649548544\\/?ref_=tt_ov_i\",\"series_title\":\"Labyrinth 2 - Return of the Goblin King\",\"released_year\":1986,\"certificate\":\"PG\",\"runtime\":\"101 min\",\"genre\":\"Adventure, Family, Fantasy, Musical\",\"imdb_rating\":7.3,\"overview\":\"Sixteen-year-old Sarah is given thirteen hours to solve a labyrinth and rescue her baby brother Toby when her wish for him to be taken away is granted by the Goblin King Jareth.\",\"meta_score\":50,\"director\":\"Jim Henson\",\"star1\":\"David Bowie\",\"star2\":\"Jennifer Connelly\",\"star3\":\"Toby Froud\",\"star4\":\"Shelley Thompson\",\"no_of_votes\":140392,\"gross\":\"13,915,874\"} Quelques pistes de solution Cr\u00e9er un fichier php dans le r\u00e9pertoire src/Middleware qui contiendra votre code Invoquer cette classe au niveau de l'application Dans votre classe \"middleware\", n'oubliez pas d'inclure un constructeur qui va initialiser le \"LoggerFactory\" La structure de la fonction __invoke() de la classe devrait ressembler \u00e0 ceci : public function __invoke( Request $request, RequestHandler $handler): Response { // Cette ligne ex\u00e9cute la requ\u00eate $response = $handler->handle($request); // Votre code pour r\u00e9cup\u00e9rer les informations ... // Vous logger ensuite les informations dans le fichier de log return $response; } Les informations qu'on peut r\u00e9cup\u00e9rer de la requ\u00eate (m\u00e9thode HTTP, uri, contenu du \"body\") et de la r\u00e9ponse (code de statut) https://www.slimframework.com/docs/v4/objects/request.html https://www.slimframework.com/docs/v4/objects/response.html Pour que le contenu de la requ\u00eate soit affich\u00e9, vous devez l'encoder en json avant de l'ajouter dans le log : $contenuRequete = json_encode($request->getParsedBody()); Corrig\u00e9 Vous pouvez consulter ma version de l'exercice ici : https://github.com/Services-Web-Victo/ex04-corrige . Je vais la mettre \u00e0 jour au fil des cours.","title":"04 - IMDB API"},{"location":"exercices/04_imdb/#exercice-04-imdb","text":"Pour cet exercice nous allons travailler avec les 1000 films les mieux not\u00e9s sur IMDB. M\u00eame si le sujet est assez simple, nous allons cr\u00e9er une api un peu plus \u00e9toffer gr\u00e2ce au framework SLIM . Cet exercice va \u00eatre utiliser sur plusieurs cours, on va y int\u00e9grer petit \u00e0 petit plusieurs notions essentielles, alors il est important de suivre chaque \u00e9tape et de les compl\u00e9ter.","title":"Exercice 04 - IMDB"},{"location":"exercices/04_imdb/#prerequis","text":"Devilbox, Ampps ou une autre \"stack\" incluant au minimum Apache, MySQL et PHP) - https://ampps.com/ Composer - https://getcomposer.org/","title":"Pr\u00e9requis"},{"location":"exercices/04_imdb/#installation","text":"Cr\u00e9ez un nouveau d\u00e9p\u00f4t \u00e0 partir de celui-ci : https://github.com/Services-Web-Victo/ex04-depart Roulez la commande composer update dans le r\u00e9pertoire de votre projet. Cr\u00e9ez le fichier config/env.php en copiant le fichier config/env.exemple.php et modifiez les informations de connexion \u00e0 la base de donn\u00e9es dans le fichier config/env.php. Roulez le script ressource/sql/insertData.sql dans la base de donn\u00e9es que vous allez utiliser pour l'exercice.","title":"Installation"},{"location":"exercices/04_imdb/#test-de-linstallation","text":"Vous devriez avoir acc\u00e8s maintenant aux routes suivantes. Testez les avec Postman et un navigateur pour la route de la documentation. M\u00e9thode Route Description GET / Message de bienvenue GET /docs Documentation de l'api GET /film Liste de tous les films","title":"Test de l'installation"},{"location":"exercices/04_imdb/#structure-du-projet","text":"/config Bootstrap.php Point d\u2019entr\u00e9e Routes.php C\u2019est ici qu\u2019on va d\u00e9finir les routes Settings.php et env.php Constantes de configuration. Par exemple les informations pour se connecter \u00e0 la bd Container.php Fonctions \u201cinject\u00e9es\u201d dans le constructeur. Middleware.php Code qui s\u2019execute automatiquement avant ou apr\u00e8s les requ\u00eates. (Authentication) /src /action Les controlleurs, un fichier par \u201caction\u201d /domain /nom_du_modele S\u00e9parer la logique application de l\u2019acc\u00e8s aux donn\u00e9es /Repository Acc\u00e8s aux donn\u00e9es /Service Logique de l\u2019api. Chaque classe doit n\u2019avoir qu\u2019une seule responsabilit\u00e9e La route appelle une classe action, ensuite le bon service est appel\u00e9. Le service va chercher les donn\u00e9es avec la classe repository correspondante.","title":"Structure du projet"},{"location":"exercices/04_imdb/#exercices","text":"","title":"Exercices"},{"location":"exercices/04_imdb/#premiere-partie-routes","text":"Cr\u00e9ez les routes suivantes pour agr\u00e9menter la gestion de films. Voir plus bas pour le format de chaque r\u00e9ponse : M\u00e9thodes Route Description GET /film/{id} Lister seulement le film avec le id en param\u00e8tre POST /film Ajouter un film avec les informations dans le \"body\" de la requ\u00eate PUT /film/{id} Modifier un film avec le id en param\u00e8tre et les informations dans le \"body\" DELETE /film/{id} Supprimer le film avec le id en param\u00e8tre Pour chaque route, cr\u00e9ez une classe \"action\", \"service\" et \"repository\". Retourner aussi les bons codes de statut, voir la section \"Utiliser les codes de statut HTTP\" dans les bonnes pratiques. Testez ensuite vos routes avec Postman. Film \u00e0 utiliser pour l'ajout Vous pouvez utiliser les informations suivantes pour cr\u00e9er un nouveau film ( Attention : augmenter la taille de la colonne genre \u00e0 varchar(200)): { \"poster_link\": \"https://www.imdb.com/title/tt0091369/mediaviewer/rm2649548544/?ref_=tt_ov_i\", \"series_title\": \"Labyrinth\", \"released_year\": 1986, \"certificate\": \"PG\", \"runtime\": \"101 min\", \"genre\": \"Adventure, Family, Fantasy, Musical\", \"imdb_rating\": 7.3, \"overview\": \"Sixteen-year-old Sarah is given thirteen hours to solve a labyrinth and rescue her baby brother Toby when her wish for him to be taken away is granted by the Goblin King Jareth.\", \"meta_score\": 50, \"director\": \"Jim Henson\", \"star1\": \"David Bowie\", \"star2\": \"Jennifer Connelly\", \"star3\": \"Toby Froud\", \"star4\": \"Shelley Thompson\", \"no_of_votes\": 140392, \"gross\": \"13,915,874\" } Format des r\u00e9ponses Pour les 4 routes \u00e0 ajouter, on va retourner l'objet \"film\" au complet apr\u00e8s l'op\u00e9ration faite. (ex. le film apr\u00e8s la modification, le film qui vient d'\u00eatre supprim\u00e9, etc.) { \"id\": 1001, \"poster_link\": \"https://m.media-amazon.com/images/M/MV5BMDFkYTc0MGEtZmNhMC00ZDIzLWFmNTEtODM1ZmRlYWMwMWFmXkEyXkFqcGdeQXVyMTMxODk2OTU@._V1_UX67_CR0,0,67,98_AL_.jpg\", \"series_title\": \"The Shawshank Redemption\", \"released_year\": 1994, \"certificate\": \"A\", \"runtime\": \"142 min\", \"genre\": \"Drama\", \"imdb_rating\": 9.3, \"overview\": \"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.\", \"meta_score\": 80, \"director\": \"Frank Darabont\", \"star1\": \"Tim Robbins\", \"star2\": \"Morgan Freeman\", \"star3\": \"Bob Gunton\", \"star4\": \"William Sadler\", \"no_of_votes\": 2343110, \"gross\": \"28,341,469\" }","title":"Premi\u00e8re partie - Routes"},{"location":"exercices/04_imdb/#deuxieme-partie-filtre-et-pagination","text":"\u00c0 l'aide des notes de cours sur les bonnes pratiques de conception d'un api, ajouter les options de filtre et de pagination pour la route GET /film qui affiche la liste de tous les livres. Le filtre se fera sur la colonne genre de la table imdb_top, ex /film?genre=Fantasy Pour la pagination, l'usager ne pourra que choisir la page \u00e0 afficher. Par d\u00e9faut on va afficher 50 films par page et si aucun num\u00e9ro de page n'est fournis, on va afficher la page 1. Ex: /film?page=2 Bien sur on va pouvoir combiner les deux param\u00e8tres comme ceci : /film?genre=Fantasy&page=1 Modifiez la r\u00e9ponse pour y ajouter les informations suivantes : genre : La valeur qu'on a pass\u00e9 en param\u00e8tre, si aucune laisser vide \"genre\" : \"\", nombreFilms : Le nombre total de films selon le filtre appliqu\u00e9. page : La valeur du param\u00e8tre, si aucun inscrire 1. totalPage : Le nombre de pages au total, le nombre de films total divis\u00e9 par le nombre de film par page (50) arrondis \u00e0 l'entier sup\u00e9rieur. { \"movies\" : [ { ... }, { ... } ], \"genre\" : \"Fantasy\", \"nombreFilmsTotal\" : 66, \"page\" : 1, \"totalPage\" : 2 } Pour d\u00e9couper le r\u00e9sultat en page, vous pouvez utiliser LIMIT et OFFSET dans la requ\u00eate SQL ou bien array_slice sur le tableau de r\u00e9sultat de la requ\u00eate qui aurait d\u00e9j\u00e0 filtr\u00e9 les films. (Vous faites une requ\u00eate qui filtre les films selon le genre et ensuite utilisez array_slice sur le r\u00e9sultat en PHP).","title":"Deuxi\u00e8me partie - Filtre et pagination"},{"location":"exercices/04_imdb/#troisieme-partie-utilisation-de-monolog","text":"\u00c0 l'aide des notes de cours sur l'utilisation de Monolog, faites en sorte qu'\u00e0 chaque fois qu'on supprime un film, un message d'\u00e9v\u00e9nement s'inscrit dans un fichier de log avec les configurations suivantes : Nom du fichier de log : MoviesLog Identification du message : deleteMovie Niveau de s\u00e9v\u00e9rit\u00e9 : INFO Message : \"Le film \" titre_du_film \" id [ id_du_film ] a \u00e9t\u00e9 supprim\u00e9.\" Exemple de r\u00e9sultat [2022-02-11T06:43:08.169802+01:00] deleteMovie.INFO: Le film \"Labyrinth\" id [1001] a \u00e9t\u00e9 supprim\u00e9.","title":"Troisi\u00e8me partie - Utilisation de Monolog"},{"location":"exercices/04_imdb/#quatrieme-partie-documentation","text":"Cr\u00e9ez la documentation pour les routes d\u00e9j\u00e0 existantes. \u00c0 partir de maintenant, pour chaque route que nous allons ajouter, on va cr\u00e9er en m\u00eame temps la documentation. Renommez le fichier de documentation resources/docs/base_slim_skeleton_v1.yaml pour imdb_api.yaml . C'est dans ce fichier que vous allez \u00e9crire la documentation. Il y a d\u00e9j\u00e0 du code dans se fichier que j'ai laiss\u00e9 en exemple. Vous pourrez le supprimer quand il ne vous sera plus n\u00e9cessaire. Modifiez le code du fichier src/Action/Docs/SwaggerUiAction.php pour que la variable $yamlFile fasse r\u00e9f\u00e9rence \u00e0 votre fichier renomm\u00e9. En vous inspirant de ce qui est d\u00e9j\u00e0 pr\u00e9sent dans le fichier de documentation et du site swagger.io, r\u00e9digez la documentation pour les 4 routes que vous avez cr\u00e9\u00e9 dans la premi\u00e8re partie. Une fois termin\u00e9 elle devrait apparaitre dans la page affich\u00e9 quand vous utilisez la route /docs","title":"Quatri\u00e8me partie - Documentation"},{"location":"exercices/04_imdb/#cinquieme-partie-middleware","text":"Faites le n\u00e9cessaire pour qu'\u00e0 chaque requ\u00eate HTTP vers votre projet, les informations suivantes soient inscrite dans un fichier de log (utilisez le nom de fichier que vous voulez): L'identificateur de la ligne sera RouteLogMiddleware Le niveau de s\u00e9v\u00e9rit\u00e9 est INFO Ensuite ajoutez la m\u00e9thode HTTP (GET, POST, PUT, PATCH, DELETE) utilis\u00e9e Suivra le nom de la route, les param\u00e8tres de la section \"query\" s'il y en a et le contenu du body Attention, l'appel \u00e0 votre middleware doit se faire avant la ligne $app->addBodyParsingMiddleware(); dans le fichier config\\middleware.php Exemple [2023-03-01T21:08:01.186402+01:00] RouteLogMiddleware.INFO: [200] GET / [2023-03-01T21:08:05.876724+01:00] RouteLogMiddleware.INFO: [200] GET /film/1074 [2023-03-01T21:08:09.243410+01:00] RouteLogMiddleware.INFO: [200] GET /film?page=1&genre=Romance,Comedy [2023-03-01T21:08:28.284023+01:00] RouteLogMiddleware.INFO: [200] PUT /film/2024 {\"poster_link\":\"https:\\/\\/www.imdb.com\\/title\\/tt0091369\\/mediaviewer\\/rm2649548544\\/?ref_=tt_ov_i\",\"series_title\":\"Labyrinth 2 - Return of the Goblin King\",\"released_year\":1986,\"certificate\":\"PG\",\"runtime\":\"101 min\",\"genre\":\"Adventure, Family, Fantasy, Musical\",\"imdb_rating\":7.3,\"overview\":\"Sixteen-year-old Sarah is given thirteen hours to solve a labyrinth and rescue her baby brother Toby when her wish for him to be taken away is granted by the Goblin King Jareth.\",\"meta_score\":50,\"director\":\"Jim Henson\",\"star1\":\"David Bowie\",\"star2\":\"Jennifer Connelly\",\"star3\":\"Toby Froud\",\"star4\":\"Shelley Thompson\",\"no_of_votes\":140392,\"gross\":\"13,915,874\"} Quelques pistes de solution Cr\u00e9er un fichier php dans le r\u00e9pertoire src/Middleware qui contiendra votre code Invoquer cette classe au niveau de l'application Dans votre classe \"middleware\", n'oubliez pas d'inclure un constructeur qui va initialiser le \"LoggerFactory\" La structure de la fonction __invoke() de la classe devrait ressembler \u00e0 ceci : public function __invoke( Request $request, RequestHandler $handler): Response { // Cette ligne ex\u00e9cute la requ\u00eate $response = $handler->handle($request); // Votre code pour r\u00e9cup\u00e9rer les informations ... // Vous logger ensuite les informations dans le fichier de log return $response; } Les informations qu'on peut r\u00e9cup\u00e9rer de la requ\u00eate (m\u00e9thode HTTP, uri, contenu du \"body\") et de la r\u00e9ponse (code de statut) https://www.slimframework.com/docs/v4/objects/request.html https://www.slimframework.com/docs/v4/objects/response.html Pour que le contenu de la requ\u00eate soit affich\u00e9, vous devez l'encoder en json avant de l'ajouter dans le log : $contenuRequete = json_encode($request->getParsedBody());","title":"Cinqui\u00e8me partie - Middleware"},{"location":"exercices/04_imdb/#corrige","text":"Vous pouvez consulter ma version de l'exercice ici : https://github.com/Services-Web-Victo/ex04-corrige . Je vais la mettre \u00e0 jour au fil des cours.","title":"Corrig\u00e9"},{"location":"exercices/05_apikey/","text":"Exercice 05 - S\u00e9curit\u00e9 avec cl\u00e9 API Pour cet exercice, utilisez l'api que vous avez cr\u00e9\u00e9 \u00e0 l'exercice 4. Vous allez impl\u00e9menter une protection de sorte que pour certaines routes de votre api l'utilisateur devra inclure une cl\u00e9 api valide. Modification \u00e0 la base de donn\u00e9es Dans le but de nous simplifier le d\u00e9veloppement, on va prendre pour acquis qu'il y a d\u00e9j\u00e0 un syst\u00e8me de cr\u00e9ation d'usager en place. Cr\u00e9ez une nouvelle table dans la base de donn\u00e9es nommm\u00e9e users avec les champs suivants : champs description id La cl\u00e9 primaire code Le code d'usager, une adresse courriel, doit \u00eatre UNIQUE non nulle password Le mot de passe hash\u00e9 (voir plus bas) un champ texte d'au moins 256 caract\u00e8res non nulle api_key Un champ texte d'au moins 256 caract\u00e8res qui peut \u00eatre nulle mais doit \u00eatre UNIQUE. Ajoutez quelques usagers dans votre table en vous servant de l'extrait de code suivant pour \"hash\u00e9\" le mot de passe et g\u00e9n\u00e9rer le script d'insertion SQL : <?php // Le nom de votre table usager $nomTable = \"users\"; // Liste des usagers \u00e0 ajouter $users = [ [\"code\" => \"frechette.mathieu@cegepvicto.ca\", \"password\" => \"qwerty\"], [\"code\" => \"math.frechette@gmail.com\", \"password\" => \"1234\"], ]; $scriptSQL = \"INSERT INTO $nomTable(code, password, api_key) VALUES \"; foreach($users as $user) { $scriptSQL .= \"('\" . $user['code'] . \"', '\" . password_hash($user['password'], PASSWORD_DEFAULT) . \"', null),\"; } echo substr($scriptSQL, 0, -1) . \";\"; Je vous conseille de rouler ce code dans un \u00e9diteur de code PHP en ligne tel que https://onlinephp.io/ pour r\u00e9cup\u00e9rer facilement le r\u00e9sultat. Ajout d'une route pour obtenir une cl\u00e9 api Maintenant qu'on a une table dans la base de donn\u00e9es avec une liste d'usager, on va cr\u00e9er une nouvelle route qui va permettre \u00e0 un usager de demander une cl\u00e9 api. M\u00e9thode Route DEscription GET /cle?nouvelle=true Retourne la cl\u00e9 api de l'usager. S'il n'y en a pas de cr\u00e9\u00e9, en g\u00e9n\u00e8re une. Si le param\u00e8tre \"nouvelle\" est ajout\u00e9 et est \u00e9gale \u00e0 1, g\u00e9n\u00e8re une nouvelle cl\u00e9 m\u00eame s'il y en a d\u00e9j\u00e0 une. Les informations de l'usager (nom d'usager et mot de passe) doivent \u00eatre incluses dans l'ent\u00eate de la requ\u00eate sous le format d'une authentification basique.(Voir les notes de cours sur les authentifications HTTP). Veillez \u00e0 encoder les informations en base64. (Regardez la fonction base64_encode en PHP) Encore une fois servez-vous d'un \u00e9diteur de PHP en ligne pour g\u00e9n\u00e9rer votre jeton encod\u00e9. Quand on g\u00e9n\u00e8re une cl\u00e9, on va l'enregistrer dans la table users \u00e0 la colonne api_key . Pour le format de la cl\u00e9, \u00e0 vous de choisir la fa\u00e7on dont vous allez la g\u00e9n\u00e9rer. Je vous rappelle parcontre qu'elle doit \u00eatre unique. Si la cl\u00e9 est cr\u00e9\u00e9 ou bien simplement affich\u00e9e, retournez le code de statut 200. Par contre si l'usager et/ou le mot de passe est invalide, retournez le code 403 et aucune r\u00e9ponse. La r\u00e9ponse en cas de succ\u00e8s sera la suivante: { \"api_key\" : \"la_valeur_de_ma_cle\" } Protection des routes par un middleware Cr\u00e9ez un middleware qui va s'assurer que la cl\u00e9 api qu'on envoie avec la requ\u00eate est valide. Dans votre api, toute les routes devront \u00eatre prot\u00e9g\u00e9 par le middleware \u00e0 l'exception de la route qui permet d'obtenir une cl\u00e9 que vous venez de cr\u00e9er. La cl\u00e9 devra \u00eatre incluse dans l'ent\u00eate de la requ\u00eate sous le format suivant : Authorization : api_key la_valeur_de_ma_cle Validez simplement que la cl\u00e9 existe bien dans la table users de la base de donn\u00e9es. Si la cl\u00e9 existe, laisser passer la requ\u00eate. Sinon, retourne le code de statut 403 et la r\u00e9ponse suivante : { \"erreur\" : \"La cl\u00e9 est invalide. Acc\u00e8s non autoris\u00e9\" } Limiter le nombre de requ\u00eates (optionnel) Mettez en place un syst\u00e8me pour limiter le nombre de requ\u00eates par jour et par cl\u00e9 api. Si l'usager d\u00e9passe le nombre de requ\u00eates permise, retourner un message d'erreur avec le code de statut 403. La validation se fera uniquement sur les routes GET /film et GET /film/{id} .","title":"05 - S\u00e9curit\u00e9 avec cl\u00e9 API"},{"location":"exercices/05_apikey/#exercice-05-securite-avec-cle-api","text":"Pour cet exercice, utilisez l'api que vous avez cr\u00e9\u00e9 \u00e0 l'exercice 4. Vous allez impl\u00e9menter une protection de sorte que pour certaines routes de votre api l'utilisateur devra inclure une cl\u00e9 api valide.","title":"Exercice 05 - S\u00e9curit\u00e9 avec cl\u00e9 API"},{"location":"exercices/05_apikey/#modification-a-la-base-de-donnees","text":"Dans le but de nous simplifier le d\u00e9veloppement, on va prendre pour acquis qu'il y a d\u00e9j\u00e0 un syst\u00e8me de cr\u00e9ation d'usager en place. Cr\u00e9ez une nouvelle table dans la base de donn\u00e9es nommm\u00e9e users avec les champs suivants : champs description id La cl\u00e9 primaire code Le code d'usager, une adresse courriel, doit \u00eatre UNIQUE non nulle password Le mot de passe hash\u00e9 (voir plus bas) un champ texte d'au moins 256 caract\u00e8res non nulle api_key Un champ texte d'au moins 256 caract\u00e8res qui peut \u00eatre nulle mais doit \u00eatre UNIQUE. Ajoutez quelques usagers dans votre table en vous servant de l'extrait de code suivant pour \"hash\u00e9\" le mot de passe et g\u00e9n\u00e9rer le script d'insertion SQL : <?php // Le nom de votre table usager $nomTable = \"users\"; // Liste des usagers \u00e0 ajouter $users = [ [\"code\" => \"frechette.mathieu@cegepvicto.ca\", \"password\" => \"qwerty\"], [\"code\" => \"math.frechette@gmail.com\", \"password\" => \"1234\"], ]; $scriptSQL = \"INSERT INTO $nomTable(code, password, api_key) VALUES \"; foreach($users as $user) { $scriptSQL .= \"('\" . $user['code'] . \"', '\" . password_hash($user['password'], PASSWORD_DEFAULT) . \"', null),\"; } echo substr($scriptSQL, 0, -1) . \";\"; Je vous conseille de rouler ce code dans un \u00e9diteur de code PHP en ligne tel que https://onlinephp.io/ pour r\u00e9cup\u00e9rer facilement le r\u00e9sultat.","title":"Modification \u00e0 la base de donn\u00e9es"},{"location":"exercices/05_apikey/#ajout-dune-route-pour-obtenir-une-cle-api","text":"Maintenant qu'on a une table dans la base de donn\u00e9es avec une liste d'usager, on va cr\u00e9er une nouvelle route qui va permettre \u00e0 un usager de demander une cl\u00e9 api. M\u00e9thode Route DEscription GET /cle?nouvelle=true Retourne la cl\u00e9 api de l'usager. S'il n'y en a pas de cr\u00e9\u00e9, en g\u00e9n\u00e8re une. Si le param\u00e8tre \"nouvelle\" est ajout\u00e9 et est \u00e9gale \u00e0 1, g\u00e9n\u00e8re une nouvelle cl\u00e9 m\u00eame s'il y en a d\u00e9j\u00e0 une. Les informations de l'usager (nom d'usager et mot de passe) doivent \u00eatre incluses dans l'ent\u00eate de la requ\u00eate sous le format d'une authentification basique.(Voir les notes de cours sur les authentifications HTTP). Veillez \u00e0 encoder les informations en base64. (Regardez la fonction base64_encode en PHP) Encore une fois servez-vous d'un \u00e9diteur de PHP en ligne pour g\u00e9n\u00e9rer votre jeton encod\u00e9. Quand on g\u00e9n\u00e8re une cl\u00e9, on va l'enregistrer dans la table users \u00e0 la colonne api_key . Pour le format de la cl\u00e9, \u00e0 vous de choisir la fa\u00e7on dont vous allez la g\u00e9n\u00e9rer. Je vous rappelle parcontre qu'elle doit \u00eatre unique. Si la cl\u00e9 est cr\u00e9\u00e9 ou bien simplement affich\u00e9e, retournez le code de statut 200. Par contre si l'usager et/ou le mot de passe est invalide, retournez le code 403 et aucune r\u00e9ponse. La r\u00e9ponse en cas de succ\u00e8s sera la suivante: { \"api_key\" : \"la_valeur_de_ma_cle\" }","title":"Ajout d'une route pour obtenir une cl\u00e9 api"},{"location":"exercices/05_apikey/#protection-des-routes-par-un-middleware","text":"Cr\u00e9ez un middleware qui va s'assurer que la cl\u00e9 api qu'on envoie avec la requ\u00eate est valide. Dans votre api, toute les routes devront \u00eatre prot\u00e9g\u00e9 par le middleware \u00e0 l'exception de la route qui permet d'obtenir une cl\u00e9 que vous venez de cr\u00e9er. La cl\u00e9 devra \u00eatre incluse dans l'ent\u00eate de la requ\u00eate sous le format suivant : Authorization : api_key la_valeur_de_ma_cle Validez simplement que la cl\u00e9 existe bien dans la table users de la base de donn\u00e9es. Si la cl\u00e9 existe, laisser passer la requ\u00eate. Sinon, retourne le code de statut 403 et la r\u00e9ponse suivante : { \"erreur\" : \"La cl\u00e9 est invalide. Acc\u00e8s non autoris\u00e9\" }","title":"Protection des routes par un middleware"},{"location":"exercices/05_apikey/#limiter-le-nombre-de-requetes-optionnel","text":"Mettez en place un syst\u00e8me pour limiter le nombre de requ\u00eates par jour et par cl\u00e9 api. Si l'usager d\u00e9passe le nombre de requ\u00eates permise, retourner un message d'erreur avec le code de statut 403. La validation se fera uniquement sur les routes GET /film et GET /film/{id} .","title":"Limiter le nombre de requ\u00eates (optionnel)"},{"location":"exercices/06_react_component/","text":"Exercice 06 - Composants et props Installation Cr\u00e9er un nouveau projet React nomm\u00e9 mybooks (en minuscule). Remplacez le code du fichier App.js par celui-ci import logo from './logo.svg'; import './App.css'; import React from 'react'; class App extends React.Component { render(){ return ( <div className=\"App\"> <header className=\"App-header\"> <h1>MyBooks</h1> <h3>Liste des livres</h3> <table className=\"BooksTable\"> <thead> <tr> <th>id</th> <th>Titre</th> </tr> </thead> <tbody> <tr> <td>1</td> <td>Fondation</td> </tr> <tr> <td>2</td> <td>Les montagnes hallucin\u00c3\u00a9es</td> </tr> <tr> <td>3</td> <td>Blade Runner</td> </tr> </tbody> </table> </header> </div> ); } } export default (App); Au d\u00e9but de la fonction render() de la classe App, ajoutez le tableau suivant d'objets \"livre\". const books = [ {id:1, titre:'Fondation'}, {id:2, titre:'Les montagnes hallucin\u00e9es'}, {id:3, titre:'Blade Runner'} ]; Ajoutez les lignes suivante \u00e0 la fin du fichier App.css .BooksTable th, .BooksTable td { text-align: left; padding-right: 15px; } Maintenant lancer l'application avec la commande npm start et vous devriez avoir ce r\u00e9sultat \u00c0 faire ensuite Cr\u00e9ez les composantes suivantes dans des fichiers s\u00e9par\u00e9s situ\u00e9s dans le r\u00e9pertoire src/components Une composante Titre qui va remplacer la balise <h3> dans le fichier App.js . Elle recevra un param\u00e8tre texte qui sera le texte \u00e0 afficher. La composante retournera une balise <h3> avec la valeur du param\u00e8tre re\u00e7u. Une composante nomm\u00e9e Tableau . Cette composante va remplacer la balise <table> dans le fichier App.js . Elle recevra un param\u00e8tre livres qui est le tableau de livres qu\u2019on a d\u00e9fini plus haut. Elle va retourner le code html pour afficher le tableau. Une composante LigneTableau . Cette composante va \u00eatre utilis\u00e9 dans la composante Tableau pour afficher une ligne du tableau. Elle recevra un param\u00e8tre livre qui repr\u00e9sente un objet du tableau livres. Elle va retourner le code html pour afficher un ligne du tableau (une balise <tr> et son contenu) avec les valeurs re\u00e7ues en param\u00e8tres. Modifiez le fichier App.js pour utiliser les composantes cr\u00e9\u00e9s.","title":"06 - Premier projet React"},{"location":"exercices/06_react_component/#exercice-06-composants-et-props","text":"","title":"Exercice 06 - Composants et props"},{"location":"exercices/06_react_component/#installation","text":"Cr\u00e9er un nouveau projet React nomm\u00e9 mybooks (en minuscule). Remplacez le code du fichier App.js par celui-ci import logo from './logo.svg'; import './App.css'; import React from 'react'; class App extends React.Component { render(){ return ( <div className=\"App\"> <header className=\"App-header\"> <h1>MyBooks</h1> <h3>Liste des livres</h3> <table className=\"BooksTable\"> <thead> <tr> <th>id</th> <th>Titre</th> </tr> </thead> <tbody> <tr> <td>1</td> <td>Fondation</td> </tr> <tr> <td>2</td> <td>Les montagnes hallucin\u00c3\u00a9es</td> </tr> <tr> <td>3</td> <td>Blade Runner</td> </tr> </tbody> </table> </header> </div> ); } } export default (App); Au d\u00e9but de la fonction render() de la classe App, ajoutez le tableau suivant d'objets \"livre\". const books = [ {id:1, titre:'Fondation'}, {id:2, titre:'Les montagnes hallucin\u00e9es'}, {id:3, titre:'Blade Runner'} ]; Ajoutez les lignes suivante \u00e0 la fin du fichier App.css .BooksTable th, .BooksTable td { text-align: left; padding-right: 15px; } Maintenant lancer l'application avec la commande npm start et vous devriez avoir ce r\u00e9sultat","title":"Installation"},{"location":"exercices/06_react_component/#a-faire-ensuite","text":"Cr\u00e9ez les composantes suivantes dans des fichiers s\u00e9par\u00e9s situ\u00e9s dans le r\u00e9pertoire src/components Une composante Titre qui va remplacer la balise <h3> dans le fichier App.js . Elle recevra un param\u00e8tre texte qui sera le texte \u00e0 afficher. La composante retournera une balise <h3> avec la valeur du param\u00e8tre re\u00e7u. Une composante nomm\u00e9e Tableau . Cette composante va remplacer la balise <table> dans le fichier App.js . Elle recevra un param\u00e8tre livres qui est le tableau de livres qu\u2019on a d\u00e9fini plus haut. Elle va retourner le code html pour afficher le tableau. Une composante LigneTableau . Cette composante va \u00eatre utilis\u00e9 dans la composante Tableau pour afficher une ligne du tableau. Elle recevra un param\u00e8tre livre qui repr\u00e9sente un objet du tableau livres. Elle va retourner le code html pour afficher un ligne du tableau (une balise <tr> et son contenu) avec les valeurs re\u00e7ues en param\u00e8tres. Modifiez le fichier App.js pour utiliser les composantes cr\u00e9\u00e9s.","title":"\u00c0 faire ensuite"},{"location":"exercices/07_react_state/","text":"Exercice 07 - L'\u00e9tat local Pour mettre en pratique ce qu'on a vu \u00e0 propos de l'\u00e9tat local d'un composant (l'objet state), nous allons cr\u00e9er les trois composant suivant qui vont interagir entre eux en modifiant les titres de chacun. Mise en place Vous devez cr\u00e9er les trois composants suivant : MainBox MiddleBox EditBox Chaque composante contient le suivant (MainBox est le parent de MiddleBox qui est lui-m\u00eame parent de EditBox). Je vous donne une partie du code HTML que la fonction render() va retourner ainsi que le style css. App.js import './App.css'; import MainBox from './MainBox'; function App() { return ( <div className=\"App\"> <MainBox /> </div> ); } export default App; MainBox.js render() { return ( <div className='box'> <h1>{this.state.boxTitle}</h1> <div className='box_saisie box_saisie_main'> <label htmlFor='titreMainBox'>Titre Box </label> <input type=\"text\" id=\"titreMainBox\" name=\"titreMainBox\" /> </div> <MiddleBox /> </div> ); } MiddleBox.js render() { return ( <div className='box'> <h2>{this.state.boxTitle}</h2> <div className='box_saisie box_saisie_middle'> <label htmlFor='titreMiddleBox'>Titre Box </label> <input type=\"text\" id=\"titreMiddleBox\" name=\"titreMiddleBox\" /> </div> <EditBox /> </div> ); } EditBox.js render() { return ( <div className='box'> <h3>{this.state.boxTitle}</h3> <div> <div className='box_saisie'> <label htmlFor='titreMainBox'>Titre MainBox </label> <input type=\"text\" id=\"titreMainBox\" name=\"titreMainBox\" /> </div> <div className='box_saisie'> <label htmlFor='titreMiddleBox'>Titre MiddleBox </label> <input type=\"text\" id=\"titreMiddleBox\" name=\"titreMiddleBox\" /> </div> <div className='box_saisie'> <label htmlFor='boxTitle'>Titre EditBox </label> <input type=\"text\" id=\"boxTitle\" name=\"boxTitle\" /> </div> </div> </div> ); } App.css .App { text-align: center; background-color: #282c34; min-height: 100vh; display: flex; flex-direction: column; align-items: center; justify-content: center; font-size: calc(10px + 2vmin); color: white; } .box { border: 2px solid #61dafb; padding: 10px; border-radius: 5px; } .box_saisie { display: flex; justify-content: space-between; padding-bottom: 2px; gap: 10px } .box_saisie_main { padding: 0 20px 10px 20px; } .box_saisie_middle { padding: 0 10px 10px 10px; } h1, h2, h3 { margin: 20px 0; } Instruction D\u00e8s qu'on modifie la valeur d'une des zones de saisie, le texte doit \u00eatre modifi\u00e9 dans tous les champs correspondants (zone de saisie, titre). Ex si je modifie dans le composant EditBox la valeur dans le champ de saisie pour le composant MainBox, la valeur sera aussi modifi\u00e9 dans le champ de saisie du composant MainBox ainsi que son titre. Compl\u00e9tez les fonctions render() de chaque composant avec ce qui manque et ajouter les fonctions de retour au bon endroit. Inspirez-vous des notes de cours, toutes les r\u00e9ponses y sont.","title":"07 - L'\u00e9tat local"},{"location":"exercices/07_react_state/#exercice-07-letat-local","text":"Pour mettre en pratique ce qu'on a vu \u00e0 propos de l'\u00e9tat local d'un composant (l'objet state), nous allons cr\u00e9er les trois composant suivant qui vont interagir entre eux en modifiant les titres de chacun.","title":"Exercice 07 - L'\u00e9tat local"},{"location":"exercices/07_react_state/#mise-en-place","text":"Vous devez cr\u00e9er les trois composants suivant : MainBox MiddleBox EditBox Chaque composante contient le suivant (MainBox est le parent de MiddleBox qui est lui-m\u00eame parent de EditBox). Je vous donne une partie du code HTML que la fonction render() va retourner ainsi que le style css. App.js import './App.css'; import MainBox from './MainBox'; function App() { return ( <div className=\"App\"> <MainBox /> </div> ); } export default App; MainBox.js render() { return ( <div className='box'> <h1>{this.state.boxTitle}</h1> <div className='box_saisie box_saisie_main'> <label htmlFor='titreMainBox'>Titre Box </label> <input type=\"text\" id=\"titreMainBox\" name=\"titreMainBox\" /> </div> <MiddleBox /> </div> ); } MiddleBox.js render() { return ( <div className='box'> <h2>{this.state.boxTitle}</h2> <div className='box_saisie box_saisie_middle'> <label htmlFor='titreMiddleBox'>Titre Box </label> <input type=\"text\" id=\"titreMiddleBox\" name=\"titreMiddleBox\" /> </div> <EditBox /> </div> ); } EditBox.js render() { return ( <div className='box'> <h3>{this.state.boxTitle}</h3> <div> <div className='box_saisie'> <label htmlFor='titreMainBox'>Titre MainBox </label> <input type=\"text\" id=\"titreMainBox\" name=\"titreMainBox\" /> </div> <div className='box_saisie'> <label htmlFor='titreMiddleBox'>Titre MiddleBox </label> <input type=\"text\" id=\"titreMiddleBox\" name=\"titreMiddleBox\" /> </div> <div className='box_saisie'> <label htmlFor='boxTitle'>Titre EditBox </label> <input type=\"text\" id=\"boxTitle\" name=\"boxTitle\" /> </div> </div> </div> ); } App.css .App { text-align: center; background-color: #282c34; min-height: 100vh; display: flex; flex-direction: column; align-items: center; justify-content: center; font-size: calc(10px + 2vmin); color: white; } .box { border: 2px solid #61dafb; padding: 10px; border-radius: 5px; } .box_saisie { display: flex; justify-content: space-between; padding-bottom: 2px; gap: 10px } .box_saisie_main { padding: 0 20px 10px 20px; } .box_saisie_middle { padding: 0 10px 10px 10px; } h1, h2, h3 { margin: 20px 0; }","title":"Mise en place"},{"location":"exercices/07_react_state/#instruction","text":"D\u00e8s qu'on modifie la valeur d'une des zones de saisie, le texte doit \u00eatre modifi\u00e9 dans tous les champs correspondants (zone de saisie, titre). Ex si je modifie dans le composant EditBox la valeur dans le champ de saisie pour le composant MainBox, la valeur sera aussi modifi\u00e9 dans le champ de saisie du composant MainBox ainsi que son titre. Compl\u00e9tez les fonctions render() de chaque composant avec ce qui manque et ajouter les fonctions de retour au bon endroit. Inspirez-vous des notes de cours, toutes les r\u00e9ponses y sont.","title":"Instruction"},{"location":"exercices/08_axios/","text":"Exercice 08 - Consommer une api avec Axios En vous inspirant de l'affichage pr\u00e9sent\u00e9 sur le site https://randomuser.me/ , cr\u00e9ez une application React qui affichera certaines informations d'un utilisateur obtenu gr\u00e2ce \u00e0 un appel \u00e0 l'api du m\u00eame site. Instructions Cr\u00e9ez un nouveau projet avec Create React App que vous nommerez ex08_nom_prenom et faite le n\u00e9cessaire pour le relier \u00e0 un d\u00e9p\u00f4t Github sur votre compte personnelle. \u00c0 l'affichage et au rafraichissement de la page, votre application doit faire un appel \u00e0 l'api de RandomUser et afficher les informations obtenues dans un composant \"carte\". Je vous laisse \"d\u00e9couper\" la carte en composant comme bon vous semble mais \u00e7a vous prends minimalement les composants suivants : Card : Le composant \"maitre\" qui va englober les autres et qui fera l'appel \u00e0 l'api de RandomUser. Avatar : Il s'occupe d'afficher uniquement la photo. Information : La zone du bas o\u00f9 sont affich\u00e9 les informations de l'usager Le composant Card doit \u00eatre autonome, c'est-\u00e0-dire que si je l'inclus 2 fois dans la page, deux appels diff\u00e9rent \u00e0 l'api seront fait. Consulter la documentation du site https://randomuser.me/api/ pour conna\u00eetre l'url \u00e0 utiliser et connaitre le format de la r\u00e9ponse. Dans la section information, affichez le message \"Salut, je m'appelle \" et en dessous le nom r\u00e9cup\u00e9r\u00e9 de l'api. Faites en sorte que lorque vous cliquez sur l'image de l'utilisateur, la carte se rafraichisse et affiche un nouvel utilisateur. (Optionnel) Ajoutez des icones comme sur l'image plus bas et quand on clique sur l'une d'elles, l'information affich\u00e9e sous la photo sera modifi\u00e9e en cons\u00e9quence. R\u00e9f\u00e9rez-vous \u00e0 l'affichage fait sur https://randomuser.me/ . Une fois l'exercice termin\u00e9, poussez votre projet sur GitHub et retournez le devoir Teams associ\u00e9 avec l'url de votre d\u00e9p\u00f4t. Exemple de r\u00e9sultat","title":"08 - Consommer une api avec Axios"},{"location":"exercices/08_axios/#exercice-08-consommer-une-api-avec-axios","text":"En vous inspirant de l'affichage pr\u00e9sent\u00e9 sur le site https://randomuser.me/ , cr\u00e9ez une application React qui affichera certaines informations d'un utilisateur obtenu gr\u00e2ce \u00e0 un appel \u00e0 l'api du m\u00eame site.","title":"Exercice 08 - Consommer une api avec Axios"},{"location":"exercices/08_axios/#instructions","text":"Cr\u00e9ez un nouveau projet avec Create React App que vous nommerez ex08_nom_prenom et faite le n\u00e9cessaire pour le relier \u00e0 un d\u00e9p\u00f4t Github sur votre compte personnelle. \u00c0 l'affichage et au rafraichissement de la page, votre application doit faire un appel \u00e0 l'api de RandomUser et afficher les informations obtenues dans un composant \"carte\". Je vous laisse \"d\u00e9couper\" la carte en composant comme bon vous semble mais \u00e7a vous prends minimalement les composants suivants : Card : Le composant \"maitre\" qui va englober les autres et qui fera l'appel \u00e0 l'api de RandomUser. Avatar : Il s'occupe d'afficher uniquement la photo. Information : La zone du bas o\u00f9 sont affich\u00e9 les informations de l'usager Le composant Card doit \u00eatre autonome, c'est-\u00e0-dire que si je l'inclus 2 fois dans la page, deux appels diff\u00e9rent \u00e0 l'api seront fait. Consulter la documentation du site https://randomuser.me/api/ pour conna\u00eetre l'url \u00e0 utiliser et connaitre le format de la r\u00e9ponse. Dans la section information, affichez le message \"Salut, je m'appelle \" et en dessous le nom r\u00e9cup\u00e9r\u00e9 de l'api. Faites en sorte que lorque vous cliquez sur l'image de l'utilisateur, la carte se rafraichisse et affiche un nouvel utilisateur. (Optionnel) Ajoutez des icones comme sur l'image plus bas et quand on clique sur l'une d'elles, l'information affich\u00e9e sous la photo sera modifi\u00e9e en cons\u00e9quence. R\u00e9f\u00e9rez-vous \u00e0 l'affichage fait sur https://randomuser.me/ . Une fois l'exercice termin\u00e9, poussez votre projet sur GitHub et retournez le devoir Teams associ\u00e9 avec l'url de votre d\u00e9p\u00f4t. Exemple de r\u00e9sultat","title":"Instructions"},{"location":"exercices/09_react_form/","text":"Exercice 9 - Les formulaires en React \u00c0 partir de l'application React que vous avez cr\u00e9\u00e9 dans l'exercice 06 et de l'api que je vais vous fournir, vous allez cr\u00e9er un composant React de gestion de livre. Instructions Modifiez le projet que vous aviez fait pour l'exercice 06 ou bien cr\u00e9ez un nouveau projet avec Create React App . Liste des routes \u00e0 votre disposition Voici les routes qui vous permettront de faire la gestion de la base de donn\u00e9e de livres. L'adresse du serveur est https://api.mathieufrechette.ca/exreact M\u00e9thode Route Description GET /livre La liste de tous les livres. POST /livre Ajouter un livre. PUT /livre/{id} Modification ou cr\u00e9ation d'un livre selon un id DELETE /livre/{id} Suppression d'un livre selon son id Pour les routes POST et PUT, vous devez inclure les informations suivantes dans le corps de la requ\u00eate : { \"titre\" : \"Le titre du livre\" } Cr\u00e9ation des composants Vous devez segmenter l'interface de gestion des livres en composantes de la fa\u00e7on suivante : GestionLivre : Composante principale, c'est ici que les modifications \u00e0 la base de donn\u00e9es seront faites. FormGestionLivre : Composante \"formulaire\", affiche les contr\u00f4les n\u00e9cessaires \u00e0 l'ajout, la modification ou la suppression d'un livre. ListeLivre : Affiche la liste des tous les livres dans un tableau HTML. (Vous pourriez r\u00e9utiliser les composantes Tableau et LigneTableau que vous aviez cr\u00e9\u00e9 \u00e0 l'exercice 06) Composition du formulaire Le formulaire du composant FormGestionLivre comporte trois boutons : Nouveau , Enregistrer , et Supprimer ainsi qu'un input pour saisir le titre du livre. Bouton Comportement Nouveau Efface les donn\u00e9es pr\u00e9sentent dans les contr\u00f4les du formulaire. Enregistrer Cr\u00e9e ou modifie les donn\u00e9es selon le cas (Si aucune cl\u00e9 api n'est pr\u00e9sente dans la table pour le livre, on cr\u00e9e un nouvel enregistrement, sinon on modifie l'enregistrement d\u00e9j\u00e0 pr\u00e9sent) Supprimer On supprime l'enregistrement dans la base de donn\u00e9es Fonctionnement de l'application Quand on clique sur une des lignes de la liste des livres du composant ListeLivre , les donn\u00e9es s'affichent dans le formulaire. On peut ensuite les modifier ou supprimer l'enregistrement en cliquant sur les boutons appropri\u00e9s. La liste des livres doit se mettre \u00e0 jour automatiquement sans devoir refaire un appel \u00e0 l'api. Exemple de visuel","title":"09 - Gestion de formulaire"},{"location":"exercices/09_react_form/#exercice-9-les-formulaires-en-react","text":"\u00c0 partir de l'application React que vous avez cr\u00e9\u00e9 dans l'exercice 06 et de l'api que je vais vous fournir, vous allez cr\u00e9er un composant React de gestion de livre.","title":"Exercice 9 - Les formulaires en React"},{"location":"exercices/09_react_form/#instructions","text":"Modifiez le projet que vous aviez fait pour l'exercice 06 ou bien cr\u00e9ez un nouveau projet avec Create React App .","title":"Instructions"},{"location":"exercices/09_react_form/#liste-des-routes-a-votre-disposition","text":"Voici les routes qui vous permettront de faire la gestion de la base de donn\u00e9e de livres. L'adresse du serveur est https://api.mathieufrechette.ca/exreact M\u00e9thode Route Description GET /livre La liste de tous les livres. POST /livre Ajouter un livre. PUT /livre/{id} Modification ou cr\u00e9ation d'un livre selon un id DELETE /livre/{id} Suppression d'un livre selon son id Pour les routes POST et PUT, vous devez inclure les informations suivantes dans le corps de la requ\u00eate : { \"titre\" : \"Le titre du livre\" }","title":"Liste des routes \u00e0 votre disposition"},{"location":"exercices/09_react_form/#creation-des-composants","text":"Vous devez segmenter l'interface de gestion des livres en composantes de la fa\u00e7on suivante : GestionLivre : Composante principale, c'est ici que les modifications \u00e0 la base de donn\u00e9es seront faites. FormGestionLivre : Composante \"formulaire\", affiche les contr\u00f4les n\u00e9cessaires \u00e0 l'ajout, la modification ou la suppression d'un livre. ListeLivre : Affiche la liste des tous les livres dans un tableau HTML. (Vous pourriez r\u00e9utiliser les composantes Tableau et LigneTableau que vous aviez cr\u00e9\u00e9 \u00e0 l'exercice 06)","title":"Cr\u00e9ation des composants"},{"location":"exercices/09_react_form/#composition-du-formulaire","text":"Le formulaire du composant FormGestionLivre comporte trois boutons : Nouveau , Enregistrer , et Supprimer ainsi qu'un input pour saisir le titre du livre. Bouton Comportement Nouveau Efface les donn\u00e9es pr\u00e9sentent dans les contr\u00f4les du formulaire. Enregistrer Cr\u00e9e ou modifie les donn\u00e9es selon le cas (Si aucune cl\u00e9 api n'est pr\u00e9sente dans la table pour le livre, on cr\u00e9e un nouvel enregistrement, sinon on modifie l'enregistrement d\u00e9j\u00e0 pr\u00e9sent) Supprimer On supprime l'enregistrement dans la base de donn\u00e9es","title":"Composition du formulaire"},{"location":"exercices/09_react_form/#fonctionnement-de-lapplication","text":"Quand on clique sur une des lignes de la liste des livres du composant ListeLivre , les donn\u00e9es s'affichent dans le formulaire. On peut ensuite les modifier ou supprimer l'enregistrement en cliquant sur les boutons appropri\u00e9s. La liste des livres doit se mettre \u00e0 jour automatiquement sans devoir refaire un appel \u00e0 l'api.","title":"Fonctionnement de l'application"},{"location":"exercices/09_react_form/#exemple-de-visuel","text":"","title":"Exemple de visuel"},{"location":"exercices/10_react_form/","text":"Exercice 10 - Les formulaires en React \u00c0 partir de la table cle_api que vous avez cr\u00e9\u00e9 dans l'exercice 09 et de l'api cr\u00e9\u00e9 \u00e0 l'exercice 4, vous allez cr\u00e9er un composant React de gestion des cl\u00e9s api. Instructions Cr\u00e9ez un nouveau projet avec Create React App pour cet exercice. Cr\u00e9ation des routes n\u00e9cessaires Vous allez devoir cr\u00e9er les routes suivantes pour vous permettre d'effectuer la gestion des cl\u00e9s. M\u00e9thode Route Description GET /cle_api/all La liste de toutes les cl\u00e9s api. En plus des champs de la table cle_api, vous devez aussi retourner le nom de l'usager. PUT /cle_api Modification ou cr\u00e9ation d'une cl\u00e9 api. Les donn\u00e9es doivent toutes \u00eatre dans le \"body\" de la requ\u00eate. DELETE /cle_api/{id} Suppression d'une cl\u00e9 api selon son id Cr\u00e9ation des composants Vous devez segmenter l'interface de gestion des cl\u00e9s en composants de la fa\u00e7on suivante : GestionApi : Composant principal, c'est ici que les modifications \u00e0 la base de donn\u00e9es seront fait FormGestionApi : Composant \"formulaire\", affiche les contr\u00f4les n\u00e9cessaires \u00e0 l'ajout, la modification ou la suppression d'une cl\u00e9 api. ListeApi : Affiche la liste des toutes les cl\u00e9s api. Les valeurs \"visibles\" \u00e0 l'\u00e9cran seront le nom de l'usager et sa cl\u00e9, tri\u00e9 en ordre alphab\u00e9tique de nom d'usager. Composition du formulaire Le formulaire du composant FormGestionApi comporte trois boutons : Nouveau, Enregistrer, Supprimer. Bouton Comportement Nouveau Efface les donn\u00e9es pr\u00e9sentent dans les contr\u00f4les du formulaire. Enregistrer Cr\u00e9e ou modifie les donn\u00e9es selon le cas (Si aucune cl\u00e9 api n'est pr\u00e9sente dans la table pour l'usager, on cr\u00e9e un nouvel enregistrement, sinon on modifie l'enregistrement d\u00e9j\u00e0 pr\u00e9sent) Supprimer On supprime l'enregistrement dans la base de donn\u00e9es La s\u00e9lection de l'usager se fait par un \"Combobox\" qui affiche la liste de tous les usagers, pas seulement ceux qui ont d\u00e9j\u00e0 une cl\u00e9 d'attribu\u00e9. L'alimentation du \"combobox\" se fera \u00e0 l'aide de la route /users que vous avez cr\u00e9\u00e9 \u00e0 l'exercice 4. Un champs de saisie texte sera utilis\u00e9 pour la valeur de la cl\u00e9 api. Ajoutez aussi un bouton \"G\u00e9n\u00e9rer\" qui va g\u00e9n\u00e9rer une cl\u00e9 al\u00e9atoirement selon la m\u00eame logique que vous avez utilis\u00e9 \u00e0 l'exercice 9. Fonctionnement du composant Quand on clique sur une des lignes de la liste des cl\u00e9s du composant ListeApi , les donn\u00e9es s'affichent dans le formulaire. On peut ensuite les modifier ou supprimer l'enregistrement en cliquant sur les boutons appropri\u00e9s. La liste des cl\u00e9s doit se mettre \u00e0 jour automatiquement sans devoir refaire un appel \u00e0 l'api.","title":"Exercice 10 - Les formulaires en React"},{"location":"exercices/10_react_form/#exercice-10-les-formulaires-en-react","text":"\u00c0 partir de la table cle_api que vous avez cr\u00e9\u00e9 dans l'exercice 09 et de l'api cr\u00e9\u00e9 \u00e0 l'exercice 4, vous allez cr\u00e9er un composant React de gestion des cl\u00e9s api.","title":"Exercice 10 - Les formulaires en React"},{"location":"exercices/10_react_form/#instructions","text":"Cr\u00e9ez un nouveau projet avec Create React App pour cet exercice.","title":"Instructions"},{"location":"exercices/10_react_form/#creation-des-routes-necessaires","text":"Vous allez devoir cr\u00e9er les routes suivantes pour vous permettre d'effectuer la gestion des cl\u00e9s. M\u00e9thode Route Description GET /cle_api/all La liste de toutes les cl\u00e9s api. En plus des champs de la table cle_api, vous devez aussi retourner le nom de l'usager. PUT /cle_api Modification ou cr\u00e9ation d'une cl\u00e9 api. Les donn\u00e9es doivent toutes \u00eatre dans le \"body\" de la requ\u00eate. DELETE /cle_api/{id} Suppression d'une cl\u00e9 api selon son id","title":"Cr\u00e9ation des routes n\u00e9cessaires"},{"location":"exercices/10_react_form/#creation-des-composants","text":"Vous devez segmenter l'interface de gestion des cl\u00e9s en composants de la fa\u00e7on suivante : GestionApi : Composant principal, c'est ici que les modifications \u00e0 la base de donn\u00e9es seront fait FormGestionApi : Composant \"formulaire\", affiche les contr\u00f4les n\u00e9cessaires \u00e0 l'ajout, la modification ou la suppression d'une cl\u00e9 api. ListeApi : Affiche la liste des toutes les cl\u00e9s api. Les valeurs \"visibles\" \u00e0 l'\u00e9cran seront le nom de l'usager et sa cl\u00e9, tri\u00e9 en ordre alphab\u00e9tique de nom d'usager.","title":"Cr\u00e9ation des composants"},{"location":"exercices/10_react_form/#composition-du-formulaire","text":"Le formulaire du composant FormGestionApi comporte trois boutons : Nouveau, Enregistrer, Supprimer. Bouton Comportement Nouveau Efface les donn\u00e9es pr\u00e9sentent dans les contr\u00f4les du formulaire. Enregistrer Cr\u00e9e ou modifie les donn\u00e9es selon le cas (Si aucune cl\u00e9 api n'est pr\u00e9sente dans la table pour l'usager, on cr\u00e9e un nouvel enregistrement, sinon on modifie l'enregistrement d\u00e9j\u00e0 pr\u00e9sent) Supprimer On supprime l'enregistrement dans la base de donn\u00e9es La s\u00e9lection de l'usager se fait par un \"Combobox\" qui affiche la liste de tous les usagers, pas seulement ceux qui ont d\u00e9j\u00e0 une cl\u00e9 d'attribu\u00e9. L'alimentation du \"combobox\" se fera \u00e0 l'aide de la route /users que vous avez cr\u00e9\u00e9 \u00e0 l'exercice 4. Un champs de saisie texte sera utilis\u00e9 pour la valeur de la cl\u00e9 api. Ajoutez aussi un bouton \"G\u00e9n\u00e9rer\" qui va g\u00e9n\u00e9rer une cl\u00e9 al\u00e9atoirement selon la m\u00eame logique que vous avez utilis\u00e9 \u00e0 l'exercice 9.","title":"Composition du formulaire"},{"location":"exercices/10_react_form/#fonctionnement-du-composant","text":"Quand on clique sur une des lignes de la liste des cl\u00e9s du composant ListeApi , les donn\u00e9es s'affichent dans le formulaire. On peut ensuite les modifier ou supprimer l'enregistrement en cliquant sur les boutons appropri\u00e9s. La liste des cl\u00e9s doit se mettre \u00e0 jour automatiquement sans devoir refaire un appel \u00e0 l'api.","title":"Fonctionnement du composant"},{"location":"exercices/11_tests_cors/","text":"Exercices 11 - Tests unitaires et CORS \u00c0 partir de l'api cr\u00e9er \u00e0 l'exercice 4 et des ajouts que vous y avez fait au cours des autres exercices, vous allez cr\u00e9er des tests unitaires pour vos routes et faire les modifications n\u00e9cessaires pour permettre les CORS. Instruction Pour chaque route /cle_api que vous avez ajout\u00e9 \u00e0 l'exercice 10, cr\u00e9ez au moins deux tests unitaires pertinents avec PHPUnit. Pour chaque route /users cr\u00e9ez aussi au moins deux tests mais cette fois avec Postman. Faites aussi les modifications n\u00e9cessaires pour permettre les requ\u00eates provenant de n'importe quel origine.","title":"Exercices 11 - Tests unitaires et CORS"},{"location":"exercices/11_tests_cors/#exercices-11-tests-unitaires-et-cors","text":"\u00c0 partir de l'api cr\u00e9er \u00e0 l'exercice 4 et des ajouts que vous y avez fait au cours des autres exercices, vous allez cr\u00e9er des tests unitaires pour vos routes et faire les modifications n\u00e9cessaires pour permettre les CORS.","title":"Exercices 11 - Tests unitaires et CORS"},{"location":"exercices/11_tests_cors/#instruction","text":"Pour chaque route /cle_api que vous avez ajout\u00e9 \u00e0 l'exercice 10, cr\u00e9ez au moins deux tests unitaires pertinents avec PHPUnit. Pour chaque route /users cr\u00e9ez aussi au moins deux tests mais cette fois avec Postman. Faites aussi les modifications n\u00e9cessaires pour permettre les requ\u00eates provenant de n'importe quel origine.","title":"Instruction"},{"location":"notes_de_cours/php_methode_magique/","text":"Les m\u00e9thodes magiques __construct() __invoke() https://www.php.net/manual/fr/language.oop5.magic.php https://www.phptutorial.net/php-oop/php-__invoke/","title":"Les m\u00e9thodes magiques"},{"location":"notes_de_cours/php_methode_magique/#les-methodes-magiques","text":"","title":"Les m\u00e9thodes magiques"},{"location":"notes_de_cours/php_methode_magique/#__construct","text":"","title":"__construct()"},{"location":"notes_de_cours/php_methode_magique/#__invoke","text":"https://www.php.net/manual/fr/language.oop5.magic.php https://www.phptutorial.net/php-oop/php-__invoke/","title":"__invoke()"},{"location":"notes_de_cours/api/auth_http/","text":"Sch\u00e9ma d'authentification HTTP Le protocole HTTP a une structure permettant le contr\u00f4le d'acc\u00e8s et l'authentification. Plusieurs sch\u00e9ma d'authentification HTTP ont \u00e9t\u00e9 cr\u00e9e, nous verrons l'authentification basique (Basic) et par \"jeton\" (Bearer Token). Ces informations vont \u00eatre ajout\u00e9es dans l'ent\u00eate de la requ\u00eate HTTP sous la cl\u00e9 Authorization . Authentification basique (Basic Authentification) Le plus simple, mais le moins s\u00e9curitaire. On place un username et un mot de passe encod\u00e9 en Base64 dans l\u2019ent\u00eate de la requ\u00eate. On d\u00e9code ensuite du c\u00f4t\u00e9 serveur et on valide que les informations sont bonne. Si les informations sont invalide, on retourne le code de Statut HTTP 401. Pas besoin d\u2019utiliser de cookie, de page de connexion, de id de session, etc. Le standart pour l'ajout de l'information dans l'ent\u00eate est d'utiliser la forme suivante : Authorization: Basic dXNlcm5hbWU6bWF0aCBwYXNzd29yZDp0ZXN0 o\u00f9 dXNlcm5hbWU6bWF0aCBwYXNzd29yZDp0ZXN0 repr\u00e9sente le mot de passe encod\u00e9 en base64 sous la forme username:nomUtilisateur password:motDePasse En PHP on utilise la fonction base64_encode pour encoder un texte. \u00c0 l'inverse base64_decode va nous redonner le texte original. $token = base64_encode('username:nomUtilisateur password:motDePasse'); Bearer Authentication Utilise un \u00ab token \u00bb de s\u00e9curit\u00e9 appel\u00e9e \u00ab bearer token \u00bb Le token est g\u00e9n\u00e9r\u00e9 par le serveur en r\u00e9ponse \u00e0 une requ\u00eate de connexion. Le client doit ensuite inclure le token dans l\u2019ent\u00eate de ses requ\u00eates Exemple d\u2019ent\u00eate : Authorization: Bearer 5bdd0b74e9a6c Pour des raisons de s\u00e9curit\u00e9, ces deux types d\u2019authentification devraient toujours \u00eatre utilis\u00e9s en HTTPS Les cl\u00e9s API Grandement utilis\u00e9 et pouvant m\u00eame \u00eatre consid\u00e9r\u00e9 comme un standard, m\u00eame si encore une fois ce n\u2019est pas la m\u00e9thode la plus s\u00e9curitaire. Une valeur unique est g\u00e9n\u00e9r\u00e9e \u00ab al\u00e9atoirement \u00bb pour chaque utilisateur ou application. Cette cl\u00e9 est ensuite ajout\u00e9e dans chaque requ\u00eate, \u00e0 diff\u00e9rent endroit selon l\u2019api. Ent\u00eate : Authorization: Apikey 1234567890abcdef Section \u00ab query \u00bb de la requ\u00eate : www.monapi.com/books?apikey=1234567890abcdef Body : {\u00ab apikey \u00bb : \u00ab 1234567890abcdef \u00bb} En fait l\u2019authentification par cl\u00e9 api est une forme d\u2019authentification par \u00ab bearer token \u00bb comme vu plus haut. Envoyer les informations d'autorisation avec Postman Dans la section Headers , ajoutez une cl\u00e9 nomm\u00e9e Authorization avec la valeur voulue. Conservez toutes les autres cl\u00e9s. Extraire les informations d'autorisation avec SLIM On va utiliser un middleware pour s'occupper de l'autorisation. Dans la fonction __invoke de notre classe on va recevoir en param\u00e8tre un objet Psr\\Http\\Message\\ServerRequestInterface (Request dans l'exemple plus bas) qui contient toutes les informations de la requ\u00eate. Avec la m\u00e9thode getHeaderLine() on peut r\u00e9cup\u00e9rer la valeur de la cl\u00e9 qu'on lui envoie en param\u00e8tre. Ex: Si j'envoie ceci Authorization: Bearer 5bdd0b74e9a6c et je fais la ligne $token = $request->getHeaderLine('Authorization'); je vais avoir la valeur Bearer 5bdd0b74e9a6c . Ensuite je n'ai qu'\u00e0 s\u00e9parer la valeur par l'espace et de conserver uniquement la deuxi\u00e8me partie. Voici un extrait d'une fonction __invoke qui isole la valeur du token avec l'exemple donn\u00e9 plus haut. public function __invoke( Request $request, RequestHandler $handler): ResponseInterface { // Je r\u00e9cup\u00e8re la valeur de la cl\u00e9 Authorization $valeurTokenBrut = $request->getHeaderLine('Authorization') ?? ''; // Avec explode, on s\u00e9pare la valeur s\u00e9par\u00e9e par des espaces en plusieurs items // Ici je vais directement chercher le deuxi\u00e8me item avec le [1] $tokenIsole = explode(' ', $valeurTokenBrut)[1]; // M\u00eame chose que plus haut, mais en tout sur une ligne. $token = explode(' ', $request->getHeaderLine('Authorization'))[1] ?? ''; // ... } R\u00e9f\u00e9rence https://blog.restcase.com/4-most-used-rest-api-authentication-methods/ https://stackoverflow.blog/2021/10/06/best-practices-for-authentication-and-authorization-for-rest-apis/ https://www.cqlcorp.com/insights/best-practices-for-securing-your-rest-api-authentication-options/ https://restfulapi.net/security-essentials/","title":"Sch\u00e9ma d'authentification HTTP"},{"location":"notes_de_cours/api/auth_http/#schema-dauthentification-http","text":"Le protocole HTTP a une structure permettant le contr\u00f4le d'acc\u00e8s et l'authentification. Plusieurs sch\u00e9ma d'authentification HTTP ont \u00e9t\u00e9 cr\u00e9e, nous verrons l'authentification basique (Basic) et par \"jeton\" (Bearer Token). Ces informations vont \u00eatre ajout\u00e9es dans l'ent\u00eate de la requ\u00eate HTTP sous la cl\u00e9 Authorization .","title":"Sch\u00e9ma d'authentification HTTP"},{"location":"notes_de_cours/api/auth_http/#authentification-basique-basic-authentification","text":"Le plus simple, mais le moins s\u00e9curitaire. On place un username et un mot de passe encod\u00e9 en Base64 dans l\u2019ent\u00eate de la requ\u00eate. On d\u00e9code ensuite du c\u00f4t\u00e9 serveur et on valide que les informations sont bonne. Si les informations sont invalide, on retourne le code de Statut HTTP 401. Pas besoin d\u2019utiliser de cookie, de page de connexion, de id de session, etc. Le standart pour l'ajout de l'information dans l'ent\u00eate est d'utiliser la forme suivante : Authorization: Basic dXNlcm5hbWU6bWF0aCBwYXNzd29yZDp0ZXN0 o\u00f9 dXNlcm5hbWU6bWF0aCBwYXNzd29yZDp0ZXN0 repr\u00e9sente le mot de passe encod\u00e9 en base64 sous la forme username:nomUtilisateur password:motDePasse En PHP on utilise la fonction base64_encode pour encoder un texte. \u00c0 l'inverse base64_decode va nous redonner le texte original. $token = base64_encode('username:nomUtilisateur password:motDePasse');","title":"Authentification basique (Basic Authentification)"},{"location":"notes_de_cours/api/auth_http/#bearer-authentication","text":"Utilise un \u00ab token \u00bb de s\u00e9curit\u00e9 appel\u00e9e \u00ab bearer token \u00bb Le token est g\u00e9n\u00e9r\u00e9 par le serveur en r\u00e9ponse \u00e0 une requ\u00eate de connexion. Le client doit ensuite inclure le token dans l\u2019ent\u00eate de ses requ\u00eates Exemple d\u2019ent\u00eate : Authorization: Bearer 5bdd0b74e9a6c Pour des raisons de s\u00e9curit\u00e9, ces deux types d\u2019authentification devraient toujours \u00eatre utilis\u00e9s en HTTPS","title":"Bearer Authentication"},{"location":"notes_de_cours/api/auth_http/#les-cles-api","text":"Grandement utilis\u00e9 et pouvant m\u00eame \u00eatre consid\u00e9r\u00e9 comme un standard, m\u00eame si encore une fois ce n\u2019est pas la m\u00e9thode la plus s\u00e9curitaire. Une valeur unique est g\u00e9n\u00e9r\u00e9e \u00ab al\u00e9atoirement \u00bb pour chaque utilisateur ou application. Cette cl\u00e9 est ensuite ajout\u00e9e dans chaque requ\u00eate, \u00e0 diff\u00e9rent endroit selon l\u2019api. Ent\u00eate : Authorization: Apikey 1234567890abcdef Section \u00ab query \u00bb de la requ\u00eate : www.monapi.com/books?apikey=1234567890abcdef Body : {\u00ab apikey \u00bb : \u00ab 1234567890abcdef \u00bb} En fait l\u2019authentification par cl\u00e9 api est une forme d\u2019authentification par \u00ab bearer token \u00bb comme vu plus haut.","title":"Les cl\u00e9s API"},{"location":"notes_de_cours/api/auth_http/#envoyer-les-informations-dautorisation-avec-postman","text":"Dans la section Headers , ajoutez une cl\u00e9 nomm\u00e9e Authorization avec la valeur voulue. Conservez toutes les autres cl\u00e9s.","title":"Envoyer les informations d'autorisation avec Postman"},{"location":"notes_de_cours/api/auth_http/#extraire-les-informations-dautorisation-avec-slim","text":"On va utiliser un middleware pour s'occupper de l'autorisation. Dans la fonction __invoke de notre classe on va recevoir en param\u00e8tre un objet Psr\\Http\\Message\\ServerRequestInterface (Request dans l'exemple plus bas) qui contient toutes les informations de la requ\u00eate. Avec la m\u00e9thode getHeaderLine() on peut r\u00e9cup\u00e9rer la valeur de la cl\u00e9 qu'on lui envoie en param\u00e8tre. Ex: Si j'envoie ceci Authorization: Bearer 5bdd0b74e9a6c et je fais la ligne $token = $request->getHeaderLine('Authorization'); je vais avoir la valeur Bearer 5bdd0b74e9a6c . Ensuite je n'ai qu'\u00e0 s\u00e9parer la valeur par l'espace et de conserver uniquement la deuxi\u00e8me partie. Voici un extrait d'une fonction __invoke qui isole la valeur du token avec l'exemple donn\u00e9 plus haut. public function __invoke( Request $request, RequestHandler $handler): ResponseInterface { // Je r\u00e9cup\u00e8re la valeur de la cl\u00e9 Authorization $valeurTokenBrut = $request->getHeaderLine('Authorization') ?? ''; // Avec explode, on s\u00e9pare la valeur s\u00e9par\u00e9e par des espaces en plusieurs items // Ici je vais directement chercher le deuxi\u00e8me item avec le [1] $tokenIsole = explode(' ', $valeurTokenBrut)[1]; // M\u00eame chose que plus haut, mais en tout sur une ligne. $token = explode(' ', $request->getHeaderLine('Authorization'))[1] ?? ''; // ... }","title":"Extraire les informations d'autorisation avec SLIM"},{"location":"notes_de_cours/api/auth_http/#reference","text":"https://blog.restcase.com/4-most-used-rest-api-authentication-methods/ https://stackoverflow.blog/2021/10/06/best-practices-for-authentication-and-authorization-for-rest-apis/ https://www.cqlcorp.com/insights/best-practices-for-securing-your-rest-api-authentication-options/ https://restfulapi.net/security-essentials/","title":"R\u00e9f\u00e9rence"},{"location":"notes_de_cours/api/bonnes_pratiques/","text":"Les bonnes pratiques dans la conception d'un API Utiliser le format JSON Le format \u00e0 pr\u00e9coniser pour recevoir et retourner de l'information de notre api est le format JSON. C'est de loin le plus utilis\u00e9 aujourd'hui et la grande majorit\u00e9 des langages de programmation on des fonctions natives pour le manipuler. Plus de d\u00e9tail dans cette section : Le format JSON Utiliser des noms au lieu de verbes pour les routes Quand on nomme les routes de notre api, on ne devrait pas utiliser de verbe. L'emploi d'un nom significatif est \u00e0 privil\u00e9gier. Par exemple notre api nous permet de retourner une liste d'utilisateurs ou d'en cr\u00e9er un, on serait tent\u00e9 d'utiliser comme nom de route https://monApi/getUtilisateurs https://monApi/createUtilisateurs mais il est pr\u00e9f\u00e9rable d'utiliser dans les deux cas https://monApi/utilisateurs Un m\u00eame route peut avoir plus d'une fonctionnalit\u00e9, c'est la m\u00e9thode HTTP qui nous permet de les diff\u00e9renci\u00e9es. Utiliser la m\u00e9thode HTTP pour d\u00e9crire la fonctionnalit\u00e9 de la ressource En lien avec le point suivant, utiliser la bonne m\u00e9thode HTTP pour indiquer ce que la fonctionnalit\u00e9 de la route. Il existe une m\u00e9thode qui correspondante \u00e0 chaque op\u00e9ration CRUD. Op\u00e9ration dans la BD M\u00e9thode http Lire GET Ins\u00e9rer POST Modifier PUT Modifier partiellement PATCH Supprimer DELETE On ne doit jamais modifier une ressource avec une action GET. Les actions de modification PUT et PATCH sont tr\u00e8s similaires, la diff\u00e9rence est que PUT est utilis\u00e9 pour modifier toutes les valeurs de la ressource alors que PATCH l'est pour une modification partielle. Autre distinction de PUT, si la ressource n'est pas trouv\u00e9, elle sera cr\u00e9\u00e9e. Prenons l'exemple suivant, on veut pouvoir modifier un utilisateur ayant ces informations { \"id\" : \"1\", \"username\" : \"[username]\", \"first_name\" : \"[first_name]\", \"last_name\" : \"[last_name]\", \"email\" : \"[email]\" } Avec PUT on doit envoyer toutes ces informations dans la requ\u00eate, alors qu'avec PATCH on pourrait permettre seulement d'envoyer et de modifier le email . L'utilisation de la bonne m\u00e9thode HTTP nous permet d'utiliser la m\u00eame route pour plus d'une fonction. M\u00e9thode Route Description GET /utilisateurs Retourne la liste de tous les utilisateurs POST /utilisateurs Cr\u00e9ation d'un utilisateur PUT /utilisateurs/21 Modification de l'utilisateur avec le id 21 DELETE /utilisateurs/21 Suppression de l'utilisateur avec le id 21 voir Les m\u00e9thodes HTTP Utiliser les codes de statut HTTP Dans la r\u00e9ponse de la requ\u00eate \u00e0 votre API utilisez une code de statut HTTP appropri\u00e9 \u00e0 la situation. 200 - 299 indique un succ\u00e8s 400 - 499 Il y a eu une erreur c\u00f4t\u00e9 client 500 - 599 Il y a eu une erreur c\u00f4t\u00e9 serveur R\u00e9sum\u00e9 des m\u00e9thodes avec le code de statut sugg\u00e9r\u00e9 M\u00e9thode GLOBAL (/utilisateurs) Sur un element (/utilisateurs/{id}) POST 201 Created - La ressource est cr\u00e9\u00e9e et est retourn\u00e9e dans la r\u00e9ponse - GET 200 OK 200 OK 404 Not Found - La ressource n'a pas \u00e9t\u00e9 trouv\u00e9e, ex: le id utilisateur est invalide. PUT 405 Method Not Allowed - On ne devrait pas permettre de modifier toutes les ressources en une action 200 OK - La ressource est modifi\u00e9e et est retourn\u00e9e dans la r\u00e9ponse. 201 Created - La ressource a \u00e9t\u00e9 cr\u00e9\u00e9 car elle etait inexistante. PATCH 405 Method Not Allowed - On ne devrait pas permettre de modifier toutes les ressources en une action 200 OK - La ressource est modifi\u00e9e et est retourn\u00e9e dans la r\u00e9ponse. 404 Not Found - La ressource \u00e0 modifier n'a pas \u00e9t\u00e9 trouv\u00e9e, ex: le id utilisateur est invalide. DELETE 405 Method Not Allowed - On ne devrait pas permettre de supprimer toutes les ressources en une action. Si oui utilisez le code 200. 204 No Content - La ressource a \u00e9t\u00e9 supprim\u00e9 et aucune information n'est retourn\u00e9e dans la r\u00e9ponse. 200 OK - La ressource est supprim\u00e9 et est retourn\u00e9e dans la r\u00e9ponse. 404 Not Found - La ressource \u00e0 supprimer n'a pas \u00e9t\u00e9 trouv\u00e9e, ex: le id utilisateur est invalide. Codes \u00e0 utiliser pour les erreurs Code Utilisation 401 - Unauthorized Le client ne s'est pas encore authentifier pour acc\u00e9der \u00e0 l'api. 403 - Forbidden Le client est authentifi\u00e9 mais n'a pas les autorisations pour acc\u00e9der \u00e0 la ressource. 404 - Not Found L'url utilis\u00e9 est invalide, le client demande une ressource qui n'existe pas. 500 - Internal Server Error Une erreur est survenu c\u00f4t\u00e9 serveur. Retournez de l'information sur l'erreur dans la r\u00e9ponse. Utiliser l'imbrication dans les routes Quand des ressources de votre api peuvent \u00eatre reli\u00e9es, utilisez l'imbrication pour cr\u00e9er des urls significatifs. Par exemple un auteur peut avoir \u00e9crit plusieurs livres, on pourrait avoir une route nomm\u00e9e /{auteurs}/livres qui retourne tous les livres de l'auteur en param\u00e8tre. Il faut cependant faire attention \u00e0 ne pas trop surcharger la route en allant trop profond\u00e9ment avec l'imbrication. Permettre les filtres, le tri, s\u00e9lection des champs retourn\u00e9s et la pagination Pour permettre \u00e0 l'utilisateur un meilleur contr\u00f4le sur les donn\u00e9es r\u00e9cup\u00e9r\u00e9es, permettez l'utilisation de filtres, de tri et de pagination dans vos requ\u00eate. Les param\u00e8tres devraient \u00eatre situ\u00e9 dans la section \"requ\u00eate\" de l'url Filtre Utilisez un nom de param\u00e8tre significatif. Pour saisir plusieurs valeurs, on doit les s\u00e9parer par une virgule. Exemple : /livres?categorie=roman pour afficher tous les livres de la cat\u00e9gorie roman. /livres?categorie=roman,documentaire pour afficher tous les livres de la cat\u00e9gorie roman et documentaire. tri Utilisez comme valeur du param\u00e8tre le nom du champ avec un code pr\u00e9d\u00e9fini en pr\u00e9fixe ( + et - par exemple) qui indiquera si le tri est ascendant ou descendant. Le tri sur plus d'un champ devrait aussi \u00eatre permis. Exemple : /livres?tri=+titre,-prix pour trier par les livres titre de mani\u00e8re ascendante et par prix de mani\u00e8re descendante. S\u00e9lection des champs retourn\u00e9s Il peut aussi \u00eatre pertinent de permettre au client de pouvoir s\u00e9lectionner uniquement les champs qu'il veut avoir dans la r\u00e9ponse \u00e0 la requ\u00eate. Exemple : /livres?champs=titre,isbn retournera la liste de tous les livres mais seulement le titres et isbn de chacun. Pagination Il n'est pas rare qu'une ressource comporte plusieurs centaines sinon milliers d'enregistrements. On devrait permettre au client de pouvoir s\u00e9lectionner seulement une partie des enregistrements en d\u00e9finissant un point de d\u00e9part (offset) et un nombre d'enregistrement (limit). Si on utilise la pagination, on devrait d\u00e9finir des valeurs par d\u00e9faut au param\u00e8tre offset et limit (g\u00e9n\u00e9ralement offset sera \u00e9gale \u00e0 0 pour le premier enregistrement). Exemple : /livres?limit=50&offset=100 En partant du centi\u00e8me enregistrement, affiche les 50 livres suivants. Pour faciliter le traitement des donn\u00e9es, on devrait ajouter dans la r\u00e9ponse le nombre total d'enregistrements ainsi que les valeurs de limit et offset. Une autre technique est d'avoir un nombre d'enregistrement fixe par page et de seulement permettre \u00e0 l'usager de choisir la page qu'il veut afficher. Exemple, on d\u00e9cide d'afficher 30 enregistrements par page, l'url suivant va afficher les enregistrement 61 \u00e0 90 : /livres?page=3 On peut bien sur combiner les deux m\u00e9thodes comme c'est souvent le cas dans les sites d'achats en lignes (On peut choisir la page et le nombre d'articles affich\u00e9s par page). Source https://www.moesif.com/blog/api-guide/api-design-guidelines/ https://www.freecodecamp.org/news/rest-api-best-practices-rest-endpoint-design-examples/ https://medium.com/@mwaysolutions/10-best-practices-for-better-restful-api-cbe81b06f291","title":"Les bonnes pratiques dans la conception d'un API"},{"location":"notes_de_cours/api/bonnes_pratiques/#les-bonnes-pratiques-dans-la-conception-dun-api","text":"","title":"Les bonnes pratiques dans la conception d'un API"},{"location":"notes_de_cours/api/bonnes_pratiques/#utiliser-le-format-json","text":"Le format \u00e0 pr\u00e9coniser pour recevoir et retourner de l'information de notre api est le format JSON. C'est de loin le plus utilis\u00e9 aujourd'hui et la grande majorit\u00e9 des langages de programmation on des fonctions natives pour le manipuler. Plus de d\u00e9tail dans cette section : Le format JSON","title":"Utiliser le format JSON"},{"location":"notes_de_cours/api/bonnes_pratiques/#utiliser-des-noms-au-lieu-de-verbes-pour-les-routes","text":"Quand on nomme les routes de notre api, on ne devrait pas utiliser de verbe. L'emploi d'un nom significatif est \u00e0 privil\u00e9gier. Par exemple notre api nous permet de retourner une liste d'utilisateurs ou d'en cr\u00e9er un, on serait tent\u00e9 d'utiliser comme nom de route https://monApi/getUtilisateurs https://monApi/createUtilisateurs mais il est pr\u00e9f\u00e9rable d'utiliser dans les deux cas https://monApi/utilisateurs Un m\u00eame route peut avoir plus d'une fonctionnalit\u00e9, c'est la m\u00e9thode HTTP qui nous permet de les diff\u00e9renci\u00e9es.","title":"Utiliser des noms au lieu de verbes pour les routes"},{"location":"notes_de_cours/api/bonnes_pratiques/#utiliser-la-methode-http-pour-decrire-la-fonctionnalite-de-la-ressource","text":"En lien avec le point suivant, utiliser la bonne m\u00e9thode HTTP pour indiquer ce que la fonctionnalit\u00e9 de la route. Il existe une m\u00e9thode qui correspondante \u00e0 chaque op\u00e9ration CRUD. Op\u00e9ration dans la BD M\u00e9thode http Lire GET Ins\u00e9rer POST Modifier PUT Modifier partiellement PATCH Supprimer DELETE On ne doit jamais modifier une ressource avec une action GET. Les actions de modification PUT et PATCH sont tr\u00e8s similaires, la diff\u00e9rence est que PUT est utilis\u00e9 pour modifier toutes les valeurs de la ressource alors que PATCH l'est pour une modification partielle. Autre distinction de PUT, si la ressource n'est pas trouv\u00e9, elle sera cr\u00e9\u00e9e. Prenons l'exemple suivant, on veut pouvoir modifier un utilisateur ayant ces informations { \"id\" : \"1\", \"username\" : \"[username]\", \"first_name\" : \"[first_name]\", \"last_name\" : \"[last_name]\", \"email\" : \"[email]\" } Avec PUT on doit envoyer toutes ces informations dans la requ\u00eate, alors qu'avec PATCH on pourrait permettre seulement d'envoyer et de modifier le email . L'utilisation de la bonne m\u00e9thode HTTP nous permet d'utiliser la m\u00eame route pour plus d'une fonction. M\u00e9thode Route Description GET /utilisateurs Retourne la liste de tous les utilisateurs POST /utilisateurs Cr\u00e9ation d'un utilisateur PUT /utilisateurs/21 Modification de l'utilisateur avec le id 21 DELETE /utilisateurs/21 Suppression de l'utilisateur avec le id 21 voir Les m\u00e9thodes HTTP","title":"Utiliser la m\u00e9thode HTTP pour d\u00e9crire la fonctionnalit\u00e9 de la ressource"},{"location":"notes_de_cours/api/bonnes_pratiques/#utiliser-les-codes-de-statut-http","text":"Dans la r\u00e9ponse de la requ\u00eate \u00e0 votre API utilisez une code de statut HTTP appropri\u00e9 \u00e0 la situation. 200 - 299 indique un succ\u00e8s 400 - 499 Il y a eu une erreur c\u00f4t\u00e9 client 500 - 599 Il y a eu une erreur c\u00f4t\u00e9 serveur","title":"Utiliser les codes de statut HTTP"},{"location":"notes_de_cours/api/bonnes_pratiques/#resume-des-methodes-avec-le-code-de-statut-suggere","text":"M\u00e9thode GLOBAL (/utilisateurs) Sur un element (/utilisateurs/{id}) POST 201 Created - La ressource est cr\u00e9\u00e9e et est retourn\u00e9e dans la r\u00e9ponse - GET 200 OK 200 OK 404 Not Found - La ressource n'a pas \u00e9t\u00e9 trouv\u00e9e, ex: le id utilisateur est invalide. PUT 405 Method Not Allowed - On ne devrait pas permettre de modifier toutes les ressources en une action 200 OK - La ressource est modifi\u00e9e et est retourn\u00e9e dans la r\u00e9ponse. 201 Created - La ressource a \u00e9t\u00e9 cr\u00e9\u00e9 car elle etait inexistante. PATCH 405 Method Not Allowed - On ne devrait pas permettre de modifier toutes les ressources en une action 200 OK - La ressource est modifi\u00e9e et est retourn\u00e9e dans la r\u00e9ponse. 404 Not Found - La ressource \u00e0 modifier n'a pas \u00e9t\u00e9 trouv\u00e9e, ex: le id utilisateur est invalide. DELETE 405 Method Not Allowed - On ne devrait pas permettre de supprimer toutes les ressources en une action. Si oui utilisez le code 200. 204 No Content - La ressource a \u00e9t\u00e9 supprim\u00e9 et aucune information n'est retourn\u00e9e dans la r\u00e9ponse. 200 OK - La ressource est supprim\u00e9 et est retourn\u00e9e dans la r\u00e9ponse. 404 Not Found - La ressource \u00e0 supprimer n'a pas \u00e9t\u00e9 trouv\u00e9e, ex: le id utilisateur est invalide.","title":"R\u00e9sum\u00e9 des m\u00e9thodes avec le code de statut sugg\u00e9r\u00e9"},{"location":"notes_de_cours/api/bonnes_pratiques/#codes-a-utiliser-pour-les-erreurs","text":"Code Utilisation 401 - Unauthorized Le client ne s'est pas encore authentifier pour acc\u00e9der \u00e0 l'api. 403 - Forbidden Le client est authentifi\u00e9 mais n'a pas les autorisations pour acc\u00e9der \u00e0 la ressource. 404 - Not Found L'url utilis\u00e9 est invalide, le client demande une ressource qui n'existe pas. 500 - Internal Server Error Une erreur est survenu c\u00f4t\u00e9 serveur. Retournez de l'information sur l'erreur dans la r\u00e9ponse.","title":"Codes \u00e0 utiliser pour les erreurs"},{"location":"notes_de_cours/api/bonnes_pratiques/#utiliser-limbrication-dans-les-routes","text":"Quand des ressources de votre api peuvent \u00eatre reli\u00e9es, utilisez l'imbrication pour cr\u00e9er des urls significatifs. Par exemple un auteur peut avoir \u00e9crit plusieurs livres, on pourrait avoir une route nomm\u00e9e /{auteurs}/livres qui retourne tous les livres de l'auteur en param\u00e8tre. Il faut cependant faire attention \u00e0 ne pas trop surcharger la route en allant trop profond\u00e9ment avec l'imbrication.","title":"Utiliser l'imbrication dans les routes"},{"location":"notes_de_cours/api/bonnes_pratiques/#permettre-les-filtres-le-tri-selection-des-champs-retournes-et-la-pagination","text":"Pour permettre \u00e0 l'utilisateur un meilleur contr\u00f4le sur les donn\u00e9es r\u00e9cup\u00e9r\u00e9es, permettez l'utilisation de filtres, de tri et de pagination dans vos requ\u00eate. Les param\u00e8tres devraient \u00eatre situ\u00e9 dans la section \"requ\u00eate\" de l'url","title":"Permettre les filtres, le tri, s\u00e9lection des champs retourn\u00e9s et la pagination"},{"location":"notes_de_cours/api/bonnes_pratiques/#filtre","text":"Utilisez un nom de param\u00e8tre significatif. Pour saisir plusieurs valeurs, on doit les s\u00e9parer par une virgule. Exemple : /livres?categorie=roman pour afficher tous les livres de la cat\u00e9gorie roman. /livres?categorie=roman,documentaire pour afficher tous les livres de la cat\u00e9gorie roman et documentaire.","title":"Filtre"},{"location":"notes_de_cours/api/bonnes_pratiques/#tri","text":"Utilisez comme valeur du param\u00e8tre le nom du champ avec un code pr\u00e9d\u00e9fini en pr\u00e9fixe ( + et - par exemple) qui indiquera si le tri est ascendant ou descendant. Le tri sur plus d'un champ devrait aussi \u00eatre permis. Exemple : /livres?tri=+titre,-prix pour trier par les livres titre de mani\u00e8re ascendante et par prix de mani\u00e8re descendante.","title":"tri"},{"location":"notes_de_cours/api/bonnes_pratiques/#selection-des-champs-retournes","text":"Il peut aussi \u00eatre pertinent de permettre au client de pouvoir s\u00e9lectionner uniquement les champs qu'il veut avoir dans la r\u00e9ponse \u00e0 la requ\u00eate. Exemple : /livres?champs=titre,isbn retournera la liste de tous les livres mais seulement le titres et isbn de chacun.","title":"S\u00e9lection des champs retourn\u00e9s"},{"location":"notes_de_cours/api/bonnes_pratiques/#pagination","text":"Il n'est pas rare qu'une ressource comporte plusieurs centaines sinon milliers d'enregistrements. On devrait permettre au client de pouvoir s\u00e9lectionner seulement une partie des enregistrements en d\u00e9finissant un point de d\u00e9part (offset) et un nombre d'enregistrement (limit). Si on utilise la pagination, on devrait d\u00e9finir des valeurs par d\u00e9faut au param\u00e8tre offset et limit (g\u00e9n\u00e9ralement offset sera \u00e9gale \u00e0 0 pour le premier enregistrement). Exemple : /livres?limit=50&offset=100 En partant du centi\u00e8me enregistrement, affiche les 50 livres suivants. Pour faciliter le traitement des donn\u00e9es, on devrait ajouter dans la r\u00e9ponse le nombre total d'enregistrements ainsi que les valeurs de limit et offset. Une autre technique est d'avoir un nombre d'enregistrement fixe par page et de seulement permettre \u00e0 l'usager de choisir la page qu'il veut afficher. Exemple, on d\u00e9cide d'afficher 30 enregistrements par page, l'url suivant va afficher les enregistrement 61 \u00e0 90 : /livres?page=3 On peut bien sur combiner les deux m\u00e9thodes comme c'est souvent le cas dans les sites d'achats en lignes (On peut choisir la page et le nombre d'articles affich\u00e9s par page).","title":"Pagination"},{"location":"notes_de_cours/api/bonnes_pratiques/#source","text":"https://www.moesif.com/blog/api-guide/api-design-guidelines/ https://www.freecodecamp.org/news/rest-api-best-practices-rest-endpoint-design-examples/ https://medium.com/@mwaysolutions/10-best-practices-for-better-restful-api-cbe81b06f291","title":"Source"},{"location":"notes_de_cours/api/cors/","text":"CORS (Cross-Origin Resource Sharing) C\u2019est un m\u00e9canisme qui consiste \u00e0 ajouter des en-t\u00eates HTTP afin de permettre \u00e0 un agent utilisateur d'acc\u00e9der \u00e0 des ressources d'un serveur situ\u00e9 sur une autre origine que le site courant. Pour des raisons de s\u00e9curit\u00e9, les requ\u00eates HTTP multi-origine \u00e9mises depuis les scripts sont restreintes. Les requ\u00eates GET et POST simple (sans ajout d\u2019informations d\u2019ent\u00eate) sont accept\u00e9es, sinon il y a une requ\u00eate OPTIONS qui est envoy\u00e9 vers la ressource de l'autre domaine afin de d\u00e9terminer quelle requ\u00eate peut \u00eatre envoy\u00e9e de fa\u00e7on s\u00e9curis\u00e9e. Dans cet exemple, on peut voir que j'ai envoy\u00e9 une requ\u00eate GET \u00e0 l'adresse /books . Une requ\u00e8te OPTIONS a \u00e9t\u00e9 envoy\u00e9 en \"reconnaissance\" et a \u00e9t\u00e9 bloqu\u00e9 par le m\u00e9canisme CORS. Pour que la requ\u00eate puisse \u00eatre accept\u00e9e, il faut faire des modifications au niveau de la r\u00e9ponse qu'envoie le serveur en ajoutant certaines informations dans son ent\u00eate. Access-Control-Allow-Origin Ce param\u00eatre nous permet de contr\u00f4ler l'origine des requ\u00eates qui seront accept\u00e9e. Si l'information n'est pas pr\u00e9sente, toutes les requ\u00eates outre que les GET et POST simple seront refus\u00e9. C'est exactement le probl\u00e8me de l'exemple plus haut. On peut d\u00e9cider d'accepter toutes les origines en utilisant le jeton * Access-Control-Allow-Origin: * Ou bien sp\u00e9cifier un domaine qui sera accept\u00e9 Access-Control-Allow-Origin: https://mathprof.ca Si on veut permettre une liste de domaine sans les permettre tous, il faudra le g\u00e9rer dans le code de notre serveur. On commence par r\u00e9cup\u00e9rer le domaine de la requ\u00eate entrante, on v\u00e9rifie s'il est pr\u00e9sent dans la liste de domaines qu'on permet et si oui on ajouter se domaine en valeur \u00e0 la cl\u00e9 Access-Control-Allow-Origin dans l'ent\u00eate de la r\u00e9ponse. Pour plus de d\u00e9tail : https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin Access-Control-Allow-Methods Ce param\u00eatre va indiquer quels sont les m\u00e9thodes HTTP (GET, POST, DELETE, etc.) qui sont accept\u00e9es. Encore une fois on peut utiliser le jeton * pour permettre toutes les m\u00e9thodes ou bien lister seulement celle voulue en les s\u00e9parant par une virgule. Access-Control-Allow-Methods: * Access-Control-Allow-Methods: POST, GET, OPTIONS Pour plus de d\u00e9tail : https://developer.mozilla.org/fr/docs/Web/HTTP/Headers/Access-Control-Allow-Methods Modification \u00e0 apporter dans le template SLIM Cr\u00e9ation d'un middleware pour ajouter l'information requise en ent\u00eate Pour ajouter les informations requises nous allons cr\u00e9er un middleware. Dans le r\u00e9pertoire src/Middleware cr\u00e9ez le fichier CorsMiddleware.php et copiez-y le code suivant : <?php /** * Source : Slim 4 - eBook par Daniel Opitz * * Published by Daniel Opitz * \u00a9 Copyright Daniel Opitz 2020-2021 * https://odan.github.io/ * */ namespace App\\Middleware; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\MiddlewareInterface; use Psr\\Http\\Server\\RequestHandlerInterface; use Slim\\Routing\\RouteContext; /** * CORS middleware. */ final class CorsMiddleware implements MiddlewareInterface { /** * Invoke middleware. * * @param ServerRequestInterface $request The request * @param RequestHandlerInterface $handler The handler * * @return ResponseInterface The response */ public function process( ServerRequestInterface $request, RequestHandlerInterface $handler ): ResponseInterface { $routeContext = RouteContext::fromRequest($request); $routingResults = $routeContext->getRoutingResults(); $methods = $routingResults->getAllowedMethods(); $requestHeaders = $request->getHeaderLine('Access-Control-Request-Headers'); $response = $handler->handle($request); $response = $response // Permet toutes les origines ->withHeader('Access-Control-Allow-Origin', '*') // Ajoute la ou les m\u00e9thodes de la requ\u00eate ->withHeader('Access-Control-Allow-Methods', implode(', ', $methods)) ->withHeader('Access-Control-Allow-Headers', $requestHeaders ?: '*'); // Optional: Allow Ajax CORS requests with Authorization header $response = $response->withHeader('Access-Control-Allow-Credentials', 'true'); return $response; } } Maintenant dans le fichier config/middleware.php ajoutez la ligne suivante $app->add(\\App\\Middleware\\CorsMiddleware::class); juste avant la ligne $app->addRoutingMiddleware(); Ajout de route pour les requ\u00eates OPTIONS On va aussi ajouter une route qui va \"attraper\" toutes les requ\u00eates de la m\u00e9thode OPTIONS. Dans le fichier route.php , ajouter la route suivante \u00e0 la toute fin. C'est important que \u00e7a soit la derni\u00e8re route de votre fichier. $app->options('/{routes:.*}', \\App\\Action\\PreflightAction::class); Ensuite, cr\u00e9ez le fichier PreflightAction.php dans le r\u00e9pertoire src/Action et copiez-y le code suivant : <?php namespace App\\Action; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; final class PreflightAction { public function __invoke( ServerRequestInterface $request, ResponseInterface $response ): ResponseInterface { return $response; } } C'est normal que la classe ne fasse que retourner la r\u00e9ponse de la requ\u00eate sans la modifier. En fait, le but est que les requ\u00eates OPTIONS soit trait\u00e9e aussi par le middleware CorsMiddleware . Pour aller plus loin CORS in 100 Seconds Documentation SLIM Documentation Mozilla","title":"CORS (Cross-Origin Resource Sharing)"},{"location":"notes_de_cours/api/cors/#cors-cross-origin-resource-sharing","text":"C\u2019est un m\u00e9canisme qui consiste \u00e0 ajouter des en-t\u00eates HTTP afin de permettre \u00e0 un agent utilisateur d'acc\u00e9der \u00e0 des ressources d'un serveur situ\u00e9 sur une autre origine que le site courant. Pour des raisons de s\u00e9curit\u00e9, les requ\u00eates HTTP multi-origine \u00e9mises depuis les scripts sont restreintes. Les requ\u00eates GET et POST simple (sans ajout d\u2019informations d\u2019ent\u00eate) sont accept\u00e9es, sinon il y a une requ\u00eate OPTIONS qui est envoy\u00e9 vers la ressource de l'autre domaine afin de d\u00e9terminer quelle requ\u00eate peut \u00eatre envoy\u00e9e de fa\u00e7on s\u00e9curis\u00e9e. Dans cet exemple, on peut voir que j'ai envoy\u00e9 une requ\u00eate GET \u00e0 l'adresse /books . Une requ\u00e8te OPTIONS a \u00e9t\u00e9 envoy\u00e9 en \"reconnaissance\" et a \u00e9t\u00e9 bloqu\u00e9 par le m\u00e9canisme CORS. Pour que la requ\u00eate puisse \u00eatre accept\u00e9e, il faut faire des modifications au niveau de la r\u00e9ponse qu'envoie le serveur en ajoutant certaines informations dans son ent\u00eate.","title":"CORS (Cross-Origin Resource Sharing)"},{"location":"notes_de_cours/api/cors/#access-control-allow-origin","text":"Ce param\u00eatre nous permet de contr\u00f4ler l'origine des requ\u00eates qui seront accept\u00e9e. Si l'information n'est pas pr\u00e9sente, toutes les requ\u00eates outre que les GET et POST simple seront refus\u00e9. C'est exactement le probl\u00e8me de l'exemple plus haut. On peut d\u00e9cider d'accepter toutes les origines en utilisant le jeton * Access-Control-Allow-Origin: * Ou bien sp\u00e9cifier un domaine qui sera accept\u00e9 Access-Control-Allow-Origin: https://mathprof.ca Si on veut permettre une liste de domaine sans les permettre tous, il faudra le g\u00e9rer dans le code de notre serveur. On commence par r\u00e9cup\u00e9rer le domaine de la requ\u00eate entrante, on v\u00e9rifie s'il est pr\u00e9sent dans la liste de domaines qu'on permet et si oui on ajouter se domaine en valeur \u00e0 la cl\u00e9 Access-Control-Allow-Origin dans l'ent\u00eate de la r\u00e9ponse. Pour plus de d\u00e9tail : https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin","title":"Access-Control-Allow-Origin"},{"location":"notes_de_cours/api/cors/#access-control-allow-methods","text":"Ce param\u00eatre va indiquer quels sont les m\u00e9thodes HTTP (GET, POST, DELETE, etc.) qui sont accept\u00e9es. Encore une fois on peut utiliser le jeton * pour permettre toutes les m\u00e9thodes ou bien lister seulement celle voulue en les s\u00e9parant par une virgule. Access-Control-Allow-Methods: * Access-Control-Allow-Methods: POST, GET, OPTIONS Pour plus de d\u00e9tail : https://developer.mozilla.org/fr/docs/Web/HTTP/Headers/Access-Control-Allow-Methods","title":"Access-Control-Allow-Methods"},{"location":"notes_de_cours/api/cors/#modification-a-apporter-dans-le-template-slim","text":"","title":"Modification \u00e0 apporter dans le template SLIM"},{"location":"notes_de_cours/api/cors/#creation-dun-middleware-pour-ajouter-linformation-requise-en-entete","text":"Pour ajouter les informations requises nous allons cr\u00e9er un middleware. Dans le r\u00e9pertoire src/Middleware cr\u00e9ez le fichier CorsMiddleware.php et copiez-y le code suivant : <?php /** * Source : Slim 4 - eBook par Daniel Opitz * * Published by Daniel Opitz * \u00a9 Copyright Daniel Opitz 2020-2021 * https://odan.github.io/ * */ namespace App\\Middleware; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; use Psr\\Http\\Server\\MiddlewareInterface; use Psr\\Http\\Server\\RequestHandlerInterface; use Slim\\Routing\\RouteContext; /** * CORS middleware. */ final class CorsMiddleware implements MiddlewareInterface { /** * Invoke middleware. * * @param ServerRequestInterface $request The request * @param RequestHandlerInterface $handler The handler * * @return ResponseInterface The response */ public function process( ServerRequestInterface $request, RequestHandlerInterface $handler ): ResponseInterface { $routeContext = RouteContext::fromRequest($request); $routingResults = $routeContext->getRoutingResults(); $methods = $routingResults->getAllowedMethods(); $requestHeaders = $request->getHeaderLine('Access-Control-Request-Headers'); $response = $handler->handle($request); $response = $response // Permet toutes les origines ->withHeader('Access-Control-Allow-Origin', '*') // Ajoute la ou les m\u00e9thodes de la requ\u00eate ->withHeader('Access-Control-Allow-Methods', implode(', ', $methods)) ->withHeader('Access-Control-Allow-Headers', $requestHeaders ?: '*'); // Optional: Allow Ajax CORS requests with Authorization header $response = $response->withHeader('Access-Control-Allow-Credentials', 'true'); return $response; } } Maintenant dans le fichier config/middleware.php ajoutez la ligne suivante $app->add(\\App\\Middleware\\CorsMiddleware::class); juste avant la ligne $app->addRoutingMiddleware();","title":"Cr\u00e9ation d'un middleware pour ajouter l'information requise en ent\u00eate"},{"location":"notes_de_cours/api/cors/#ajout-de-route-pour-les-requetes-options","text":"On va aussi ajouter une route qui va \"attraper\" toutes les requ\u00eates de la m\u00e9thode OPTIONS. Dans le fichier route.php , ajouter la route suivante \u00e0 la toute fin. C'est important que \u00e7a soit la derni\u00e8re route de votre fichier. $app->options('/{routes:.*}', \\App\\Action\\PreflightAction::class); Ensuite, cr\u00e9ez le fichier PreflightAction.php dans le r\u00e9pertoire src/Action et copiez-y le code suivant : <?php namespace App\\Action; use Psr\\Http\\Message\\ResponseInterface; use Psr\\Http\\Message\\ServerRequestInterface; final class PreflightAction { public function __invoke( ServerRequestInterface $request, ResponseInterface $response ): ResponseInterface { return $response; } } C'est normal que la classe ne fasse que retourner la r\u00e9ponse de la requ\u00eate sans la modifier. En fait, le but est que les requ\u00eates OPTIONS soit trait\u00e9e aussi par le middleware CorsMiddleware .","title":"Ajout de route pour les requ\u00eates OPTIONS"},{"location":"notes_de_cours/api/cors/#pour-aller-plus-loin","text":"CORS in 100 Seconds Documentation SLIM Documentation Mozilla","title":"Pour aller plus loin"},{"location":"notes_de_cours/api/documentation_api/","text":"Documentation de l'API Comme il est destin\u00e9 \u00e0 \u00eatre utilis\u00e9 par des utilisateurs externes, il est primordial de bien documenter notre API. Il existe plusieurs fa\u00e7ons de faire, la plus simple \u00e9tant de seulement lister toutes les routes possibles en indiquant leur fonction. Nous allons y aller de fa\u00e7on plus professionnel en utilisant le standard OpenAPI. OpenAPI nous permet de d\u00e9crire l\u2019api dans son ensemble, les routes (endpoints), les requ\u00eates et les formats de r\u00e9ponse, la m\u00e9thode d\u2019authentification, etc. Le d\u00e9finition peut \u00eatre \u00e9crite en JSON ou YAML, nous allons pour notre projet utiliser le format YAML. Utilisation de Swagger.io On va utiliser les services du site Swagger.io qui nous offre un \u00e9diteur OpenAPI gratuit. Cr\u00e9ez vous un compte gratuit sur https://swagger.io/ Ensuite dans myHub, cr\u00e9ez un nouvel api avec les configurations suivantes : OpenApiVersion : 3.0.0 Template : none Name, Title, description : Ce que vous voulez Version : 1.0.0 Auto Mock API : Off Une fois la documentation r\u00e9dig\u00e9e dans l'\u00e9diteur de Swagger, vous pouvez l'exporter dans plusieurs format ou simplement la recopier dans le fichier YAML de votre projet. Le format OpenAPI Voici un exemple de la documentation d'un API en OpenAPI sur Swagger.io : https://app.swaggerhub.com/apis/MathFrechette/libAPI/1.0.0 . Les exemples qui suivent utiliseront cette documentation. Dans notre projet il y a d\u00e9j\u00e0 un template de page web pour afficher la documentation de fa\u00e7on bien format\u00e9e. Le fichier de documentation est divis\u00e9 en plusieurs sections (info, servers, paths et components) qu'on va d\u00e9crire plus bas. Chose importante \u00e0 savoir, dans un fichier yaml l'indentation est tr\u00e8s importante (un peu comme en Python). info et servers On va y d\u00e9clarer les informations g\u00e9n\u00e9rales de notre API info: version: 1.0.0 title: LibAPI description: Un API de livres cr\u00e9\u00e9 dans le cadre du cours Services Web H2021 servers: - url: http://localhost/libapi version : La version de l'api, \u00e0 votre guise pour l'instant on ne versionne pas notre projet. title : Le titre de notre api description : Une courte description de notre api url : L'url de base de votre api paths Dans cette section nous allons d\u00e9crire toutes les routes qui composent notre API paths: /books: get: tags: - Livre summary: Affiche la liste de tous les livres. parameters: - name: titre in: query name: titre schema: type: string required: false description: Une valeur pour filter par le titre responses: '200': description: Un tableau de livres content: application/json: schema: $ref: '#/components/schemas/Livres' /books: Le nom de la route get: La m\u00e9thode utilis\u00e9 par la route tags: Un mot-cl\u00e9 pour regrouper des routes similaires summary: Une courte description de la route parameters Les diff\u00e9rents param\u00e8tres de la route (chaque bloc de param\u00e8tre commence par le symbole -) name: Le nom utilis\u00e9 pour le param\u00e8tre. in: query ou path (est-ce que le param\u00e8tre est situ\u00e9 dans la section query de l'url ou dans le chemin) schema: On va d\u00e9finir le type de valeur attendu (string, integer) avec type: required: Est-ce que le param\u00e8tre est requis ou optionnel description: Une description de l'utilit\u00e9 du param\u00e8tre. responses Les informations sur le format de la r\u00e9ponse. On peut en d\u00e9finir plus d'une, comme par exemple en cas de succ\u00e8s ou d'\u00e9chec de la requ\u00eate. '200': Le code de statut HTTP retourn\u00e9 description: Une description du contenu de la r\u00e9ponse. application/json: Le format de la r\u00e9ponse, dans notre cas on va toujours utiliser ce format. schema: Une description du contenu de la r\u00e9ponse et un exemple de r\u00e9sultat. Dans l'exemple on utilise un sch\u00e9ma pr\u00e9d\u00e9fini qu'on va voir plus loin. On aurait aussi pu le d\u00e9crire ici, en voici un exemple : schema: type: object properties: id: type: integer format: int64 genreId: type: integer format: int64 titre: type: string isbn: type: string example: id: 1 genreId : 1 titre: Fondation isbn: '9782070463619' components Ici on peut d\u00e9finir un mod\u00e8le de donn\u00e9es qu'on va pouvoir r\u00e9utiliser dans plus d'une route. components: schemas: Livre: type: object required: - genreId - titre - isbn properties: id: type: integer format: int64 genreId: type: integer format: int64 titre: type: string isbn: type: string example: id: 1 genreId : 1 titre: Fondation isbn: '9782070463619' Livre: Le nom du sch\u00e9ma, c'est ce nom qu'on va utiliser dans l'url de la propri\u00e9t\u00e9 $ref dans la d\u00e9finition de la route. (voir exemple plus haut) type: Le type de donn\u00e9e required: Les champs requis s'il y en a properties: Une description des champs requis id: Le nom du champs. format: Le type de donn\u00e9e format: optionnel, pour pr\u00e9ciser le type de donn\u00e9e exemple: Un exemple de donn\u00e9es avec le nom des champs et une valeur pour chacun Source Pour plus d'informations je vous invite \u00e0 consulter ces deux sites : https://oai.github.io/Documentation/start-here.html https://swagger.io/docs/specification/about/","title":"Documentation de l'API"},{"location":"notes_de_cours/api/documentation_api/#documentation-de-lapi","text":"Comme il est destin\u00e9 \u00e0 \u00eatre utilis\u00e9 par des utilisateurs externes, il est primordial de bien documenter notre API. Il existe plusieurs fa\u00e7ons de faire, la plus simple \u00e9tant de seulement lister toutes les routes possibles en indiquant leur fonction. Nous allons y aller de fa\u00e7on plus professionnel en utilisant le standard OpenAPI. OpenAPI nous permet de d\u00e9crire l\u2019api dans son ensemble, les routes (endpoints), les requ\u00eates et les formats de r\u00e9ponse, la m\u00e9thode d\u2019authentification, etc. Le d\u00e9finition peut \u00eatre \u00e9crite en JSON ou YAML, nous allons pour notre projet utiliser le format YAML.","title":"Documentation de l'API"},{"location":"notes_de_cours/api/documentation_api/#utilisation-de-swaggerio","text":"On va utiliser les services du site Swagger.io qui nous offre un \u00e9diteur OpenAPI gratuit. Cr\u00e9ez vous un compte gratuit sur https://swagger.io/ Ensuite dans myHub, cr\u00e9ez un nouvel api avec les configurations suivantes : OpenApiVersion : 3.0.0 Template : none Name, Title, description : Ce que vous voulez Version : 1.0.0 Auto Mock API : Off Une fois la documentation r\u00e9dig\u00e9e dans l'\u00e9diteur de Swagger, vous pouvez l'exporter dans plusieurs format ou simplement la recopier dans le fichier YAML de votre projet.","title":"Utilisation de Swagger.io"},{"location":"notes_de_cours/api/documentation_api/#le-format-openapi","text":"Voici un exemple de la documentation d'un API en OpenAPI sur Swagger.io : https://app.swaggerhub.com/apis/MathFrechette/libAPI/1.0.0 . Les exemples qui suivent utiliseront cette documentation. Dans notre projet il y a d\u00e9j\u00e0 un template de page web pour afficher la documentation de fa\u00e7on bien format\u00e9e. Le fichier de documentation est divis\u00e9 en plusieurs sections (info, servers, paths et components) qu'on va d\u00e9crire plus bas. Chose importante \u00e0 savoir, dans un fichier yaml l'indentation est tr\u00e8s importante (un peu comme en Python).","title":"Le format OpenAPI"},{"location":"notes_de_cours/api/documentation_api/#info-et-servers","text":"On va y d\u00e9clarer les informations g\u00e9n\u00e9rales de notre API info: version: 1.0.0 title: LibAPI description: Un API de livres cr\u00e9\u00e9 dans le cadre du cours Services Web H2021 servers: - url: http://localhost/libapi version : La version de l'api, \u00e0 votre guise pour l'instant on ne versionne pas notre projet. title : Le titre de notre api description : Une courte description de notre api url : L'url de base de votre api","title":"info et servers"},{"location":"notes_de_cours/api/documentation_api/#paths","text":"Dans cette section nous allons d\u00e9crire toutes les routes qui composent notre API paths: /books: get: tags: - Livre summary: Affiche la liste de tous les livres. parameters: - name: titre in: query name: titre schema: type: string required: false description: Une valeur pour filter par le titre responses: '200': description: Un tableau de livres content: application/json: schema: $ref: '#/components/schemas/Livres' /books: Le nom de la route get: La m\u00e9thode utilis\u00e9 par la route tags: Un mot-cl\u00e9 pour regrouper des routes similaires summary: Une courte description de la route parameters Les diff\u00e9rents param\u00e8tres de la route (chaque bloc de param\u00e8tre commence par le symbole -) name: Le nom utilis\u00e9 pour le param\u00e8tre. in: query ou path (est-ce que le param\u00e8tre est situ\u00e9 dans la section query de l'url ou dans le chemin) schema: On va d\u00e9finir le type de valeur attendu (string, integer) avec type: required: Est-ce que le param\u00e8tre est requis ou optionnel description: Une description de l'utilit\u00e9 du param\u00e8tre. responses Les informations sur le format de la r\u00e9ponse. On peut en d\u00e9finir plus d'une, comme par exemple en cas de succ\u00e8s ou d'\u00e9chec de la requ\u00eate. '200': Le code de statut HTTP retourn\u00e9 description: Une description du contenu de la r\u00e9ponse. application/json: Le format de la r\u00e9ponse, dans notre cas on va toujours utiliser ce format. schema: Une description du contenu de la r\u00e9ponse et un exemple de r\u00e9sultat. Dans l'exemple on utilise un sch\u00e9ma pr\u00e9d\u00e9fini qu'on va voir plus loin. On aurait aussi pu le d\u00e9crire ici, en voici un exemple : schema: type: object properties: id: type: integer format: int64 genreId: type: integer format: int64 titre: type: string isbn: type: string example: id: 1 genreId : 1 titre: Fondation isbn: '9782070463619'","title":"paths"},{"location":"notes_de_cours/api/documentation_api/#components","text":"Ici on peut d\u00e9finir un mod\u00e8le de donn\u00e9es qu'on va pouvoir r\u00e9utiliser dans plus d'une route. components: schemas: Livre: type: object required: - genreId - titre - isbn properties: id: type: integer format: int64 genreId: type: integer format: int64 titre: type: string isbn: type: string example: id: 1 genreId : 1 titre: Fondation isbn: '9782070463619' Livre: Le nom du sch\u00e9ma, c'est ce nom qu'on va utiliser dans l'url de la propri\u00e9t\u00e9 $ref dans la d\u00e9finition de la route. (voir exemple plus haut) type: Le type de donn\u00e9e required: Les champs requis s'il y en a properties: Une description des champs requis id: Le nom du champs. format: Le type de donn\u00e9e format: optionnel, pour pr\u00e9ciser le type de donn\u00e9e exemple: Un exemple de donn\u00e9es avec le nom des champs et une valeur pour chacun","title":"components"},{"location":"notes_de_cours/api/documentation_api/#source","text":"Pour plus d'informations je vous invite \u00e0 consulter ces deux sites : https://oai.github.io/Documentation/start-here.html https://swagger.io/docs/specification/about/","title":"Source"},{"location":"notes_de_cours/api/json/","text":"Le format JSON JSON ( J ava S cript O bject N otation) est un format cr\u00e9\u00e9 pour faciliter l'\u00e9change de donn\u00e9es entre diff\u00e9rents syst\u00e8mes. Bien que grandement inspir\u00e9 de la notation objet de JavaScript le format JSON est ind\u00e9pendant de tout langage et peut \u00eatre interpr\u00e9ter par la majorit\u00e9 des diff\u00e9rents langage de programmation. Structure de base Les deux structures suivantes sont utilis\u00e9es pour construire notre JSON : L'objet Une suite d'\u00e9l\u00e9ments cl\u00e9/valeurs, s\u00e9rar\u00e9s par une virgule. L'objet sera entour\u00e9 par des accolades. { \"cle1\" : \"valeur1\", \"cle2\" : \"valeur2\" } Le tableau Une suite d'\u00e9l\u00e9ments ordonn\u00e9s, s\u00e9par\u00e9e par une virgule et entour\u00e9e par des crochets [ ] [\"valeur1\", \"valeur2\"] On peut m\u00e9langer les deux structures sans probl\u00e8me (un tableau d'objet, une valeur de l'objet est un tableau, etc.) { \"cle1\" : [ \"valeur1\", \"valeur2\" ], \"cle2\" : \"valeur2\" } Il est aussi possible d'avoir un objet ou un tableau vide, qu'on notera respectivement {} et []. Liste des valeurs possibles String : du texte entour\u00e9 de guillemets \" Nombre : sans les guillemets, on peut utiliser les d\u00e9cimales avec le point et les exposants avec le caract\u00e8re e . objet : comme vu plus haut, liste de cl\u00e9/valeur entour\u00e9es par des accolades tableau : liste d'items entour\u00e9s de crochet bool\u00e9an : utilisez true ou false sans guillemets et en minuscule valeur nulle : null sans guillemets et en minuscule Note sur les dates : Le format date n'\u00e9tant pas pleinenement support\u00e9, on devrait par pr\u00e9caution les convertir en texte. Sources Toutes les images proviennent du site www.json.org ECMA-404 The JSON Data Interchange Standard. www.json.org Standart de l'ECMA en version PDF Validateur de format JSON : www.jsonlint.com","title":"Le format JSON"},{"location":"notes_de_cours/api/json/#le-format-json","text":"JSON ( J ava S cript O bject N otation) est un format cr\u00e9\u00e9 pour faciliter l'\u00e9change de donn\u00e9es entre diff\u00e9rents syst\u00e8mes. Bien que grandement inspir\u00e9 de la notation objet de JavaScript le format JSON est ind\u00e9pendant de tout langage et peut \u00eatre interpr\u00e9ter par la majorit\u00e9 des diff\u00e9rents langage de programmation.","title":"Le format JSON"},{"location":"notes_de_cours/api/json/#structure-de-base","text":"Les deux structures suivantes sont utilis\u00e9es pour construire notre JSON :","title":"Structure de base"},{"location":"notes_de_cours/api/json/#lobjet","text":"Une suite d'\u00e9l\u00e9ments cl\u00e9/valeurs, s\u00e9rar\u00e9s par une virgule. L'objet sera entour\u00e9 par des accolades. { \"cle1\" : \"valeur1\", \"cle2\" : \"valeur2\" }","title":"L'objet"},{"location":"notes_de_cours/api/json/#le-tableau","text":"Une suite d'\u00e9l\u00e9ments ordonn\u00e9s, s\u00e9par\u00e9e par une virgule et entour\u00e9e par des crochets [ ] [\"valeur1\", \"valeur2\"] On peut m\u00e9langer les deux structures sans probl\u00e8me (un tableau d'objet, une valeur de l'objet est un tableau, etc.) { \"cle1\" : [ \"valeur1\", \"valeur2\" ], \"cle2\" : \"valeur2\" } Il est aussi possible d'avoir un objet ou un tableau vide, qu'on notera respectivement {} et [].","title":"Le tableau"},{"location":"notes_de_cours/api/json/#liste-des-valeurs-possibles","text":"String : du texte entour\u00e9 de guillemets \" Nombre : sans les guillemets, on peut utiliser les d\u00e9cimales avec le point et les exposants avec le caract\u00e8re e . objet : comme vu plus haut, liste de cl\u00e9/valeur entour\u00e9es par des accolades tableau : liste d'items entour\u00e9s de crochet bool\u00e9an : utilisez true ou false sans guillemets et en minuscule valeur nulle : null sans guillemets et en minuscule Note sur les dates : Le format date n'\u00e9tant pas pleinenement support\u00e9, on devrait par pr\u00e9caution les convertir en texte.","title":"Liste des valeurs possibles"},{"location":"notes_de_cours/api/json/#sources","text":"Toutes les images proviennent du site www.json.org ECMA-404 The JSON Data Interchange Standard. www.json.org Standart de l'ECMA en version PDF Validateur de format JSON : www.jsonlint.com","title":"Sources"},{"location":"notes_de_cours/api/unit_test/","text":"Tester notre API Pourquoi tester notre application? D\u00e8s qu\u2019on ajoute du code \u00e0 notre application, on ouvre la porte \u00e0 ajouter aussi de possible erreurs ou comportement qu\u2019on avait pas pr\u00e9vu. Pour s\u2019assurer d\u2019avoir une application solide et plus facilement modifiable, c\u2019est une bonne pratique de programmer des tests qu\u2019on pourra lancer au besoin par un script. Plusieurs possibilit\u00e9s s\u2019offrent \u00e0 nous comme plate-forme de tests si on ne veut pas tout programmer nous-m\u00eame. Dans le cadre du cours on va en voir 2 : Postman, qui offre la possibilit\u00e9 d\u2019inclure des tests script\u00e9s en javascript. PHPUnit, un framework php Tester avec Postman Dans l'interface de postman, on peut scripter des tests dans l'onglet Tests d'une requ\u00eate. Les scripts de tests sont cod\u00e9s en javascript et seront lanc\u00e9s une fois la r\u00e9ponse de l\u2019appel \u00e0 l\u2019api re\u00e7u. Chaque test aura la structure suivante : pm.test(\"Description du test\", function() { // Le script du test }) Le r\u00e9sultat des tests se retrouvent dans la section Response sous l\u2019onglet Test Results. Exemple d'une s\u00e9rie de test /* Structure de la r\u00e9ponse [ { \"id\": \"54\", \"genreId\": \"1\", \"titre\": \"Fondation\", \"isbn\": \"9782070463619\" }, ] */ // La constante jsonData va contenir un objet json de la r\u00e9ponse const jsonData = pm.response.json(); pm.test(\"La r\u00e9ponse retourne le code 200\", function () { pm.response.to.have.status(200); }); pm.test(\"La r\u00e9ponse est un tableau\", function () { pm.expect(jsonData).to.be.an(\"array\"); }) pm.test(\"Les items du tableau de la r\u00e9ponse ont les bonnes cl\u00e9s\", function() { if(jsonData.length > 0){ // Valide que le premier item du tableau books contient les cl\u00e9s id, genreId, titre et isbn pm.expect(jsonData[0]).to.have.all.keys('id', 'genreId', 'titre','isbn'); } }) pm.test(\"Les items du tableau de la r\u00e9ponse ont les bons types\", function() { if(jsonData.length > 0){ pm.expect(jsonData[0].id).to.be.a(\"string\"); pm.expect(jsonData[0].genreId).to.be.a(\"string\"); pm.expect(jsonData[0].titre).to.be.a(\"string\"); pm.expect(jsonData[0].isbn).to.be.a(\"string\"); } }) Notre premier test \u00c0 l'aide de la route https://api.chucknorris.io/jokes/random testez que les cl\u00e9s url ou value soient bien pr\u00e9sente dans la r\u00e9ponse. Pour plus d'information et d'exemples, consultez la documentation de Postman : https://learning.postman.com/docs/writing-scripts/script-references/test-examples/ Tester avec PHPUnit Installation et int\u00e9gration dans un projet Faites l\u2019installation de PHPUnit comme d\u00e9pendance de d\u00e9veloppement avec la commande suivante composer require phpunit/phpunit --dev Chaque tests sera une classe PHP qui sera pr\u00e9sente dans le r\u00e9pertoire tests/TestCase/ de notre application Cr\u00e9er le r\u00e9pertoire ./tests/TestCase/ \u00e0 la racine de l\u2019application Avec git bash vous pouvez faire la commande mkdir \u2013p tests/TestCase Ouvrez de fichier composer.json et ajoutez les lignes suivantes \u00e0 la suite du fichier \"scripts\": { \"test\": \"phpunit --configuration phpunit.xml --testdox\", \"test:coverage\": \"phpunit --configuration phpunit.xml --coverage-clover build/logs/clover.xml --coverage-html build/coverage\" } Configuration de PHPUnit Cr\u00e9ez le fichier phpunit.xml \u00e0 la racine de l\u2019application. La configuration de PHPUnit se fera dans ce fichier. Copiez le code suivant dans le fichier. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bootstrap=\"vendor/autoload.php\" colors=\"true\" backupGlobals=\"false\" backupStaticAttributes=\"false\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.3/phpunit.xsd\"> <coverage processUncoveredFiles=\"false\"> <include> <directory suffix=\".php\">src</directory> </include> <exclude> <directory>vendor</directory> <directory>build</directory> </exclude> </coverage> <testsuites> <testsuite name=\"Tests\"> <directory suffix=\"Test.php\">tests</directory> </testsuite> </testsuites> </phpunit> Modifiez le fichier .gitignore pour ajouter la ligne suivante build/ . Ex\u00e9cuter les tests Pour lancer les tests, faire la commande suivante dans un terimal \u00e0 la racine de l\u2019application composer test Pour lancer les tests avec une couverture du code, faire la commande suivante composer test:coverage Apr\u00e8s avoir lanc\u00e9 composer test:coverage , vous aurez acc\u00e8s \u00e0 deux pages html de r\u00e9sum\u00e9 des tests dans le r\u00e9pertoire build/coverage . Erreur avec la commande test:coverage Si vous utilisez AMPPS et que vous rencontrez l\u2019erreur suivante Error: No code coverage driver is available , il vous faut \u00e9diter le fichier php.ini de la fa\u00e7on suivante : // Modifiez ces lignes ;Xdebug ;zend_extension=\"{$path}\\php-7.3\\lib\\php_xdebug.dll\" // Comme ceci [Xdebug] zend_extension=\"{$path}\\php-7.3\\lib\\php_xdebug.dll\" // Et ajoutez les deux lignes suivantes \u00e0 la suite xdebug.remote_autostart = 1 xdebug.remote_enable = 1 Pour acc\u00e9der rapidement au fichier php.ini, affichez le tableau de bord de Ammps et \u00e0 la ligne PHP cliquez sur Settings et ensuite Configuration . Ajouter un \"trait\" \u00e0 notre projet Un trait est une sorte de classe abstraite qui nous permet de regrouper des fonctionnalit\u00e9s pour ensuite les utiliser dans des classes. On va ajouter un trait \u00e0 notre projet pour faciliter l'execution des tests. Dans votre projet, cr\u00e9ez le r\u00e9pertoire tests\\Traits T\u00e9l\u00e9chargez le fichier AppTestTrait.php et copiez-le dans le r\u00e9pertoire nouvellement cr\u00e9\u00e9. Comme vous pouvez voir, le fichier contient d\u00e9j\u00e0 sont lots de fonctions qu'on va pouvoir utiliser pour l'\u00e9x\u00e9cution de nos tests. Vous n'avez pas besoin de \"comprendre\" tous les fonctions, le but ici \u00e9tant de se concentrer sur l'\u00e9criture des tests. Notre premier test unitaire Un test unitaire est un test effectu\u00e9 sur une seule classe PHP. Supposons une classe Calculator.php situ\u00e9 dans src/Support/ . Notre classe \u00e0 une seule fonction add() qui prends en param\u00eatre deux entiers et les additionne : <?php namespace App\\Support; class Calculator { public function add(int $a, int $b): int { return $a + $b; } } ?> On va cr\u00e9er une classe qui contiendra nos tests dans le r\u00e9pertoire tests/TestCase/Support/CalculatorTest.php . Par convention on va respecter l\u2019arborescence des r\u00e9pertoires (/Support) et le nom de la classe test va \u00eatre le m\u00eame que celui de la classe test\u00e9e \u00e0 laquelle on ajoute le suffixe Test (Calculator deviendra CalculatorTest). La classe doit \"\u00e9tendre\" (extends) TestCase qui, une classe de PHPUnit qui nous permettra de faire nos test. Voici un exemple de test o\u00f9 l'on s'assure que la fonction add() retourne le bon r\u00e9sultat. <?php // CalculatorTest.php namespace App\\Test\\TestCase\\Support; use App\\Support\\Calculator; use PHPUnit\\Framework\\TestCase; // Oubliez pas d'ajouter extends TestCase class CalculatorTest extends TestCase { public function testAddReturnValidSum(): void { // Cr\u00e9ation d'un objet Calculator $calculator = new Calculator(); // Ex\u00e9cution de la fonction add $result = $calculator->add(30, 12); // Ici on \"assert\" que la fonction add de la // classe Calculator retourne la bonne valeur $this->assertEquals(42, $result); } } Et maintenant pour lan\u00e7ons notre test avec la commande composer test \u00e0 partir d'une console \u00e0 la racine de notre projet. R\u00e9sultat positif Si on lance le test avec notre exemple, on va avoir le r\u00e9sultat suivant. On peut voir que la fonction testAddReturnValidSum retourne un r\u00e9sultat valide. C\u2019est le nom de la fonction qui est utilis\u00e9 comme titre dans le r\u00e9sultat des tests. Il faut qu\u2019elle commence par test et qu\u2019on utilise le \u00ab CamelCase \u00bb testAddReturnValidSum => Add return valid sum. R\u00e9sultat n\u00e9gatif Si on modifie la valeur de la ligne 17 de CalculatorTest.php pour 421 au lieu de 42 (pour simuler un erreur dans notre fonction), on aura le r\u00e9sultat suivant : Tests unitaires de nos routes On va cr\u00e9er une classe par route qu\u2019on veut tester. Elle sera cr\u00e9er dans le r\u00e9pertoire tests/TestCase/[La m\u00eame structure que la classe \u00e0 tester] Exemple d'une classe test Je veux un test qui couvre la classe src/Action/Book/BookViewByIdAction.php , je vais cr\u00e9er ma classe test dans le r\u00e9pertoire tests/TestCase/Action/Book . On pourrait seulement la cr\u00e9er dans tests/TestCase mais la premi\u00e8re structure permet de garder le code claire, surtout si on a beaucoup de tests \u00e0 cr\u00e9er. La classe test va porter le m\u00eame nom que la classe test\u00e9 en y ajoutant Test \u00e0 la fin. Je veux tester BookViewByIdAction, ma classe test va donc se nommer BookViewByIdActionTest. La classe va \u00ab extends \u00bb TestCase et utiliser AppTestTrait (voir code exemple plus loin). Ensuite on va cr\u00e9e une ou des fonctions qui vont contenir nos tests. Le nom de la fonction doit obligatoirement commencer par test. Le nom de la fonction sera ce qui est affich\u00e9 dans le r\u00e9sultat. Le mot test du d\u00e9but sera supprim\u00e9 et le caract\u00e8re _ deviendra un espace. testBookViewById_Retourne_les_bonnes_valeurs devient BookViewById Retourne les bonnes valeurs <?php namespace App\\Test\\TestCase\\Action\\Book; use App\\Test\\Traits\\AppTestTrait; use PHPUnit\\Framework\\TestCase; class BookViewByIdActionTest extends TestCase { // On inclus ici une r\u00e9f\u00e9rence au trait qu'on a cr\u00e9\u00e9 plus haut use AppTestTrait; public function testBookViewById_Retourne_les_bonnes_valeurs(): void { // Les valeurs de retour attendues $expected = [ [ \"id\" => \"74\", \"genreId\" => \"1\", \"titre\" => \"Blade Runner\", \"isbn\" => \"9782290314944\" ] ]; // On cr\u00e9e la requ\u00eate en faisant un appel \u00e0 la route \u00e0 tester // la fonction createJsonRequest provient du trait AppTestTrait $request = $this->createJsonRequest('GET', '/books/74'); // On effectue la requ\u00eate et r\u00e9cup\u00e8re le r\u00e9sultat $response = $this->app->handle($request); // C'est ici qu'on fait nos affirmations (assert) // J'affirme que le code de statut de la r\u00e9ponse est 200 $this->assertSame(200, $response->getStatusCode()); // J'affirme que les valeurs de retour correspondent \u00e0 ce qui est attendu $this->assertJsonData($expected, $response); } } R\u00e9f\u00e9rences Postman https://learning.postman.com/docs/writing-scripts/test-scripts/ https://learning.postman.com/docs/writing-scripts/script-references/test-examples/ PHPUnit https://phpunit.de/getting-started/phpunit-9.html https://phpunit.readthedocs.io/fr/latest/","title":"Tester notre API"},{"location":"notes_de_cours/api/unit_test/#tester-notre-api","text":"","title":"Tester notre API"},{"location":"notes_de_cours/api/unit_test/#pourquoi-tester-notre-application","text":"D\u00e8s qu\u2019on ajoute du code \u00e0 notre application, on ouvre la porte \u00e0 ajouter aussi de possible erreurs ou comportement qu\u2019on avait pas pr\u00e9vu. Pour s\u2019assurer d\u2019avoir une application solide et plus facilement modifiable, c\u2019est une bonne pratique de programmer des tests qu\u2019on pourra lancer au besoin par un script. Plusieurs possibilit\u00e9s s\u2019offrent \u00e0 nous comme plate-forme de tests si on ne veut pas tout programmer nous-m\u00eame. Dans le cadre du cours on va en voir 2 : Postman, qui offre la possibilit\u00e9 d\u2019inclure des tests script\u00e9s en javascript. PHPUnit, un framework php","title":"Pourquoi tester notre application?"},{"location":"notes_de_cours/api/unit_test/#tester-avec-postman","text":"Dans l'interface de postman, on peut scripter des tests dans l'onglet Tests d'une requ\u00eate. Les scripts de tests sont cod\u00e9s en javascript et seront lanc\u00e9s une fois la r\u00e9ponse de l\u2019appel \u00e0 l\u2019api re\u00e7u. Chaque test aura la structure suivante : pm.test(\"Description du test\", function() { // Le script du test }) Le r\u00e9sultat des tests se retrouvent dans la section Response sous l\u2019onglet Test Results.","title":"Tester avec Postman"},{"location":"notes_de_cours/api/unit_test/#exemple-dune-serie-de-test","text":"/* Structure de la r\u00e9ponse [ { \"id\": \"54\", \"genreId\": \"1\", \"titre\": \"Fondation\", \"isbn\": \"9782070463619\" }, ] */ // La constante jsonData va contenir un objet json de la r\u00e9ponse const jsonData = pm.response.json(); pm.test(\"La r\u00e9ponse retourne le code 200\", function () { pm.response.to.have.status(200); }); pm.test(\"La r\u00e9ponse est un tableau\", function () { pm.expect(jsonData).to.be.an(\"array\"); }) pm.test(\"Les items du tableau de la r\u00e9ponse ont les bonnes cl\u00e9s\", function() { if(jsonData.length > 0){ // Valide que le premier item du tableau books contient les cl\u00e9s id, genreId, titre et isbn pm.expect(jsonData[0]).to.have.all.keys('id', 'genreId', 'titre','isbn'); } }) pm.test(\"Les items du tableau de la r\u00e9ponse ont les bons types\", function() { if(jsonData.length > 0){ pm.expect(jsonData[0].id).to.be.a(\"string\"); pm.expect(jsonData[0].genreId).to.be.a(\"string\"); pm.expect(jsonData[0].titre).to.be.a(\"string\"); pm.expect(jsonData[0].isbn).to.be.a(\"string\"); } })","title":"Exemple d'une s\u00e9rie de test"},{"location":"notes_de_cours/api/unit_test/#notre-premier-test","text":"\u00c0 l'aide de la route https://api.chucknorris.io/jokes/random testez que les cl\u00e9s url ou value soient bien pr\u00e9sente dans la r\u00e9ponse. Pour plus d'information et d'exemples, consultez la documentation de Postman : https://learning.postman.com/docs/writing-scripts/script-references/test-examples/","title":"Notre premier test"},{"location":"notes_de_cours/api/unit_test/#tester-avec-phpunit","text":"","title":"Tester avec PHPUnit"},{"location":"notes_de_cours/api/unit_test/#installation-et-integration-dans-un-projet","text":"Faites l\u2019installation de PHPUnit comme d\u00e9pendance de d\u00e9veloppement avec la commande suivante composer require phpunit/phpunit --dev Chaque tests sera une classe PHP qui sera pr\u00e9sente dans le r\u00e9pertoire tests/TestCase/ de notre application Cr\u00e9er le r\u00e9pertoire ./tests/TestCase/ \u00e0 la racine de l\u2019application Avec git bash vous pouvez faire la commande mkdir \u2013p tests/TestCase Ouvrez de fichier composer.json et ajoutez les lignes suivantes \u00e0 la suite du fichier \"scripts\": { \"test\": \"phpunit --configuration phpunit.xml --testdox\", \"test:coverage\": \"phpunit --configuration phpunit.xml --coverage-clover build/logs/clover.xml --coverage-html build/coverage\" }","title":"Installation et int\u00e9gration dans un projet"},{"location":"notes_de_cours/api/unit_test/#configuration-de-phpunit","text":"Cr\u00e9ez le fichier phpunit.xml \u00e0 la racine de l\u2019application. La configuration de PHPUnit se fera dans ce fichier. Copiez le code suivant dans le fichier. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bootstrap=\"vendor/autoload.php\" colors=\"true\" backupGlobals=\"false\" backupStaticAttributes=\"false\" xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/9.3/phpunit.xsd\"> <coverage processUncoveredFiles=\"false\"> <include> <directory suffix=\".php\">src</directory> </include> <exclude> <directory>vendor</directory> <directory>build</directory> </exclude> </coverage> <testsuites> <testsuite name=\"Tests\"> <directory suffix=\"Test.php\">tests</directory> </testsuite> </testsuites> </phpunit> Modifiez le fichier .gitignore pour ajouter la ligne suivante build/ .","title":"Configuration de PHPUnit"},{"location":"notes_de_cours/api/unit_test/#executer-les-tests","text":"Pour lancer les tests, faire la commande suivante dans un terimal \u00e0 la racine de l\u2019application composer test Pour lancer les tests avec une couverture du code, faire la commande suivante composer test:coverage Apr\u00e8s avoir lanc\u00e9 composer test:coverage , vous aurez acc\u00e8s \u00e0 deux pages html de r\u00e9sum\u00e9 des tests dans le r\u00e9pertoire build/coverage .","title":"Ex\u00e9cuter les tests"},{"location":"notes_de_cours/api/unit_test/#erreur-avec-la-commande-testcoverage","text":"Si vous utilisez AMPPS et que vous rencontrez l\u2019erreur suivante Error: No code coverage driver is available , il vous faut \u00e9diter le fichier php.ini de la fa\u00e7on suivante : // Modifiez ces lignes ;Xdebug ;zend_extension=\"{$path}\\php-7.3\\lib\\php_xdebug.dll\" // Comme ceci [Xdebug] zend_extension=\"{$path}\\php-7.3\\lib\\php_xdebug.dll\" // Et ajoutez les deux lignes suivantes \u00e0 la suite xdebug.remote_autostart = 1 xdebug.remote_enable = 1 Pour acc\u00e9der rapidement au fichier php.ini, affichez le tableau de bord de Ammps et \u00e0 la ligne PHP cliquez sur Settings et ensuite Configuration .","title":"Erreur avec la commande test:coverage"},{"location":"notes_de_cours/api/unit_test/#ajouter-un-trait-a-notre-projet","text":"Un trait est une sorte de classe abstraite qui nous permet de regrouper des fonctionnalit\u00e9s pour ensuite les utiliser dans des classes. On va ajouter un trait \u00e0 notre projet pour faciliter l'execution des tests. Dans votre projet, cr\u00e9ez le r\u00e9pertoire tests\\Traits T\u00e9l\u00e9chargez le fichier AppTestTrait.php et copiez-le dans le r\u00e9pertoire nouvellement cr\u00e9\u00e9. Comme vous pouvez voir, le fichier contient d\u00e9j\u00e0 sont lots de fonctions qu'on va pouvoir utiliser pour l'\u00e9x\u00e9cution de nos tests. Vous n'avez pas besoin de \"comprendre\" tous les fonctions, le but ici \u00e9tant de se concentrer sur l'\u00e9criture des tests.","title":"Ajouter un \"trait\" \u00e0 notre projet"},{"location":"notes_de_cours/api/unit_test/#notre-premier-test-unitaire","text":"Un test unitaire est un test effectu\u00e9 sur une seule classe PHP. Supposons une classe Calculator.php situ\u00e9 dans src/Support/ . Notre classe \u00e0 une seule fonction add() qui prends en param\u00eatre deux entiers et les additionne : <?php namespace App\\Support; class Calculator { public function add(int $a, int $b): int { return $a + $b; } } ?> On va cr\u00e9er une classe qui contiendra nos tests dans le r\u00e9pertoire tests/TestCase/Support/CalculatorTest.php . Par convention on va respecter l\u2019arborescence des r\u00e9pertoires (/Support) et le nom de la classe test va \u00eatre le m\u00eame que celui de la classe test\u00e9e \u00e0 laquelle on ajoute le suffixe Test (Calculator deviendra CalculatorTest). La classe doit \"\u00e9tendre\" (extends) TestCase qui, une classe de PHPUnit qui nous permettra de faire nos test. Voici un exemple de test o\u00f9 l'on s'assure que la fonction add() retourne le bon r\u00e9sultat. <?php // CalculatorTest.php namespace App\\Test\\TestCase\\Support; use App\\Support\\Calculator; use PHPUnit\\Framework\\TestCase; // Oubliez pas d'ajouter extends TestCase class CalculatorTest extends TestCase { public function testAddReturnValidSum(): void { // Cr\u00e9ation d'un objet Calculator $calculator = new Calculator(); // Ex\u00e9cution de la fonction add $result = $calculator->add(30, 12); // Ici on \"assert\" que la fonction add de la // classe Calculator retourne la bonne valeur $this->assertEquals(42, $result); } } Et maintenant pour lan\u00e7ons notre test avec la commande composer test \u00e0 partir d'une console \u00e0 la racine de notre projet. R\u00e9sultat positif Si on lance le test avec notre exemple, on va avoir le r\u00e9sultat suivant. On peut voir que la fonction testAddReturnValidSum retourne un r\u00e9sultat valide. C\u2019est le nom de la fonction qui est utilis\u00e9 comme titre dans le r\u00e9sultat des tests. Il faut qu\u2019elle commence par test et qu\u2019on utilise le \u00ab CamelCase \u00bb testAddReturnValidSum => Add return valid sum. R\u00e9sultat n\u00e9gatif Si on modifie la valeur de la ligne 17 de CalculatorTest.php pour 421 au lieu de 42 (pour simuler un erreur dans notre fonction), on aura le r\u00e9sultat suivant :","title":"Notre premier test unitaire"},{"location":"notes_de_cours/api/unit_test/#tests-unitaires-de-nos-routes","text":"On va cr\u00e9er une classe par route qu\u2019on veut tester. Elle sera cr\u00e9er dans le r\u00e9pertoire tests/TestCase/[La m\u00eame structure que la classe \u00e0 tester] Exemple d'une classe test Je veux un test qui couvre la classe src/Action/Book/BookViewByIdAction.php , je vais cr\u00e9er ma classe test dans le r\u00e9pertoire tests/TestCase/Action/Book . On pourrait seulement la cr\u00e9er dans tests/TestCase mais la premi\u00e8re structure permet de garder le code claire, surtout si on a beaucoup de tests \u00e0 cr\u00e9er. La classe test va porter le m\u00eame nom que la classe test\u00e9 en y ajoutant Test \u00e0 la fin. Je veux tester BookViewByIdAction, ma classe test va donc se nommer BookViewByIdActionTest. La classe va \u00ab extends \u00bb TestCase et utiliser AppTestTrait (voir code exemple plus loin). Ensuite on va cr\u00e9e une ou des fonctions qui vont contenir nos tests. Le nom de la fonction doit obligatoirement commencer par test. Le nom de la fonction sera ce qui est affich\u00e9 dans le r\u00e9sultat. Le mot test du d\u00e9but sera supprim\u00e9 et le caract\u00e8re _ deviendra un espace. testBookViewById_Retourne_les_bonnes_valeurs devient BookViewById Retourne les bonnes valeurs <?php namespace App\\Test\\TestCase\\Action\\Book; use App\\Test\\Traits\\AppTestTrait; use PHPUnit\\Framework\\TestCase; class BookViewByIdActionTest extends TestCase { // On inclus ici une r\u00e9f\u00e9rence au trait qu'on a cr\u00e9\u00e9 plus haut use AppTestTrait; public function testBookViewById_Retourne_les_bonnes_valeurs(): void { // Les valeurs de retour attendues $expected = [ [ \"id\" => \"74\", \"genreId\" => \"1\", \"titre\" => \"Blade Runner\", \"isbn\" => \"9782290314944\" ] ]; // On cr\u00e9e la requ\u00eate en faisant un appel \u00e0 la route \u00e0 tester // la fonction createJsonRequest provient du trait AppTestTrait $request = $this->createJsonRequest('GET', '/books/74'); // On effectue la requ\u00eate et r\u00e9cup\u00e8re le r\u00e9sultat $response = $this->app->handle($request); // C'est ici qu'on fait nos affirmations (assert) // J'affirme que le code de statut de la r\u00e9ponse est 200 $this->assertSame(200, $response->getStatusCode()); // J'affirme que les valeurs de retour correspondent \u00e0 ce qui est attendu $this->assertJsonData($expected, $response); } }","title":"Tests unitaires de nos routes"},{"location":"notes_de_cours/api/unit_test/#references","text":"Postman https://learning.postman.com/docs/writing-scripts/test-scripts/ https://learning.postman.com/docs/writing-scripts/script-references/test-examples/ PHPUnit https://phpunit.de/getting-started/phpunit-9.html https://phpunit.readthedocs.io/fr/latest/","title":"R\u00e9f\u00e9rences"},{"location":"notes_de_cours/heroku/heroku/","text":"H\u00e9bergement d'un api avec Heroku Heroku est une plateforme permettant de d\u00e9ployer rapidement nos applications web pour pouvoir les tester gratuitement. Nous allons utiliser ses services dans le cadre du cours pour mettre en ligne nos api ainsi que les clients qu'on va d\u00e9velopper pour les interroger. Marche \u00e0 suivre Cr\u00e9ation d'un compte Heroku Connexion \u00e0 Heroku depuis un terminal Cr\u00e9ation d'un projet Heroku Mise en ligne du projet Configuration de la base de donn\u00e9es MySQL Test du d\u00e9ploiement \u00c0 partir de maintenant vos application devrait \u00eatre fonctionnelles. Vous pouvez acc\u00e9der \u00e0 vos route depuis postman ou un navigagteur en modifiant le nom de domaine de l'url.","title":"H\u00e9bergement d'un api avec Heroku"},{"location":"notes_de_cours/heroku/heroku/#hebergement-dun-api-avec-heroku","text":"Heroku est une plateforme permettant de d\u00e9ployer rapidement nos applications web pour pouvoir les tester gratuitement. Nous allons utiliser ses services dans le cadre du cours pour mettre en ligne nos api ainsi que les clients qu'on va d\u00e9velopper pour les interroger.","title":"H\u00e9bergement d'un api avec Heroku"},{"location":"notes_de_cours/heroku/heroku/#marche-a-suivre","text":"Cr\u00e9ation d'un compte Heroku Connexion \u00e0 Heroku depuis un terminal Cr\u00e9ation d'un projet Heroku Mise en ligne du projet Configuration de la base de donn\u00e9es MySQL","title":"Marche \u00e0 suivre"},{"location":"notes_de_cours/heroku/heroku/#test-du-deploiement","text":"\u00c0 partir de maintenant vos application devrait \u00eatre fonctionnelles. Vous pouvez acc\u00e9der \u00e0 vos route depuis postman ou un navigagteur en modifiant le nom de domaine de l'url.","title":"Test du d\u00e9ploiement"},{"location":"notes_de_cours/heroku/heroku_compte/","text":"Cr\u00e9ation d'un compte Heroku Cr\u00e9ez-vous un compte gratuit sur le site de Heroku T\u00e9l\u00e9charger ensuite le CLI Heroku Une fois connect\u00e9 \u00e0 votre compte, vous avez un lien \u00ab documentation \u00bb \u00e0 cliquer dans le bas de la page. Ensuite dans la section Heroku Essentials, cliquez sur \u00ab The Heroku CLI \u00bb. S\u00e9lectionnez le bon installateur selon votre syst\u00e8me d\u2019exploitation. Une fois le client install\u00e9, lancer la commande heroku -v depuis un terminal pour valider l\u2019installation. $ heroku -v","title":"Cr\u00e9ation d'un compte Heroku"},{"location":"notes_de_cours/heroku/heroku_compte/#creation-dun-compte-heroku","text":"Cr\u00e9ez-vous un compte gratuit sur le site de Heroku T\u00e9l\u00e9charger ensuite le CLI Heroku Une fois connect\u00e9 \u00e0 votre compte, vous avez un lien \u00ab documentation \u00bb \u00e0 cliquer dans le bas de la page. Ensuite dans la section Heroku Essentials, cliquez sur \u00ab The Heroku CLI \u00bb. S\u00e9lectionnez le bon installateur selon votre syst\u00e8me d\u2019exploitation. Une fois le client install\u00e9, lancer la commande heroku -v depuis un terminal pour valider l\u2019installation. $ heroku -v","title":"Cr\u00e9ation d'un compte Heroku"},{"location":"notes_de_cours/heroku/heroku_connexion/","text":"Connexion \u00e0 Heroku depuis un terminal Dans la console, faire la commande heroku login $ heroku login Apr\u00e8s avoir appuy\u00e9 sur une touche, un \u00e9cran de connexion s\u2019ouvrira dans votre navigateur. Une fois connect\u00e9 depuis le navigateur, une confirmation s\u2019affichera dans la console.","title":"Connexion \u00e0 Heroku depuis un terminal"},{"location":"notes_de_cours/heroku/heroku_connexion/#connexion-a-heroku-depuis-un-terminal","text":"Dans la console, faire la commande heroku login $ heroku login Apr\u00e8s avoir appuy\u00e9 sur une touche, un \u00e9cran de connexion s\u2019ouvrira dans votre navigateur. Une fois connect\u00e9 depuis le navigateur, une confirmation s\u2019affichera dans la console.","title":"Connexion \u00e0 Heroku depuis un terminal"},{"location":"notes_de_cours/heroku/heroku_creation_projet/","text":"Cr\u00e9ation d'un projet Heroku Dans la console \u00e0 la racine de votre application, entrez la commande suivant heroku create $ heroku create Une adresse url de votre projet sera g\u00e9n\u00e9r\u00e9e automatiquement. Un d\u00e9p\u00f4t Git sera aussi cr\u00e9\u00e9 sur les serveurs de Heroku. Ce d\u00e9p\u00f4t sera utilis\u00e9 pour mettre en ligne votre projet. Url du projet (en bleu) : https://secret-escarpment-53166.herokuapp.com/ Url du d\u00e9p\u00f4t (en vert) : https://git.heroku.com/secret-escarpment-53166.git Vous pouvez valider que le d\u00e9p\u00f4t git de Heroku est bien associ\u00e9 \u00e0 votre projet en faisant la commande git remote -v Modifier l'url du projet et du d\u00e9p\u00f4t git Vous pouvez modifier l'url de votre projet depuis le tableau de bord du site de Heroku. Depuis le tableau de bord, s\u00e9lectionnez votre projet Cliquez sur l'onglet Settings Dans la section App Information , modifiez la valeur de App Name pour le nouveau nom de votre projet et cliquez sur Save Attention, vous devrez ensuite modifier l'url du \"remote\" sur votre branche locale de git. Copier le nouveau url g\u00e9n\u00e9r\u00e9, il est affich\u00e9 dans la m\u00eame section sous Heroku git URL Dans le terminal \u00e0 la racine de votre projet faites la commande git remote set-url heroku votre-url-heroku Revalidez ensuite avec la commande git remote -v , les urls associ\u00e9s \u00e0 heroku devrait avoir \u00e9t\u00e9 chang\u00e9.","title":"Cr\u00e9ation d'un projet Heroku"},{"location":"notes_de_cours/heroku/heroku_creation_projet/#creation-dun-projet-heroku","text":"Dans la console \u00e0 la racine de votre application, entrez la commande suivant heroku create $ heroku create Une adresse url de votre projet sera g\u00e9n\u00e9r\u00e9e automatiquement. Un d\u00e9p\u00f4t Git sera aussi cr\u00e9\u00e9 sur les serveurs de Heroku. Ce d\u00e9p\u00f4t sera utilis\u00e9 pour mettre en ligne votre projet. Url du projet (en bleu) : https://secret-escarpment-53166.herokuapp.com/ Url du d\u00e9p\u00f4t (en vert) : https://git.heroku.com/secret-escarpment-53166.git Vous pouvez valider que le d\u00e9p\u00f4t git de Heroku est bien associ\u00e9 \u00e0 votre projet en faisant la commande git remote -v","title":"Cr\u00e9ation d'un projet Heroku"},{"location":"notes_de_cours/heroku/heroku_creation_projet/#modifier-lurl-du-projet-et-du-depot-git","text":"Vous pouvez modifier l'url de votre projet depuis le tableau de bord du site de Heroku. Depuis le tableau de bord, s\u00e9lectionnez votre projet Cliquez sur l'onglet Settings Dans la section App Information , modifiez la valeur de App Name pour le nouveau nom de votre projet et cliquez sur Save Attention, vous devrez ensuite modifier l'url du \"remote\" sur votre branche locale de git. Copier le nouveau url g\u00e9n\u00e9r\u00e9, il est affich\u00e9 dans la m\u00eame section sous Heroku git URL Dans le terminal \u00e0 la racine de votre projet faites la commande git remote set-url heroku votre-url-heroku Revalidez ensuite avec la commande git remote -v , les urls associ\u00e9s \u00e0 heroku devrait avoir \u00e9t\u00e9 chang\u00e9.","title":"Modifier l'url du projet et du d\u00e9p\u00f4t git"},{"location":"notes_de_cours/heroku/heroku_mise_en_ligne/","text":"Mise en ligne du projet Dans la console \u00e0 la racine de votre application, entrez la commande suivante $ git push heroku main Selon la configuration de votre repository GitHub, \u00e7a pourrait \u00eatre aussi Master au lieu de main. Apr\u00e8s l\u2019installation de votre application (le premier git push), vous pourrez voir les changements en acc\u00e9dant \u00e0 l\u2019url que Heroku vous a g\u00e9n\u00e9r\u00e9. (pour l\u2019instant la bd MySQL n\u2019est pas configur\u00e9e, donc l\u2019acc\u00e8s \u00e0 vos routes ne fonctionnera pas. Mais la route pour la documentation sera fonctionnel.) \u00c0 partir de maintenant, pour d\u00e9ployer notre projet, on relance la commande git push heroku main . Quand on a cr\u00e9\u00e9 le projet Heroku, un repository git s\u2019est cr\u00e9er pour heroku. Il faudra garder \u00e0 l\u2019esprit qu\u2019il est s\u00e9par\u00e9 de notre repo github. Donc quand on fait git push heroku main , on pousse les changements sur le d\u00e9p\u00f4t pour le projet Heroku mais pas sur notre github. Une bonne fa\u00e7on de proc\u00e9der est de continuer \u00e0 \u00ab pusher \u00bb sur notre github et quand on est pr\u00eat \u00e0 mettre le code en ligne, on \u00ab push \u00bb sur Heroku.","title":"Mise en ligne du projet"},{"location":"notes_de_cours/heroku/heroku_mise_en_ligne/#mise-en-ligne-du-projet","text":"Dans la console \u00e0 la racine de votre application, entrez la commande suivante $ git push heroku main Selon la configuration de votre repository GitHub, \u00e7a pourrait \u00eatre aussi Master au lieu de main. Apr\u00e8s l\u2019installation de votre application (le premier git push), vous pourrez voir les changements en acc\u00e9dant \u00e0 l\u2019url que Heroku vous a g\u00e9n\u00e9r\u00e9. (pour l\u2019instant la bd MySQL n\u2019est pas configur\u00e9e, donc l\u2019acc\u00e8s \u00e0 vos routes ne fonctionnera pas. Mais la route pour la documentation sera fonctionnel.) \u00c0 partir de maintenant, pour d\u00e9ployer notre projet, on relance la commande git push heroku main . Quand on a cr\u00e9\u00e9 le projet Heroku, un repository git s\u2019est cr\u00e9er pour heroku. Il faudra garder \u00e0 l\u2019esprit qu\u2019il est s\u00e9par\u00e9 de notre repo github. Donc quand on fait git push heroku main , on pousse les changements sur le d\u00e9p\u00f4t pour le projet Heroku mais pas sur notre github. Une bonne fa\u00e7on de proc\u00e9der est de continuer \u00e0 \u00ab pusher \u00bb sur notre github et quand on est pr\u00eat \u00e0 mettre le code en ligne, on \u00ab push \u00bb sur Heroku.","title":"Mise en ligne du projet"},{"location":"notes_de_cours/heroku/heroku_mysql/","text":"Configuration de la base de donn\u00e9es MySQL Pour permettre l'utilisation d'une base de donn\u00e9e MySQL avec Heroku, il faut ajouter l' Add-on ClearDB \u00e0 notre projet. Acc\u00e9dez \u00e0 la section account settings sur le site de heroku (cliquez sur la photo de profil pour ouvrir le menu) M\u00eame si le service qu\u2019on utilise est gratuit, vous allez devoir entrer les informations d\u2019une carte de cr\u00e9dit dans l\u2019onglet billing Une fois la carte de cr\u00e9dit saisie, acc\u00e9der \u00e0 la page de votre projet en revenant au tableau de bord (page principale) et en cliquant sur le nom du projet Dans la section installed add-ons cliquez sur configure add-ons Faites une recherche pour clearDB mysql et choisissez ignite-free comme plan et cliquez sur Submit Order Form Une fois l'ajout termin\u00e9, vous devriez avoir ClearDB dans les add-ons R\u00e9cup\u00e9rer des informations de connexion Dans la console \u00e0 la racine de votre application, entrez la commande suivante $ heroku config R\u00e9sultat de la commande \u00c0 la ligne CLEARDB_DATABASE_URL vous trouverez les informations de connexion \u00e0 la BD. Les diff\u00e9rentes valeurs ont une position bien pr\u00e9cise dans la cha\u00eene de texte. Variable Position dans la cha\u00eene Valeur selon l'exemple username entre // et : b4692d61f95260 password entre : et @ 06aee1da host entre @ et / us-cdbr-east-05.cleardb.net database entre / et ? heroku_330c927d2db0d16 Vous pouvez maintenant cr\u00e9er une connexion avec un gestionnaire de base de donn\u00e9es (workbench, dbeaver, etc\u2026) Importer une base de donn\u00e9es Dans un terminal lancez la commande suivante pour faire un backup de la base de donn\u00e9es MySQL $ mysqldump -h localhost -u root -pmysql --opt --routines --triggers libapi > db_create.sql Modifier les valeurs de l'usager ( root ), du mot de passe ( mysql ) et du nom de la base de donn\u00e9es ( libapi ) selon votre configuration Le fichier db_create.sql va \u00eatre cr\u00e9\u00e9 dans le r\u00e9pertoire o\u00f9 vous avez lanc\u00e9 la commande. Ensuite encore en console on peut faire la commande suivante pour importer le script sql dans notre base de donn\u00e9es en ligne. $ mysql -u b5ca43976743b6 -h us-cdbr-east-03.cleardb.com -p3fba289e heroku_85142f7d498789b < db_create.sql En modifiant selon les informations de connexion obtenues auparavant avec la commande heroku config . Si vous avez l'erreur suivante ERROR 1071 (42000) at line 25: Specified key was too long; max key length is 767 bytes modifiez dans la base de donn\u00e9es le type de donn\u00e9es du champs username de la table users pour varchar(50) au lieu de varchar(255) Stocker les informations de connexion Pour nous simplifier la vie, on va stocker les informations dans un fichier php qui selon une constante retournera les bonnes valeurs. Cr\u00e9ation du fichier env.php Dans le r\u00e9pertoire config de votre projet cr\u00e9ez les fichier env.php Entrez ensuite vos informations de connexion \u00e0 la base de donn\u00e9es MySQL en local et sur heroku La structure du fichier est la suivante <?php // Constante du mode de l'application // dev : variables utilis\u00e9es en local // prod : pour le d\u00e9ploiement de l'api en production define(\"MODE\", \"prod\"); switch (MODE) { case \"dev\": // Configuration BD en local $_ENV['host'] = 'localhost'; $_ENV['username'] = 'root'; $_ENV['database'] = 'libapi'; $_ENV['password'] = 'mysql'; break; case \"prod\": // Configuration BD pour Heroku $_ENV['host'] = 'us-cdbr-east-05.cleardb.net'; $_ENV['username'] = 'b4692d61f95260'; $_ENV['database'] = 'heroku_330c927d2db0d16'; $_ENV['password'] = '06aee1da'; break; }; Vous n'avez ensuite quand changer la valeur de la constante MODE \u00e0 la ligne 6 selon les valeurs que vous voulez utiliser. dev pour la base de donn\u00e9es local prod pour la base de donn\u00e9es Heroku Modification au fichier bootstrap.php Pour charger les variables d\u2019environnements du fichier env.php , ajoutez la ligne suivante dans le fichier config/bootstrap.php . <?php use DI\\ContainerBuilder; use Slim\\App; require_once __DIR__ . '/../vendor/autoload.php'; // Chargement des variables d'environnement require_once __DIR__ . '/env.php'; // Ligne \u00e0 ajouter $containerBuilder = new ContainerBuilder(); Modification au fichier settings.php Modifier la section db du fichier config/settings.php pour utiliser les variables d\u2019environnement. // ... // Database settings $settings['db'] = [ 'driver' => 'mysql', 'host' => $_ENV['host'], 'username' => $_ENV['username'], 'database' => $_ENV['database'], 'password' => $_ENV['password'], 'charset' => 'utf8', 'collation' => 'utf8_general_ci', 'flags' => [ // Turn off persistent connections PDO::ATTR_PERSISTENT => false, // Enable exceptions PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION, // Emulate prepared statements PDO::ATTR_EMULATE_PREPARES => true, // Set default fetch mode to array PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC, // Set character set PDO::MYSQL_ATTR_INIT_COMMAND => 'SET NAMES utf8 COLLATE utf8_general_ci' ], ]; // ... Source https://devcenter.heroku.com/articles/cleardb {target=_blank}","title":"Configuration de la base de donn\u00e9es MySQL"},{"location":"notes_de_cours/heroku/heroku_mysql/#configuration-de-la-base-de-donnees-mysql","text":"Pour permettre l'utilisation d'une base de donn\u00e9e MySQL avec Heroku, il faut ajouter l' Add-on ClearDB \u00e0 notre projet. Acc\u00e9dez \u00e0 la section account settings sur le site de heroku (cliquez sur la photo de profil pour ouvrir le menu) M\u00eame si le service qu\u2019on utilise est gratuit, vous allez devoir entrer les informations d\u2019une carte de cr\u00e9dit dans l\u2019onglet billing Une fois la carte de cr\u00e9dit saisie, acc\u00e9der \u00e0 la page de votre projet en revenant au tableau de bord (page principale) et en cliquant sur le nom du projet Dans la section installed add-ons cliquez sur configure add-ons Faites une recherche pour clearDB mysql et choisissez ignite-free comme plan et cliquez sur Submit Order Form Une fois l'ajout termin\u00e9, vous devriez avoir ClearDB dans les add-ons","title":"Configuration de la base de donn\u00e9es MySQL"},{"location":"notes_de_cours/heroku/heroku_mysql/#recuperer-des-informations-de-connexion","text":"Dans la console \u00e0 la racine de votre application, entrez la commande suivante $ heroku config R\u00e9sultat de la commande \u00c0 la ligne CLEARDB_DATABASE_URL vous trouverez les informations de connexion \u00e0 la BD. Les diff\u00e9rentes valeurs ont une position bien pr\u00e9cise dans la cha\u00eene de texte. Variable Position dans la cha\u00eene Valeur selon l'exemple username entre // et : b4692d61f95260 password entre : et @ 06aee1da host entre @ et / us-cdbr-east-05.cleardb.net database entre / et ? heroku_330c927d2db0d16 Vous pouvez maintenant cr\u00e9er une connexion avec un gestionnaire de base de donn\u00e9es (workbench, dbeaver, etc\u2026)","title":"R\u00e9cup\u00e9rer des informations de connexion"},{"location":"notes_de_cours/heroku/heroku_mysql/#importer-une-base-de-donnees","text":"Dans un terminal lancez la commande suivante pour faire un backup de la base de donn\u00e9es MySQL $ mysqldump -h localhost -u root -pmysql --opt --routines --triggers libapi > db_create.sql Modifier les valeurs de l'usager ( root ), du mot de passe ( mysql ) et du nom de la base de donn\u00e9es ( libapi ) selon votre configuration Le fichier db_create.sql va \u00eatre cr\u00e9\u00e9 dans le r\u00e9pertoire o\u00f9 vous avez lanc\u00e9 la commande. Ensuite encore en console on peut faire la commande suivante pour importer le script sql dans notre base de donn\u00e9es en ligne. $ mysql -u b5ca43976743b6 -h us-cdbr-east-03.cleardb.com -p3fba289e heroku_85142f7d498789b < db_create.sql En modifiant selon les informations de connexion obtenues auparavant avec la commande heroku config . Si vous avez l'erreur suivante ERROR 1071 (42000) at line 25: Specified key was too long; max key length is 767 bytes modifiez dans la base de donn\u00e9es le type de donn\u00e9es du champs username de la table users pour varchar(50) au lieu de varchar(255)","title":"Importer une base de donn\u00e9es"},{"location":"notes_de_cours/heroku/heroku_mysql/#stocker-les-informations-de-connexion","text":"Pour nous simplifier la vie, on va stocker les informations dans un fichier php qui selon une constante retournera les bonnes valeurs.","title":"Stocker les informations de connexion"},{"location":"notes_de_cours/heroku/heroku_mysql/#creation-du-fichier-envphp","text":"Dans le r\u00e9pertoire config de votre projet cr\u00e9ez les fichier env.php Entrez ensuite vos informations de connexion \u00e0 la base de donn\u00e9es MySQL en local et sur heroku La structure du fichier est la suivante <?php // Constante du mode de l'application // dev : variables utilis\u00e9es en local // prod : pour le d\u00e9ploiement de l'api en production define(\"MODE\", \"prod\"); switch (MODE) { case \"dev\": // Configuration BD en local $_ENV['host'] = 'localhost'; $_ENV['username'] = 'root'; $_ENV['database'] = 'libapi'; $_ENV['password'] = 'mysql'; break; case \"prod\": // Configuration BD pour Heroku $_ENV['host'] = 'us-cdbr-east-05.cleardb.net'; $_ENV['username'] = 'b4692d61f95260'; $_ENV['database'] = 'heroku_330c927d2db0d16'; $_ENV['password'] = '06aee1da'; break; }; Vous n'avez ensuite quand changer la valeur de la constante MODE \u00e0 la ligne 6 selon les valeurs que vous voulez utiliser. dev pour la base de donn\u00e9es local prod pour la base de donn\u00e9es Heroku","title":"Cr\u00e9ation du fichier env.php"},{"location":"notes_de_cours/heroku/heroku_mysql/#modification-au-fichier-bootstrapphp","text":"Pour charger les variables d\u2019environnements du fichier env.php , ajoutez la ligne suivante dans le fichier config/bootstrap.php . <?php use DI\\ContainerBuilder; use Slim\\App; require_once __DIR__ . '/../vendor/autoload.php'; // Chargement des variables d'environnement require_once __DIR__ . '/env.php'; // Ligne \u00e0 ajouter $containerBuilder = new ContainerBuilder();","title":"Modification au fichier bootstrap.php"},{"location":"notes_de_cours/heroku/heroku_mysql/#modification-au-fichier-settingsphp","text":"Modifier la section db du fichier config/settings.php pour utiliser les variables d\u2019environnement. // ... // Database settings $settings['db'] = [ 'driver' => 'mysql', 'host' => $_ENV['host'], 'username' => $_ENV['username'], 'database' => $_ENV['database'], 'password' => $_ENV['password'], 'charset' => 'utf8', 'collation' => 'utf8_general_ci', 'flags' => [ // Turn off persistent connections PDO::ATTR_PERSISTENT => false, // Enable exceptions PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION, // Emulate prepared statements PDO::ATTR_EMULATE_PREPARES => true, // Set default fetch mode to array PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC, // Set character set PDO::MYSQL_ATTR_INIT_COMMAND => 'SET NAMES utf8 COLLATE utf8_general_ci' ], ]; // ...","title":"Modification au fichier settings.php"},{"location":"notes_de_cours/heroku/heroku_mysql/#source","text":"https://devcenter.heroku.com/articles/cleardb {target=_blank}","title":"Source"},{"location":"notes_de_cours/php/array/","text":"Les tableaux D\u00e9claration d'un tableau Pour d\u00e9clarer un tableau, on peut utiliser la fonction array() ou en notation courte utiliser [] <?php // D\u00e9claration d'un tableau avec la fonction array() $monTableau = array(\"item1\", \"item2\", \"item3\"); // D\u00e9claration d'un tableau avec la notation courte $monTableau = [\"item1\", \"item2\", \"item3\"]; ?> Chaque \u00e9l\u00e9ment du tableau est associ\u00e9 \u00e0 une cl\u00e9 (son index dans le tableau). Si la cl\u00e9 n'est pas sp\u00e9cifi\u00e9, comme dans l'exemple plus haut, elle sera autog\u00e9n\u00e9r\u00e9 de fa\u00e7on incr\u00e9mentiel (0, 1, 2, etc...). Il est aussi possible de d\u00e9finir la cl\u00e9 de chaque item. <?php $monTableau = array( 1 => \"item1\", 2 => \"item2\", 3 => \"item3\", ); $monTableau = [ \"fruits\" => [\"banane\", \"pomme\", \"raisin\"], \"legumes\" => [\"carotte\", \"patate\", \"navet\"], ]; ?> Acc\u00e8s aux \u00e9l\u00e9ments d'un tableau On acc\u00e8de \u00e0 la valeur d'un \u00e9l\u00e9ment du tableau par sa cl\u00e9 ou son index <?php $monTableau = [\"item1\", \"item2\", \"item3\"]; echo $monTableau[0]; // \"item1\" $monTableau = [ \"fruits\" => [\"banane\", \"pomme\", \"raisin\"], \"legumes\" => [\"carotte\", \"patate\", \"navet\"], ]; echo $monTableau[\"legumes\"][1]; // \"patate\" ?> Ajouter/modifier/supprimer un \u00e9l\u00e9ment <?php $monTableau = [\"item1\", \"item2\", \"item3\"]; // Pour ajouter un \u00e9l\u00e9ment au tableau, on donne ou non une cl\u00e9 libre $monTableau[] = \"item4\"; $monTableau[4] = \"item5\"; // Pour modifier un \u00e9l\u00e9ment, on doit donner la cl\u00e9 de l'\u00e9l\u00e9ment \u00e0 modifier $monTableau[4] = \"item5 modifi\u00e9\" // On supprime un item avec la fonction unset en sp\u00e9cifiant la cl\u00e9 de l'\u00e9l\u00e9ment \u00e0 supprimer unset($monTableau[4]); // Attention, si aucune cl\u00e9 n'est donn\u00e9e, c'est tout le tableau qui sera supprim\u00e9 unset($monTableau); ?> Boucle sur un tableau Pour boucler sur les \u00e9l\u00e9ments d'un tableau, on utilise foreach <?php $monTableau = [ \"prenom\" => \"Mathieu\", \"nom\" => \"Frechette\", ]; foreach($monTableau as $item) { echo \"$item\\n\"; } /* Mathieu Frechette */ // On peut aussi r\u00e9cup\u00e9rer la cl\u00e9 de chaque \u00e9l\u00e9ment foreach($monTableau as $cle => $valeur) { echo \"$cle = $valeur\\n\"; } /* prenom = Mathieu nom = frechette */ ?> D\u00e9baller un tableau En pr\u00e9fixant le tableau par trois points ( ...$monTableau), le tableau sera \"d\u00e9ball\u00e9\" lors de se d\u00e9finition, c'est \u00e0 dire qu'on aura acc\u00e8s \u00e0 tous les \u00e9l\u00e9ments du tableau. (Disponible depuis PHP 7.4.0) <?php $monTableau = [\"item1\", \"item2\", \"item3\"]; // Copier le tableau $tableau2 = [...$monTableau]; // [\"item1\", \"item2\", \"item3\"] // Ajouter des \u00e9l\u00e9ments au tableau; $tableau3 = [\"item0\", ...$monTableau, \"item4\"]; // [\"item0, \"item1\", \"item2\", \"item3\", \"item4\"] // Fusionner des tableaux $tableau4 = [...$tableau2, ...$tableau3]; // [\"item1\", \"item2\", \"item3\", \"item0, \"item1\", \"item2\", \"item3\", \"item4\"] // On peut aussi l'utiliser avec une fonction qui retourne un tableau function getTableau() { return [\"item5\", \"item6\"]; } $tableau5 = [...getTableau(), \"item7\"]; //[\"item5\", \"item6\", \"item7\"] ?> Array_filter(array, function()) La fonction array_filter() permet de filtrer les \u00e9l\u00e9ments d'un tableau et d'envoyer le r\u00e9sultat dans un nouveau tableau. Array_filter() prend en param\u00e8tre le tableau sur lequelle effectuer le traitement et une fonction de Callback. On peut appeler une fonction existante ou bien directement la d\u00e9clarer \u00e0 l'int\u00e9rieur de array_filter(). Si la fonction retourne True, l'item sera ajout\u00e9 au nouveau tableau. <?php // Soit le tableau de nombre suivant $nombres = [1, 2, 3, 4, 5]; // On veut cr\u00e9er un nouveau tableau avec uniquement les nombres impairs $nombresImpair = array_filter($nombres, // array_filter va parcourir le tableau $nombres un item \u00e0 la fois // chaque item va \u00eatre assign\u00e9 \u00e0 la variable $nombre. function ($nombre) { return $nombre % 2 === 1; } ); // [1, 3, 5] ?> Array_map(function(), array) La fonction array_map() permet d'appliquer une fonction sur chaque \u00e9l\u00e9ment d'un tableau et de retourner un nouveau tableau du r\u00e9sultat. Array_map() prends en param\u00e8tre la fonction de Callback et le tableau sur lequelle effectuer le traitement. On peut appeler une fonction existante ou bien directement la d\u00e9clarer \u00e0 l'int\u00e9rieur de array_map(). <?php // Soit le tableau de nombre suivant $nombres = [10,12,14,13]; // On veut cr\u00e9er un tableau avec de ces nombres doubl\u00e9s $nombresDouble = array_map(function ($nombre) { return $nombre * 2; }, $nombres); // [20, 22, 28, 26] ?> R\u00e9f\u00e9rence www.php.net/manual/fr/language.types.array.php www.w3schools.com/php/php_ref_array.asp www.php.net/manual/fr/ref.array.php","title":"Les tableaux"},{"location":"notes_de_cours/php/array/#les-tableaux","text":"","title":"Les tableaux"},{"location":"notes_de_cours/php/array/#declaration-dun-tableau","text":"Pour d\u00e9clarer un tableau, on peut utiliser la fonction array() ou en notation courte utiliser [] <?php // D\u00e9claration d'un tableau avec la fonction array() $monTableau = array(\"item1\", \"item2\", \"item3\"); // D\u00e9claration d'un tableau avec la notation courte $monTableau = [\"item1\", \"item2\", \"item3\"]; ?> Chaque \u00e9l\u00e9ment du tableau est associ\u00e9 \u00e0 une cl\u00e9 (son index dans le tableau). Si la cl\u00e9 n'est pas sp\u00e9cifi\u00e9, comme dans l'exemple plus haut, elle sera autog\u00e9n\u00e9r\u00e9 de fa\u00e7on incr\u00e9mentiel (0, 1, 2, etc...). Il est aussi possible de d\u00e9finir la cl\u00e9 de chaque item. <?php $monTableau = array( 1 => \"item1\", 2 => \"item2\", 3 => \"item3\", ); $monTableau = [ \"fruits\" => [\"banane\", \"pomme\", \"raisin\"], \"legumes\" => [\"carotte\", \"patate\", \"navet\"], ]; ?>","title":"D\u00e9claration d'un tableau"},{"location":"notes_de_cours/php/array/#acces-aux-elements-dun-tableau","text":"On acc\u00e8de \u00e0 la valeur d'un \u00e9l\u00e9ment du tableau par sa cl\u00e9 ou son index <?php $monTableau = [\"item1\", \"item2\", \"item3\"]; echo $monTableau[0]; // \"item1\" $monTableau = [ \"fruits\" => [\"banane\", \"pomme\", \"raisin\"], \"legumes\" => [\"carotte\", \"patate\", \"navet\"], ]; echo $monTableau[\"legumes\"][1]; // \"patate\" ?>","title":"Acc\u00e8s aux \u00e9l\u00e9ments d'un tableau"},{"location":"notes_de_cours/php/array/#ajoutermodifiersupprimer-un-element","text":"<?php $monTableau = [\"item1\", \"item2\", \"item3\"]; // Pour ajouter un \u00e9l\u00e9ment au tableau, on donne ou non une cl\u00e9 libre $monTableau[] = \"item4\"; $monTableau[4] = \"item5\"; // Pour modifier un \u00e9l\u00e9ment, on doit donner la cl\u00e9 de l'\u00e9l\u00e9ment \u00e0 modifier $monTableau[4] = \"item5 modifi\u00e9\" // On supprime un item avec la fonction unset en sp\u00e9cifiant la cl\u00e9 de l'\u00e9l\u00e9ment \u00e0 supprimer unset($monTableau[4]); // Attention, si aucune cl\u00e9 n'est donn\u00e9e, c'est tout le tableau qui sera supprim\u00e9 unset($monTableau); ?>","title":"Ajouter/modifier/supprimer un \u00e9l\u00e9ment"},{"location":"notes_de_cours/php/array/#boucle-sur-un-tableau","text":"Pour boucler sur les \u00e9l\u00e9ments d'un tableau, on utilise foreach <?php $monTableau = [ \"prenom\" => \"Mathieu\", \"nom\" => \"Frechette\", ]; foreach($monTableau as $item) { echo \"$item\\n\"; } /* Mathieu Frechette */ // On peut aussi r\u00e9cup\u00e9rer la cl\u00e9 de chaque \u00e9l\u00e9ment foreach($monTableau as $cle => $valeur) { echo \"$cle = $valeur\\n\"; } /* prenom = Mathieu nom = frechette */ ?>","title":"Boucle sur un tableau"},{"location":"notes_de_cours/php/array/#deballer-un-tableau","text":"En pr\u00e9fixant le tableau par trois points ( ...$monTableau), le tableau sera \"d\u00e9ball\u00e9\" lors de se d\u00e9finition, c'est \u00e0 dire qu'on aura acc\u00e8s \u00e0 tous les \u00e9l\u00e9ments du tableau. (Disponible depuis PHP 7.4.0) <?php $monTableau = [\"item1\", \"item2\", \"item3\"]; // Copier le tableau $tableau2 = [...$monTableau]; // [\"item1\", \"item2\", \"item3\"] // Ajouter des \u00e9l\u00e9ments au tableau; $tableau3 = [\"item0\", ...$monTableau, \"item4\"]; // [\"item0, \"item1\", \"item2\", \"item3\", \"item4\"] // Fusionner des tableaux $tableau4 = [...$tableau2, ...$tableau3]; // [\"item1\", \"item2\", \"item3\", \"item0, \"item1\", \"item2\", \"item3\", \"item4\"] // On peut aussi l'utiliser avec une fonction qui retourne un tableau function getTableau() { return [\"item5\", \"item6\"]; } $tableau5 = [...getTableau(), \"item7\"]; //[\"item5\", \"item6\", \"item7\"] ?>","title":"D\u00e9baller un tableau"},{"location":"notes_de_cours/php/array/#array_filterarray-function","text":"La fonction array_filter() permet de filtrer les \u00e9l\u00e9ments d'un tableau et d'envoyer le r\u00e9sultat dans un nouveau tableau. Array_filter() prend en param\u00e8tre le tableau sur lequelle effectuer le traitement et une fonction de Callback. On peut appeler une fonction existante ou bien directement la d\u00e9clarer \u00e0 l'int\u00e9rieur de array_filter(). Si la fonction retourne True, l'item sera ajout\u00e9 au nouveau tableau. <?php // Soit le tableau de nombre suivant $nombres = [1, 2, 3, 4, 5]; // On veut cr\u00e9er un nouveau tableau avec uniquement les nombres impairs $nombresImpair = array_filter($nombres, // array_filter va parcourir le tableau $nombres un item \u00e0 la fois // chaque item va \u00eatre assign\u00e9 \u00e0 la variable $nombre. function ($nombre) { return $nombre % 2 === 1; } ); // [1, 3, 5] ?>","title":"Array_filter(array, function())"},{"location":"notes_de_cours/php/array/#array_mapfunction-array","text":"La fonction array_map() permet d'appliquer une fonction sur chaque \u00e9l\u00e9ment d'un tableau et de retourner un nouveau tableau du r\u00e9sultat. Array_map() prends en param\u00e8tre la fonction de Callback et le tableau sur lequelle effectuer le traitement. On peut appeler une fonction existante ou bien directement la d\u00e9clarer \u00e0 l'int\u00e9rieur de array_map(). <?php // Soit le tableau de nombre suivant $nombres = [10,12,14,13]; // On veut cr\u00e9er un tableau avec de ces nombres doubl\u00e9s $nombresDouble = array_map(function ($nombre) { return $nombre * 2; }, $nombres); // [20, 22, 28, 26] ?>","title":"Array_map(function(), array)"},{"location":"notes_de_cours/php/array/#reference","text":"www.php.net/manual/fr/language.types.array.php www.w3schools.com/php/php_ref_array.asp www.php.net/manual/fr/ref.array.php","title":"R\u00e9f\u00e9rence"},{"location":"notes_de_cours/php/file_get_contents/","text":"Effectuer un appel GET \u00e0 un service web On peut utiliser la fonction native file_get_contents() pour faire un appel GET \u00e0 un api avec un url. <?php $url = 'https://api.chucknorris.io/jokes/random'; $reponseEnJson = file_get_contents($url); /* { \"categories\": [], \"created_at\": \"2020-01-05 13:42:29.296379\", \"icon_url\": \"https://assets.chucknorris.host/img/avatar/chuck-norris.png\", \"id\": \"bESHJ3YrTEW638ky0rr3Yg\", \"updated_at\": \"2020-01-05 13:42:29.296379\", \"url\": \"https://api.chucknorris.io/jokes/bESHJ3YrTEW638ky0rr3Yg\", \"value\": \"Chuck Norris doesn't need an axe or saw to cut down a tree -- he needs only his foot, or his fist, or his glare.\" } */ $objetReponse = json_decode($reponseEnJson); echo $objetReponse->value; // Chuck Norris doesn't need an axe or saw to cut down a tree -- he needs only his foot, or his fist, or his glare. ?>","title":"Effectuer un appel GET \u00e0 un service web"},{"location":"notes_de_cours/php/file_get_contents/#effectuer-un-appel-get-a-un-service-web","text":"On peut utiliser la fonction native file_get_contents() pour faire un appel GET \u00e0 un api avec un url. <?php $url = 'https://api.chucknorris.io/jokes/random'; $reponseEnJson = file_get_contents($url); /* { \"categories\": [], \"created_at\": \"2020-01-05 13:42:29.296379\", \"icon_url\": \"https://assets.chucknorris.host/img/avatar/chuck-norris.png\", \"id\": \"bESHJ3YrTEW638ky0rr3Yg\", \"updated_at\": \"2020-01-05 13:42:29.296379\", \"url\": \"https://api.chucknorris.io/jokes/bESHJ3YrTEW638ky0rr3Yg\", \"value\": \"Chuck Norris doesn't need an axe or saw to cut down a tree -- he needs only his foot, or his fist, or his glare.\" } */ $objetReponse = json_decode($reponseEnJson); echo $objetReponse->value; // Chuck Norris doesn't need an axe or saw to cut down a tree -- he needs only his foot, or his fist, or his glare. ?>","title":"Effectuer un appel GET \u00e0 un service web"},{"location":"notes_de_cours/php/json/","text":"Manipulation de donn\u00e9es en JSON json_encode() Pour encoder un tableau en format JSON, on utilisera la fonction json_encode(). <?php $monTableau = [ \"prenom\" => \"Mathieu\", \"nom\" => \"Frechette\", ]; echo json_encode($monTableau); /* { \"prenom\":\"Mathieu\", \"nom\":\"Frechette\" } */ $monTableauPlusComplexe = [ \"Resultats\" => [ [ \"prenom\" => \"Mathieu\", \"nom\" => \"Frechette\", ], [ \"prenom\" => \"Anthony\", \"nom\" => \"Frechette\", ], ] ]; echo json_encode($monTableauPlusComplexe); /* { \"Resultats\":[ { \"prenom\":\"Mathieu\", \"nom\":\"Frechette\" }, { \"prenom\":\"Anthony\", \"nom\":\"Frechette\" } ] } */ ?> json_decode() \u00c0 l'inverse, pour convertir un objet JSON en un objet ou un tableau associatif (avec des cl\u00e9s d\u00e9finies) on utilisera la fonction json_decode(). Elle prend en param\u00eatre l'objet Json \u00e0 convertir et optionnellement un valeur boolean qui indique si on veut que soit cr\u00e9e un tableau associatif ou non. Par d\u00e9faut ce param\u00eatre prend la valeur false, ce qui cr\u00e9e un objet. <?php $jsonData = '{\"prenom\":\"Mathieu\",\"nom\":\"Frechette\"}'; $objetUsager = json_decode($jsonData); echo $objetUsager->prenom; // Mathieu $tableauUsager = json_decode($jsonData, true); echo $tableauUsager[\"prenom\"]; // Mathieu ?> R\u00e9f\u00e9rence json_encode() json_decode()","title":"Manipulation de donn\u00e9es en JSON"},{"location":"notes_de_cours/php/json/#manipulation-de-donnees-en-json","text":"","title":"Manipulation de donn\u00e9es en JSON"},{"location":"notes_de_cours/php/json/#json_encode","text":"Pour encoder un tableau en format JSON, on utilisera la fonction json_encode(). <?php $monTableau = [ \"prenom\" => \"Mathieu\", \"nom\" => \"Frechette\", ]; echo json_encode($monTableau); /* { \"prenom\":\"Mathieu\", \"nom\":\"Frechette\" } */ $monTableauPlusComplexe = [ \"Resultats\" => [ [ \"prenom\" => \"Mathieu\", \"nom\" => \"Frechette\", ], [ \"prenom\" => \"Anthony\", \"nom\" => \"Frechette\", ], ] ]; echo json_encode($monTableauPlusComplexe); /* { \"Resultats\":[ { \"prenom\":\"Mathieu\", \"nom\":\"Frechette\" }, { \"prenom\":\"Anthony\", \"nom\":\"Frechette\" } ] } */ ?>","title":"json_encode()"},{"location":"notes_de_cours/php/json/#json_decode","text":"\u00c0 l'inverse, pour convertir un objet JSON en un objet ou un tableau associatif (avec des cl\u00e9s d\u00e9finies) on utilisera la fonction json_decode(). Elle prend en param\u00eatre l'objet Json \u00e0 convertir et optionnellement un valeur boolean qui indique si on veut que soit cr\u00e9e un tableau associatif ou non. Par d\u00e9faut ce param\u00eatre prend la valeur false, ce qui cr\u00e9e un objet. <?php $jsonData = '{\"prenom\":\"Mathieu\",\"nom\":\"Frechette\"}'; $objetUsager = json_decode($jsonData); echo $objetUsager->prenom; // Mathieu $tableauUsager = json_decode($jsonData, true); echo $tableauUsager[\"prenom\"]; // Mathieu ?>","title":"json_decode()"},{"location":"notes_de_cours/php/json/#reference","text":"json_encode() json_decode()","title":"R\u00e9f\u00e9rence"},{"location":"notes_de_cours/react/axios_crud/","text":"Op\u00e9ration CRUD avec Axios Principe de base Il y a plusieurs fa\u00e7on de g\u00e9rer les r\u00e9sultats d\u2019op\u00e9rations CRUD depuis un api. Les exemples que je vais vous donner ici sont bas\u00e9 sur un api de gestion d\u2019une liste de livres et d\u2019un client React qui permet d\u2019effectuer toutes les op\u00e9rations CRUD avec Axios. On va avoir en permanence dans l\u2019objet state un tableau qui contient tous les livres. D\u00e8s qu\u2019on va effectuer une op\u00e9ration avec l\u2019api, sur un succ\u00e8s de la requ\u00eate, on va simplement modifier se tableau pour y appliquer les changements. SELECT : on remplace le tableau par le r\u00e9sultat. INSERT : on ajoute le nouveau livre au tableau. UPDATE : on modifie l\u2019item du tableau selon le id du livre. DELETE : on enl\u00e8ve du tableau le livre supprim\u00e9. En liant le tableau de l\u2019object state \u00e0 une composante qui l\u2019affiche, la mise \u00e0 jour de la liste s\u2019effectuera automatiquement. Exemples des diff\u00e9rentes op\u00e9rations S\u00e9lectionner la liste de livres Ajouter un livre Modifier un livre L'exemple ici va modifier la liste seulement si le livre modifi\u00e9 \u00e9tait d\u00e9j\u00e0 pr\u00e9sent. Dans le cas o\u00f9 on ferait la cr\u00e9ation du livre si le id sp\u00e9cifi\u00e9 n'existe pas, il faudrait adapt\u00e9 un peu le code pour ajouter le livre au tableau s'il a \u00e9t\u00e9 cr\u00e9\u00e9. On pourrait r\u00e9cup\u00e9rer par exemple le code de statut de la r\u00e9ponse et faire le traitement appropri\u00e9 (200 pour une modification, 201 pour une cr\u00e9ation) Supprimer un livre","title":"Op\u00e9ration CRUD avec Axios"},{"location":"notes_de_cours/react/axios_crud/#operation-crud-avec-axios","text":"","title":"Op\u00e9ration CRUD avec Axios"},{"location":"notes_de_cours/react/axios_crud/#principe-de-base","text":"Il y a plusieurs fa\u00e7on de g\u00e9rer les r\u00e9sultats d\u2019op\u00e9rations CRUD depuis un api. Les exemples que je vais vous donner ici sont bas\u00e9 sur un api de gestion d\u2019une liste de livres et d\u2019un client React qui permet d\u2019effectuer toutes les op\u00e9rations CRUD avec Axios. On va avoir en permanence dans l\u2019objet state un tableau qui contient tous les livres. D\u00e8s qu\u2019on va effectuer une op\u00e9ration avec l\u2019api, sur un succ\u00e8s de la requ\u00eate, on va simplement modifier se tableau pour y appliquer les changements. SELECT : on remplace le tableau par le r\u00e9sultat. INSERT : on ajoute le nouveau livre au tableau. UPDATE : on modifie l\u2019item du tableau selon le id du livre. DELETE : on enl\u00e8ve du tableau le livre supprim\u00e9. En liant le tableau de l\u2019object state \u00e0 une composante qui l\u2019affiche, la mise \u00e0 jour de la liste s\u2019effectuera automatiquement.","title":"Principe de base"},{"location":"notes_de_cours/react/axios_crud/#exemples-des-differentes-operations","text":"","title":"Exemples des diff\u00e9rentes op\u00e9rations"},{"location":"notes_de_cours/react/axios_crud/#selectionner-la-liste-de-livres","text":"","title":"S\u00e9lectionner la liste de livres"},{"location":"notes_de_cours/react/axios_crud/#ajouter-un-livre","text":"","title":"Ajouter un livre"},{"location":"notes_de_cours/react/axios_crud/#modifier-un-livre","text":"L'exemple ici va modifier la liste seulement si le livre modifi\u00e9 \u00e9tait d\u00e9j\u00e0 pr\u00e9sent. Dans le cas o\u00f9 on ferait la cr\u00e9ation du livre si le id sp\u00e9cifi\u00e9 n'existe pas, il faudrait adapt\u00e9 un peu le code pour ajouter le livre au tableau s'il a \u00e9t\u00e9 cr\u00e9\u00e9. On pourrait r\u00e9cup\u00e9rer par exemple le code de statut de la r\u00e9ponse et faire le traitement appropri\u00e9 (200 pour une modification, 201 pour une cr\u00e9ation)","title":"Modifier un livre"},{"location":"notes_de_cours/react/axios_crud/#supprimer-un-livre","text":"","title":"Supprimer un livre"},{"location":"notes_de_cours/react/bind_function/","text":"Lier une fonction Attention, si vous utilisez une fonction \"classique\" il faudra \"l'associer\" dans le constructeur pour pouvoir utiliser this . Vous pouvez contouner ce probl\u00e8me en utilisant une fonction fl\u00e9ch\u00e9e. import React from \"react\"; class EditName extends React.Component { constructor(props) { super(props); // Liaison de la fonction avec this this.handleNameChange = this.handleNameChange.bind(this) } // La fonction \u00e0 lier handleNameChange = function (event) { this.props.changeName(event.target.value); } // Cette fonction n'a pas \u00e0 \u00eatre li\u00e9e handleNameChangeArrow = (event) => { this.props.changeName(event.target.value); } render() { return ( // ... ) } } export default (EditName); Pour en savoir plus https://reactjs.org/docs/faq-functions.html https://codeburst.io/binding-functions-in-react-b168d2d006cb","title":"Lier une fonction (bind)"},{"location":"notes_de_cours/react/bind_function/#lier-une-fonction","text":"Attention, si vous utilisez une fonction \"classique\" il faudra \"l'associer\" dans le constructeur pour pouvoir utiliser this . Vous pouvez contouner ce probl\u00e8me en utilisant une fonction fl\u00e9ch\u00e9e. import React from \"react\"; class EditName extends React.Component { constructor(props) { super(props); // Liaison de la fonction avec this this.handleNameChange = this.handleNameChange.bind(this) } // La fonction \u00e0 lier handleNameChange = function (event) { this.props.changeName(event.target.value); } // Cette fonction n'a pas \u00e0 \u00eatre li\u00e9e handleNameChangeArrow = (event) => { this.props.changeName(event.target.value); } render() { return ( // ... ) } } export default (EditName);","title":"Lier une fonction"},{"location":"notes_de_cours/react/bind_function/#pour-en-savoir-plus","text":"https://reactjs.org/docs/faq-functions.html https://codeburst.io/binding-functions-in-react-b168d2d006cb","title":"Pour en savoir plus"},{"location":"notes_de_cours/react/component/","text":"Les composantes Une composante est un module r\u00e9utilisable qui \u00ab affiche \u00bb une partie de l\u2019application. Par exemple, un composant \u00ab Tableau \u00bb qui est form\u00e9 de composant \u00ab Ligne de d\u00e9tail \u00bb qui sont compos\u00e9es de texte et de composants \u00ab Boutons \u00bb d\u2019actions. En r\u00e9sum\u00e9, c\u2019est une classe qui retourne du code html \u00e9crit en JSX via une fonction render(). Un nom de composante doit commencer par une lettre majuscule . La classe est compos\u00e9 de trois partie de \u00ab base \u00bb : Une section import Ex: Import React from \u2018react\u2019; , pour utiliser les commandes react avec l\u2019Alias React (React.component par exemple) La d\u00e9finition de la classe qui \u00ab extends \u00bb React.component et qui contient une fonction render() . On pourra aussi y d\u00e9finir d\u2019autres fonctions et d\u00e9clarer des variables selon nos besoin. Une section export qui rendra accessible la classe ailleurs dans l'application. export default (NomDeLaClasse); Attention, la fonction render() doit retourner qu'un \u00e9l\u00e9ment HTML \"parent\". Par contre cet \u00e9l\u00e9ment peut contenir plusieurs \"enfants\". // le return est invalide car il y a deux \u00e9l\u00e9ment au m\u00eame niveau render() { return ( <h1>Hello World</h1> <p>Vive React!</p> ) } // Un fa\u00e7on de r\u00e9gler le probl\u00e8me serait d'englober les deux \u00e9l\u00e9ments // dans un autre render() { return ( <div> <h1>Hello World</h1> <p>Vive React!</p> </div> ) } Pour utiliser une composante, on doit l'importer dans le fichier o\u00f9 on veut l'utiliser avec la commande import en d\u00e9but de fichier. import NomDeLaClasse from \"./NomDuFichier\"; Apr\u00e8s le import on inscrit le nom de la classe, c'est aussi le nom qu'on va utiliser dans le fichier. La valeur qu'on inscrit apr\u00e8s le from est le chemin et le nom fichier JavaScript o\u00f9 se trouve la classe. Remarquez qu'on ne doit pas inscrire l'extension du fichier. (.js) Ensuite on \u00e9crit le nom de la classe sous la forme d'une balise html <NomDeLaClasse /> Exemple d'une composante simple // Fichier HelloWorld.js import React from 'react'; class HelloWorld extends React.Component { render() { return ( <h1>Hello World</h1> ) } } export default (HelloWorld); Et de son utilisation dans un autre fichier // Fichier App.js import './App.css'; import React from 'react'; import HelloWorld from './HelloWorld'; class App extends React.Component { render(){ return ( <div className=\"App\"> <header className=\"App-header\"> <HelloWorld /> </header> </div> ); } } export default (App);","title":"Les composantes"},{"location":"notes_de_cours/react/component/#les-composantes","text":"Une composante est un module r\u00e9utilisable qui \u00ab affiche \u00bb une partie de l\u2019application. Par exemple, un composant \u00ab Tableau \u00bb qui est form\u00e9 de composant \u00ab Ligne de d\u00e9tail \u00bb qui sont compos\u00e9es de texte et de composants \u00ab Boutons \u00bb d\u2019actions. En r\u00e9sum\u00e9, c\u2019est une classe qui retourne du code html \u00e9crit en JSX via une fonction render(). Un nom de composante doit commencer par une lettre majuscule . La classe est compos\u00e9 de trois partie de \u00ab base \u00bb : Une section import Ex: Import React from \u2018react\u2019; , pour utiliser les commandes react avec l\u2019Alias React (React.component par exemple) La d\u00e9finition de la classe qui \u00ab extends \u00bb React.component et qui contient une fonction render() . On pourra aussi y d\u00e9finir d\u2019autres fonctions et d\u00e9clarer des variables selon nos besoin. Une section export qui rendra accessible la classe ailleurs dans l'application. export default (NomDeLaClasse); Attention, la fonction render() doit retourner qu'un \u00e9l\u00e9ment HTML \"parent\". Par contre cet \u00e9l\u00e9ment peut contenir plusieurs \"enfants\". // le return est invalide car il y a deux \u00e9l\u00e9ment au m\u00eame niveau render() { return ( <h1>Hello World</h1> <p>Vive React!</p> ) } // Un fa\u00e7on de r\u00e9gler le probl\u00e8me serait d'englober les deux \u00e9l\u00e9ments // dans un autre render() { return ( <div> <h1>Hello World</h1> <p>Vive React!</p> </div> ) } Pour utiliser une composante, on doit l'importer dans le fichier o\u00f9 on veut l'utiliser avec la commande import en d\u00e9but de fichier. import NomDeLaClasse from \"./NomDuFichier\"; Apr\u00e8s le import on inscrit le nom de la classe, c'est aussi le nom qu'on va utiliser dans le fichier. La valeur qu'on inscrit apr\u00e8s le from est le chemin et le nom fichier JavaScript o\u00f9 se trouve la classe. Remarquez qu'on ne doit pas inscrire l'extension du fichier. (.js) Ensuite on \u00e9crit le nom de la classe sous la forme d'une balise html <NomDeLaClasse /> Exemple d'une composante simple // Fichier HelloWorld.js import React from 'react'; class HelloWorld extends React.Component { render() { return ( <h1>Hello World</h1> ) } } export default (HelloWorld); Et de son utilisation dans un autre fichier // Fichier App.js import './App.css'; import React from 'react'; import HelloWorld from './HelloWorld'; class App extends React.Component { render(){ return ( <div className=\"App\"> <header className=\"App-header\"> <HelloWorld /> </header> </div> ); } } export default (App);","title":"Les composantes"},{"location":"notes_de_cours/react/creation_projet/","text":"Cr\u00e9ation d'un projet React Il y a plusieurs fa\u00e7on d'utiliser React dans nos application web. Dans le cadre de ce cours nous allons utiliser Create React App qui va cr\u00e9er pour nous on projet de \"d\u00e9part\" \u00e0 partir duquel nous pourrons construire nos application React. Pr\u00e9requis node.js (disponible en t\u00e9l\u00e9chargement ici ) un terminal qui permet d'utiliser des commandes plus avanc\u00e9es (Git bash) Initialiser notre application La commande suivante vous permet de cr\u00e9er votre application. Notez qu'on utilise la commande npx et non npm ici. Npx va t\u00e9l\u00e9charger le paquet demand\u00e9, l'ex\u00e9cuter et ensuite le supprimer. Il ne restera aucune trace du paquet sur le disque. Petite note, le nom du projet doit \u00eatre uniquement en lettre minuscule, les majuscules ne sont pas support\u00e9es. npx create-react-app nomDuProjet Un r\u00e9pertoire nomm\u00e9e nomduprojet sera cr\u00e9\u00e9 \u00e0 l'endroit o\u00f9 la commande a \u00e9t\u00e9 lanc\u00e9 avec \u00e0 l'int\u00e9rieur les fichiers de base de l'application React. Ensuite dans le r\u00e9pertoire du projet, la commande npm start va lancer l\u2019application. Structure du projet Le point d\u2019entr\u00e9e de l\u2019application est le fichier src/index.js La page public/index.html sert quand \u00e0 elle de \u00ab support \u00bb pour le projet. La majeur partie du d\u00e9veloppement de l\u2019application se fera dans le r\u00e9pertoire src/ . On va entre autre y cr\u00e9er les fichiers de composantes, id\u00e9alement dans un r\u00e9pertoire d\u00e9di\u00e9, src/components par exemple. Le fichier app.js est le composant maitre, on peut le laisser o\u00f9 il est. Certains fichiers des r\u00e9pertoires public et src ne sont pas n\u00e9cessaire, mais src/index.js et public/index.html doivent \u00eatre pr\u00e9sent. Pour les autres, c\u2019est selon vos besoin mais pour l\u2019instant on va les laisser l\u00e0. Lancer le projet Pour lancer l'application React, entrez la commande suivante dans un terminal \u00e0 la racine du projet npm start Attention, on ne peut avoir qu'une application React qui \"roule\" en m\u00eame temps. Quitter l'application Pour pouvoir fermer le serveur de d\u00e9veloppement en tout temps, on va ajouter un script dans le fichier package.json . Dans la section scripts ajouter la ligne suivante \"stop\": \"taskkill -F -IM node.exe\" \"scripts\": { ... \"stop\": \"taskkill -F -IM node.exe\" } Pour fermer le serveur de d\u00e9veloppement et \"quitter\" l'application, vous n'avez qu'\u00e0 faire ctrl+c dans la m\u00eame fen\u00eatre de terminal qui roule le serveur. Si vous n'avez plus acc\u00e8s au terminal qui \u00e0 lancer le serveur, ouvrez un nouveau terminal et faites la commande npm stop R\u00e9f\u00e9rences Create React App npm vs npx","title":"Cr\u00e9ation d'un projet"},{"location":"notes_de_cours/react/creation_projet/#creation-dun-projet-react","text":"Il y a plusieurs fa\u00e7on d'utiliser React dans nos application web. Dans le cadre de ce cours nous allons utiliser Create React App qui va cr\u00e9er pour nous on projet de \"d\u00e9part\" \u00e0 partir duquel nous pourrons construire nos application React.","title":"Cr\u00e9ation d'un projet React"},{"location":"notes_de_cours/react/creation_projet/#prerequis","text":"node.js (disponible en t\u00e9l\u00e9chargement ici ) un terminal qui permet d'utiliser des commandes plus avanc\u00e9es (Git bash)","title":"Pr\u00e9requis"},{"location":"notes_de_cours/react/creation_projet/#initialiser-notre-application","text":"La commande suivante vous permet de cr\u00e9er votre application. Notez qu'on utilise la commande npx et non npm ici. Npx va t\u00e9l\u00e9charger le paquet demand\u00e9, l'ex\u00e9cuter et ensuite le supprimer. Il ne restera aucune trace du paquet sur le disque. Petite note, le nom du projet doit \u00eatre uniquement en lettre minuscule, les majuscules ne sont pas support\u00e9es. npx create-react-app nomDuProjet Un r\u00e9pertoire nomm\u00e9e nomduprojet sera cr\u00e9\u00e9 \u00e0 l'endroit o\u00f9 la commande a \u00e9t\u00e9 lanc\u00e9 avec \u00e0 l'int\u00e9rieur les fichiers de base de l'application React. Ensuite dans le r\u00e9pertoire du projet, la commande npm start va lancer l\u2019application.","title":"Initialiser notre application"},{"location":"notes_de_cours/react/creation_projet/#structure-du-projet","text":"Le point d\u2019entr\u00e9e de l\u2019application est le fichier src/index.js La page public/index.html sert quand \u00e0 elle de \u00ab support \u00bb pour le projet. La majeur partie du d\u00e9veloppement de l\u2019application se fera dans le r\u00e9pertoire src/ . On va entre autre y cr\u00e9er les fichiers de composantes, id\u00e9alement dans un r\u00e9pertoire d\u00e9di\u00e9, src/components par exemple. Le fichier app.js est le composant maitre, on peut le laisser o\u00f9 il est. Certains fichiers des r\u00e9pertoires public et src ne sont pas n\u00e9cessaire, mais src/index.js et public/index.html doivent \u00eatre pr\u00e9sent. Pour les autres, c\u2019est selon vos besoin mais pour l\u2019instant on va les laisser l\u00e0.","title":"Structure du projet"},{"location":"notes_de_cours/react/creation_projet/#lancer-le-projet","text":"Pour lancer l'application React, entrez la commande suivante dans un terminal \u00e0 la racine du projet npm start Attention, on ne peut avoir qu'une application React qui \"roule\" en m\u00eame temps.","title":"Lancer le projet"},{"location":"notes_de_cours/react/creation_projet/#quitter-lapplication","text":"Pour pouvoir fermer le serveur de d\u00e9veloppement en tout temps, on va ajouter un script dans le fichier package.json . Dans la section scripts ajouter la ligne suivante \"stop\": \"taskkill -F -IM node.exe\" \"scripts\": { ... \"stop\": \"taskkill -F -IM node.exe\" } Pour fermer le serveur de d\u00e9veloppement et \"quitter\" l'application, vous n'avez qu'\u00e0 faire ctrl+c dans la m\u00eame fen\u00eatre de terminal qui roule le serveur. Si vous n'avez plus acc\u00e8s au terminal qui \u00e0 lancer le serveur, ouvrez un nouveau terminal et faites la commande npm stop","title":"Quitter l'application"},{"location":"notes_de_cours/react/creation_projet/#references","text":"Create React App npm vs npx","title":"R\u00e9f\u00e9rences"},{"location":"notes_de_cours/react/cycle_de_vie/","text":"Le cycle de vie d'un composant Chaque composante a un cycle de vie qu\u2019on peut diviser en trois grandes \u00e9tapes : Chargement (Mounting) : C\u2019est ici que les composantes sont ajout\u00e9es au DOM et affich\u00e9es dans la page. Mise-\u00e0-jour (Updating) : Cette \u00e9tape est lanc\u00e9e quand l\u2019objet state ou props de la composante est modifi\u00e9. D\u00e9chargement (Unmounting) : Si on enl\u00e8ve une composante du DOM, cette \u00e9tape est alors effectu\u00e9e. Chargement (Mounting) Il y a quatres m\u00e9thodes qui sont ex\u00e9cut\u00e9s dans cette ordre lors du chargement constructor(props) : Le constructeur de la classe, on y d\u00e9fini entre autre les valeurs initiales de l\u2019objet state. getDerivedStateFromProps(props, state) : Appel\u00e9 juste avant d\u2019afficher la composante dans le DOM. render() : Affiche la composante dans la page. componentDidMount() : Appel\u00e9 apr\u00e8s avoir affich\u00e9 la composante dans le DOM. On y place le traitement \u00e0 faire une fois que la composante fait partie du DOM. R\u00e9f\u00e9rences https://fr.reactjs.org/docs/state-and-lifecycle.html https://www.w3schools.com/react/react_state.asp","title":"Cycle de vie d'une application"},{"location":"notes_de_cours/react/cycle_de_vie/#le-cycle-de-vie-dun-composant","text":"Chaque composante a un cycle de vie qu\u2019on peut diviser en trois grandes \u00e9tapes : Chargement (Mounting) : C\u2019est ici que les composantes sont ajout\u00e9es au DOM et affich\u00e9es dans la page. Mise-\u00e0-jour (Updating) : Cette \u00e9tape est lanc\u00e9e quand l\u2019objet state ou props de la composante est modifi\u00e9. D\u00e9chargement (Unmounting) : Si on enl\u00e8ve une composante du DOM, cette \u00e9tape est alors effectu\u00e9e.","title":"Le cycle de vie d'un composant"},{"location":"notes_de_cours/react/cycle_de_vie/#chargement-mounting","text":"Il y a quatres m\u00e9thodes qui sont ex\u00e9cut\u00e9s dans cette ordre lors du chargement constructor(props) : Le constructeur de la classe, on y d\u00e9fini entre autre les valeurs initiales de l\u2019objet state. getDerivedStateFromProps(props, state) : Appel\u00e9 juste avant d\u2019afficher la composante dans le DOM. render() : Affiche la composante dans la page. componentDidMount() : Appel\u00e9 apr\u00e8s avoir affich\u00e9 la composante dans le DOM. On y place le traitement \u00e0 faire une fois que la composante fait partie du DOM.","title":"Chargement (Mounting)"},{"location":"notes_de_cours/react/cycle_de_vie/#references","text":"https://fr.reactjs.org/docs/state-and-lifecycle.html https://www.w3schools.com/react/react_state.asp","title":"R\u00e9f\u00e9rences"},{"location":"notes_de_cours/react/fetch_api/","text":"Consommer un service Web en React On consomme un service web au moyen d\u2019un appel Ajax (asynchronous JavaScript and XML). Il y a plusieurs biblioth\u00e8ques de disponibles qu\u2019on peut utiliser avec notre application React : Axios, Jquery Ajax et Fetch Axios est simple d\u2019utilisation et est tr\u00e8s complet. Il dispose \u00e9galement d\u2019une bonne couverture m\u00eame sur les navigateurs plus anciens. Utilisation de Axios Pour l'installation de Axios, ouvrez un terminal et \u00e0 la racine du projet dans lequel vous voulez l'utiliser entrez la commande suivante : npm install axios Il faut ensuite importer axios dans les fichiers js o\u00f9 on veut l\u2019utiliser. import axios from 'axios\u2019; Voici un exemple de la structure d'un appel \u00e0 un \"endpoint\" d'un api avec Axios axios.get('/maroute') .then((response) => { // Traitement si succ\u00e8s }) .catch((error) => { // Traitement si erreur }) .then(() => { // Traitement qui sera toujours ex\u00e9cut\u00e9 }) Quand faire l\u2019Appel AJAX? Quand on voudra obtenir nos informations pour les afficher dans une composantes. Habituellement on va le faire dans la m\u00e9thode componentDidMount. Une fois les donn\u00e9es r\u00e9cup\u00e9r\u00e9es, on va utiliser setState pour mettre \u00e0 jour la composante. Exemple de r\u00e9cup\u00e9ration de donn\u00e9es au chargement du composant On importe axios dans l\u2019ent\u00eate du fichier Dans le constructeur, on cr\u00e9e un tableau vide qui va recevoir le r\u00e9sultat de l\u2019appel. On ajoute la m\u00e9thode componentDidMount() qui va faire l\u2019appel via Axios. Quand l\u2019appel r\u00e9ussi, on utilise setState() pour mettre \u00e0 jour notre tableau et la composante. import React from 'react'; // On importe la biblioth\u00e8que Axios import axios from \"axios\"; class ListeUtilisasteur extends React.Component { constructor(props) { super(props); this.state = { // On initialise ici un tableau vide qui va contenir notre r\u00e9sultat utilisateurs : [], } } componentDidMount() { axios.get('https://jsonplaceholder.typicode.com/users') .then((response) => { const utilisateurs = response.data; // On r\u00e9cup\u00e8re les donn\u00e9es re\u00e7ues et on modifie le tableau dans l'\u00e9tat this.setState({utilisateurs : utilisateurs}) }) } On a vu que les appels \u00e0 un api se font de mani\u00e8re asynchrone, on ne peut donc pas \u00eatre assur\u00e9 que les donn\u00e9es seront disponible lors du premier rendu du composant. Une m\u00e9thode pour se prot\u00e9ger de cette \u00e9ventualit\u00e9 est de tester dans la fonction render si nos valeurs existe dans l'\u00e9tat local, ou bien ajouter une variable bool\u00e9enne qui devient vrai au succ\u00e9s de l'appel \u00e0 l'api. import React from 'react'; import axios from \"axios\"; class ListeUtilisasteur extends React.Component { constructor(props) { super(props); this.state = { // isLodad est faux tant que l'appel n'est pas termin\u00e9 isLoaded: false, utilisateurs : [], } } componentDidMount() { axios.get('https://jsonplaceholder.typicode.com/users') .then((response) => { const utilisateurs = response.data; this.setState({ utilisateurs : utilisateurs, isLoaded: true }) }) } render() { if(!this.state.idLoaded){ return ( // HTML \u00e0 retourner tant que l'appel n'est pas termin\u00e9, un message // de chargement par exemple ) } return ( // Le code \"r\u00e9gulier\" ) } Syntaxe Il y a deux syntaxes possible pour l'utilisation de Axios, c'est selon votre pr\u00e9f\u00e9rence M\u00e9thode #1 axios.post('urlDeLaRoute', { // donn\u00e9es en param\u00eatre dans le body titre: 'Nouveau livre', isbn: '123456' }) .then((resultat) => { // Traitement si l'appel a r\u00e9ussi }) M\u00e9thode #2 axios({ method: 'post', url: 'urlDeLaRoute', data: { titre: 'Nouveau livre', isbn: '123456' } }) .then((resultat) => { // Traitement si l'appel a r\u00e9ussi }) Ajouter des informations dans l'ent\u00eate de la requ\u00e8te Pour ajouter des informations dans l\u2019ent\u00eate de la requ\u00eate, comme par exemple pour l\u2019authentification, il suffit d\u2019utiliser la cl\u00e9 headers . axios({ method: 'post', url: 'urlDeLaRoute', data: { titre: 'Nouveau livre', isbn: '123456' }, headers: { Authorization : 'Bearer monToken' } }) .then((resultat) => { // Traitement si l'appel a r\u00e9ussi }) R\u00e9cup\u00e9rer les r\u00e9sultats Peu importe la syntaxe que vous utilisez, la valeur de la r\u00e9ponse va \u00eatre contenu dans la variable que vous d\u00e9clarez en param\u00e8tre du then() de l'appel. axios.get('https://jsonplaceholder.typicode.com/users') // Toute la r\u00e9ponse se situe dans la variable response d\u00e9clar\u00e9 ici .then((response) => { // Ensuite pour aller chercher le \"body\" de la r\u00e9ponse (ce qui nous int\u00e9resse), on doit utiliser data qui nous retourne un objet. const utilisateurs = response.data; this.setState({ utilisateurs : utilisateurs, isLoaded: true }) }) Prenons l'exemple suivant, le r\u00e9sultat de la requ\u00eatre est structur\u00e9 de cette fa\u00e7on : { \"nom\" : \"Fr\u00e9chette\", \"prenom\" : \"Mathieu\" } Je peux acc\u00e9der aux valeurs de cette fa\u00e7on axios.get('https://superapi.wow/users') .then((response) => { // utilisateur repr\u00e9sente mon objet r\u00e9ponse qui a les attributs nom et prenom. const utilisateur = response.data; this.setState({ nom : utilisateur.nom, prenom : utilisateur.prenom }) }) Cr\u00e9er une instance d\u2019axios Permet de ne sp\u00e9cifier par exemple qu\u2019une fois l\u2019url de base et d\u2019ensuite n\u2019ajouter que la route Cr\u00e9ez-vous un fichier Javascript qui contiendra le code de l\u2019instance, ex. utils/Api.js // Api.js import axios from \"axios\"; export default axios.create({ baseURL: \"https://swh2022-libapi.herokuapp.com\", responseType: \"json\", }) Ensuite on importe le fichier et on peut qu\u2019ajouter la route lors de l\u2019appel // La localisation du fichier est \u00e0 ajuster import api from '../utils/Api'; // ... componentDidMount() { // Ici on change axios pour api, le terme qu'on a d\u00e9fini dans le import api({ method: 'post', // c'est ici qu'on peut seulement entrer la derni\u00e8re partie de l'url qui // repr\u00e9sente la route au lieu d'avoir \u00e0 \u00e9crire // https://swh2022-libapi.herokuapp.com/livres url: '/livres', data: { titre: 'Nouveau livre', isbn: '123456' } }) .then((resultat) => { // Traitement si l'appel a r\u00e9ussi }) } // ... Votre code sera plus clair et lisible mais l'avantage majeur est que si l'api change de serveur, vous aurez \u00e0 changer l'information qu'\u00e0 un endroit dans le code. Pour aller plus loin La documentation de Axios : https://axios-http.com/docs/intro","title":"Consommer un service Web avec Axios"},{"location":"notes_de_cours/react/fetch_api/#consommer-un-service-web-en-react","text":"On consomme un service web au moyen d\u2019un appel Ajax (asynchronous JavaScript and XML). Il y a plusieurs biblioth\u00e8ques de disponibles qu\u2019on peut utiliser avec notre application React : Axios, Jquery Ajax et Fetch Axios est simple d\u2019utilisation et est tr\u00e8s complet. Il dispose \u00e9galement d\u2019une bonne couverture m\u00eame sur les navigateurs plus anciens.","title":"Consommer un service Web en React"},{"location":"notes_de_cours/react/fetch_api/#utilisation-de-axios","text":"Pour l'installation de Axios, ouvrez un terminal et \u00e0 la racine du projet dans lequel vous voulez l'utiliser entrez la commande suivante : npm install axios Il faut ensuite importer axios dans les fichiers js o\u00f9 on veut l\u2019utiliser. import axios from 'axios\u2019; Voici un exemple de la structure d'un appel \u00e0 un \"endpoint\" d'un api avec Axios axios.get('/maroute') .then((response) => { // Traitement si succ\u00e8s }) .catch((error) => { // Traitement si erreur }) .then(() => { // Traitement qui sera toujours ex\u00e9cut\u00e9 })","title":"Utilisation de Axios"},{"location":"notes_de_cours/react/fetch_api/#quand-faire-lappel-ajax","text":"Quand on voudra obtenir nos informations pour les afficher dans une composantes. Habituellement on va le faire dans la m\u00e9thode componentDidMount. Une fois les donn\u00e9es r\u00e9cup\u00e9r\u00e9es, on va utiliser setState pour mettre \u00e0 jour la composante. Exemple de r\u00e9cup\u00e9ration de donn\u00e9es au chargement du composant On importe axios dans l\u2019ent\u00eate du fichier Dans le constructeur, on cr\u00e9e un tableau vide qui va recevoir le r\u00e9sultat de l\u2019appel. On ajoute la m\u00e9thode componentDidMount() qui va faire l\u2019appel via Axios. Quand l\u2019appel r\u00e9ussi, on utilise setState() pour mettre \u00e0 jour notre tableau et la composante. import React from 'react'; // On importe la biblioth\u00e8que Axios import axios from \"axios\"; class ListeUtilisasteur extends React.Component { constructor(props) { super(props); this.state = { // On initialise ici un tableau vide qui va contenir notre r\u00e9sultat utilisateurs : [], } } componentDidMount() { axios.get('https://jsonplaceholder.typicode.com/users') .then((response) => { const utilisateurs = response.data; // On r\u00e9cup\u00e8re les donn\u00e9es re\u00e7ues et on modifie le tableau dans l'\u00e9tat this.setState({utilisateurs : utilisateurs}) }) } On a vu que les appels \u00e0 un api se font de mani\u00e8re asynchrone, on ne peut donc pas \u00eatre assur\u00e9 que les donn\u00e9es seront disponible lors du premier rendu du composant. Une m\u00e9thode pour se prot\u00e9ger de cette \u00e9ventualit\u00e9 est de tester dans la fonction render si nos valeurs existe dans l'\u00e9tat local, ou bien ajouter une variable bool\u00e9enne qui devient vrai au succ\u00e9s de l'appel \u00e0 l'api. import React from 'react'; import axios from \"axios\"; class ListeUtilisasteur extends React.Component { constructor(props) { super(props); this.state = { // isLodad est faux tant que l'appel n'est pas termin\u00e9 isLoaded: false, utilisateurs : [], } } componentDidMount() { axios.get('https://jsonplaceholder.typicode.com/users') .then((response) => { const utilisateurs = response.data; this.setState({ utilisateurs : utilisateurs, isLoaded: true }) }) } render() { if(!this.state.idLoaded){ return ( // HTML \u00e0 retourner tant que l'appel n'est pas termin\u00e9, un message // de chargement par exemple ) } return ( // Le code \"r\u00e9gulier\" ) }","title":"Quand faire l\u2019Appel AJAX?"},{"location":"notes_de_cours/react/fetch_api/#syntaxe","text":"Il y a deux syntaxes possible pour l'utilisation de Axios, c'est selon votre pr\u00e9f\u00e9rence M\u00e9thode #1 axios.post('urlDeLaRoute', { // donn\u00e9es en param\u00eatre dans le body titre: 'Nouveau livre', isbn: '123456' }) .then((resultat) => { // Traitement si l'appel a r\u00e9ussi }) M\u00e9thode #2 axios({ method: 'post', url: 'urlDeLaRoute', data: { titre: 'Nouveau livre', isbn: '123456' } }) .then((resultat) => { // Traitement si l'appel a r\u00e9ussi })","title":"Syntaxe"},{"location":"notes_de_cours/react/fetch_api/#ajouter-des-informations-dans-lentete-de-la-requete","text":"Pour ajouter des informations dans l\u2019ent\u00eate de la requ\u00eate, comme par exemple pour l\u2019authentification, il suffit d\u2019utiliser la cl\u00e9 headers . axios({ method: 'post', url: 'urlDeLaRoute', data: { titre: 'Nouveau livre', isbn: '123456' }, headers: { Authorization : 'Bearer monToken' } }) .then((resultat) => { // Traitement si l'appel a r\u00e9ussi })","title":"Ajouter des informations dans l'ent\u00eate de la requ\u00e8te"},{"location":"notes_de_cours/react/fetch_api/#recuperer-les-resultats","text":"Peu importe la syntaxe que vous utilisez, la valeur de la r\u00e9ponse va \u00eatre contenu dans la variable que vous d\u00e9clarez en param\u00e8tre du then() de l'appel. axios.get('https://jsonplaceholder.typicode.com/users') // Toute la r\u00e9ponse se situe dans la variable response d\u00e9clar\u00e9 ici .then((response) => { // Ensuite pour aller chercher le \"body\" de la r\u00e9ponse (ce qui nous int\u00e9resse), on doit utiliser data qui nous retourne un objet. const utilisateurs = response.data; this.setState({ utilisateurs : utilisateurs, isLoaded: true }) }) Prenons l'exemple suivant, le r\u00e9sultat de la requ\u00eatre est structur\u00e9 de cette fa\u00e7on : { \"nom\" : \"Fr\u00e9chette\", \"prenom\" : \"Mathieu\" } Je peux acc\u00e9der aux valeurs de cette fa\u00e7on axios.get('https://superapi.wow/users') .then((response) => { // utilisateur repr\u00e9sente mon objet r\u00e9ponse qui a les attributs nom et prenom. const utilisateur = response.data; this.setState({ nom : utilisateur.nom, prenom : utilisateur.prenom }) })","title":"R\u00e9cup\u00e9rer les r\u00e9sultats"},{"location":"notes_de_cours/react/fetch_api/#creer-une-instance-daxios","text":"Permet de ne sp\u00e9cifier par exemple qu\u2019une fois l\u2019url de base et d\u2019ensuite n\u2019ajouter que la route Cr\u00e9ez-vous un fichier Javascript qui contiendra le code de l\u2019instance, ex. utils/Api.js // Api.js import axios from \"axios\"; export default axios.create({ baseURL: \"https://swh2022-libapi.herokuapp.com\", responseType: \"json\", }) Ensuite on importe le fichier et on peut qu\u2019ajouter la route lors de l\u2019appel // La localisation du fichier est \u00e0 ajuster import api from '../utils/Api'; // ... componentDidMount() { // Ici on change axios pour api, le terme qu'on a d\u00e9fini dans le import api({ method: 'post', // c'est ici qu'on peut seulement entrer la derni\u00e8re partie de l'url qui // repr\u00e9sente la route au lieu d'avoir \u00e0 \u00e9crire // https://swh2022-libapi.herokuapp.com/livres url: '/livres', data: { titre: 'Nouveau livre', isbn: '123456' } }) .then((resultat) => { // Traitement si l'appel a r\u00e9ussi }) } // ... Votre code sera plus clair et lisible mais l'avantage majeur est que si l'api change de serveur, vous aurez \u00e0 changer l'information qu'\u00e0 un endroit dans le code.","title":"Cr\u00e9er une instance d\u2019axios"},{"location":"notes_de_cours/react/fetch_api/#pour-aller-plus-loin","text":"La documentation de Axios : https://axios-http.com/docs/intro","title":"Pour aller plus loin"},{"location":"notes_de_cours/react/form/","text":"Gestions des formulaires HTML avec React Les formulaires html poss\u00e8de d\u00e9j\u00e0 leur propre \u00ab \u00e9tat \u00bb interne. Si on veut utiliser les donn\u00e9es saisies dans nos composants React, on va cr\u00e9er ce qu\u2019on appelle un \u00ab composant contr\u00f4l\u00e9 \u00bb. Quand le champ du formulaire sera modifi\u00e9, sur l\u2019\u00e9v\u00e8nement onChange par exemple, on va mettre \u00e0 jour une variable dans le state du composant qui va \u00eatre \u00ab li\u00e9e \u00bb au champ. Ensuite l\u2019\u00e9v\u00e8nement submit va aussi \u00eatre intercept\u00e9 et trait\u00e9 dans le composant avec les donn\u00e9es de l\u2019objet state. Exemple J\u2019ai un composant ListeLivres qui affiche un formulaire d\u2019ajout de livre et un tableau avec tous les livres. Le formulaire est un composant ainsi que chaque ligne du tableau de livres (FormAjouterLivre, LigneLivre). Je veux pouvoir ajouter un livre par le formulaire et que la liste de livres se mettre \u00e0 jour automatiquement. Dans le composant principal ListeLivre je vais avoir ma liste de livres dans un tableau nomm\u00e9 books d\u00e9fini dans l\u2019objet state et aussi une fonction addBook() qui prendra en param\u00eatre un objet book qui contient les informations extrait du formulaire. La fonction addBook() va s\u2019occuper de faire l\u2019appel \u00e0 l\u2019api pour ajouter le livre et mettre \u00e0 jour le tableau Books de l\u2019objet state, ce qui va aussi mettre \u00e0 jour l\u2019affichage de la liste de livre. Dans le constructeur du composant, le tableau books est d\u00e9clar\u00e9. On doit aussi \u00ab binder \u00bb les fonctions pour qu\u2019elles soient reconnues, c\u2019est ce qui est fait \u00e0 la ligne this.addBook = this.addBook.bind(this); . // Extrait de la classe ListeLivre constructor(props) { super(props); this.state = { books: [] }; this.addBook = this.addBook.bind(this); } Dans la fonction addBook() , on fait l\u2019appel \u00e0 l\u2019Api pour ajouter le livre et ensuite sur un r\u00e9sultat positif on ajoute le nouveau livre dans le tableau books de l\u2019objet state. Dans le r\u00e9sultat, on commence par ajouter le id du nouveau livre dans l\u2019objet book re\u00e7u en param\u00e8tre. Ensuite on cr\u00e9e un nouveau tableau avec le tableau books auquel on ajoute l\u2019objet book. Finalement on met le tableau books de l\u2019objet state \u00e0 jour. // Extrait de la classe ListeLivre addBook(book) { api({ method: 'POST', url: '/books', data: { genreId: book.genreId, titre: book.titre, isbn: book.isbn } }) .then((resultat) => { book.id = resultat.data.id; const books = [...this.state.books, book]; this.setState({books: books}); }); } \u00c9tant donn\u00e9 que la gestion de l\u2019ajout se fait dans le composant ListeLivre et que la gestion du formulaire est dans FormAjouterLivre, quand on appelle FormAjouterLivre on doit lui passer en param\u00e8tre la fonction addBooks() pour pouvoir l\u2019utiliser. <FormAjouterLivre addBook={this.addBook}/> Dans le composant FormAjouterLivre , je d\u00e9finis les variables dans le state qui contiendront les valeurs du formulaire. Je me suis aussi cr\u00e9\u00e9 trois fonction : handleChange , qui va modifier les variables du state quand un contr\u00f4le du formulaire sera modifi\u00e9. handleSubmit , qui va appel\u00e9 la fonction addBook du composant ListeLivres re\u00e7u en props. clearImputs , qui va simplement r\u00e9initialiser les variables state et en m\u00eame temps les contr\u00f4les du formulaire. Ensuite dans le formulaire, je relis la fonction handleSubmit \u00e0 l\u2019\u00e9v\u00e9nement onSubmit de la balise form et handleChange \u00e0 l\u2019\u00e9v\u00e9nement onChange de chaque input. Les variables titre, genreId et isbn vont contenir les valeurs des inputs du m\u00eame nom. Ensuite je bind les fonctions utilis\u00e9es. // Constructeur de la classe FormAjouterLivre constructor(props) { super(props); this.state = { titre: '', genreId: '', isbn: '', }; this.handleChange = this.handleChange.bind(this); this.handleSubmit = this.handleSubmit.bind(this); this.clearInput = this.clearInput.bind(this); } Dans la fonction handleChange, le code suivant permet de mettre \u00e0 jour la variable de l\u2019objet state qui a le m\u00eame nom que le input du formulaire. Pour que \u00e7a fonctionne, il faut que la propri\u00e9t\u00e9 name du input soit du m\u00eame nom que la variable. On aurait aussi pu faire une fonction handleChange par input mais \u00e7a ajoute beaucoup de code pour rien. Ex. handleTitreChange qui met \u00e0 jour this.state.titre. handleChange(event) { const name = event.target.name; const value = event.target.value; this.setState({ [name]: value }); } Dans la fonction handleSubmit, je cr\u00e9e un objet book avec les valeurs de l\u2019objet state et ensuite j\u2019appelle la fonction addBook re\u00e7u en param\u00e8tre. J\u2019emp\u00eache aussi le comportement par d\u00e9faut du submit avec event.preventDefault(); handleSubmit(event) { const book = { titre: this.state.titre, genreId: this.state.genreId, isbn: this.state.isbn, }; this.props.addBook(book); event.preventDefault(); this.clearInput(); } Finalement j\u2019appelle la fonction clearInput qui s\u2019occupe de r\u00e9initialiser les variables. clearInput() { this.setState({ titre: '', genreId: '', isbn: '', }); } Voici une partie du formulaire <form onSubmit={this.handleSubmit}> <table className='BooksTable'> <tbody> <tr> <td><label>Titre :</label></td> <td> <input type=\"text\" id=\"titre\" name=\"titre\" value={this.state.titre} onChange={this.handleChange} /> </td> </tr> Voil\u00e0 une fa\u00e7on de g\u00e9rer les formulaires et faire un ajout via un appel \u00e0 notre api. Les fichiers de mes composantes ListeLivres et FormAjouterLivre sont disponible ici pour consultation : ListeLivres.js FormAjouterLivre.js Source https://fr.reactjs.org/docs/forms.html https://www.w3schools.com/react/react_forms.asp","title":"Gestion de formulaire en React"},{"location":"notes_de_cours/react/form/#gestions-des-formulaires-html-avec-react","text":"Les formulaires html poss\u00e8de d\u00e9j\u00e0 leur propre \u00ab \u00e9tat \u00bb interne. Si on veut utiliser les donn\u00e9es saisies dans nos composants React, on va cr\u00e9er ce qu\u2019on appelle un \u00ab composant contr\u00f4l\u00e9 \u00bb. Quand le champ du formulaire sera modifi\u00e9, sur l\u2019\u00e9v\u00e8nement onChange par exemple, on va mettre \u00e0 jour une variable dans le state du composant qui va \u00eatre \u00ab li\u00e9e \u00bb au champ. Ensuite l\u2019\u00e9v\u00e8nement submit va aussi \u00eatre intercept\u00e9 et trait\u00e9 dans le composant avec les donn\u00e9es de l\u2019objet state.","title":"Gestions des formulaires HTML avec React"},{"location":"notes_de_cours/react/form/#exemple","text":"J\u2019ai un composant ListeLivres qui affiche un formulaire d\u2019ajout de livre et un tableau avec tous les livres. Le formulaire est un composant ainsi que chaque ligne du tableau de livres (FormAjouterLivre, LigneLivre). Je veux pouvoir ajouter un livre par le formulaire et que la liste de livres se mettre \u00e0 jour automatiquement. Dans le composant principal ListeLivre je vais avoir ma liste de livres dans un tableau nomm\u00e9 books d\u00e9fini dans l\u2019objet state et aussi une fonction addBook() qui prendra en param\u00eatre un objet book qui contient les informations extrait du formulaire. La fonction addBook() va s\u2019occuper de faire l\u2019appel \u00e0 l\u2019api pour ajouter le livre et mettre \u00e0 jour le tableau Books de l\u2019objet state, ce qui va aussi mettre \u00e0 jour l\u2019affichage de la liste de livre. Dans le constructeur du composant, le tableau books est d\u00e9clar\u00e9. On doit aussi \u00ab binder \u00bb les fonctions pour qu\u2019elles soient reconnues, c\u2019est ce qui est fait \u00e0 la ligne this.addBook = this.addBook.bind(this); . // Extrait de la classe ListeLivre constructor(props) { super(props); this.state = { books: [] }; this.addBook = this.addBook.bind(this); } Dans la fonction addBook() , on fait l\u2019appel \u00e0 l\u2019Api pour ajouter le livre et ensuite sur un r\u00e9sultat positif on ajoute le nouveau livre dans le tableau books de l\u2019objet state. Dans le r\u00e9sultat, on commence par ajouter le id du nouveau livre dans l\u2019objet book re\u00e7u en param\u00e8tre. Ensuite on cr\u00e9e un nouveau tableau avec le tableau books auquel on ajoute l\u2019objet book. Finalement on met le tableau books de l\u2019objet state \u00e0 jour. // Extrait de la classe ListeLivre addBook(book) { api({ method: 'POST', url: '/books', data: { genreId: book.genreId, titre: book.titre, isbn: book.isbn } }) .then((resultat) => { book.id = resultat.data.id; const books = [...this.state.books, book]; this.setState({books: books}); }); } \u00c9tant donn\u00e9 que la gestion de l\u2019ajout se fait dans le composant ListeLivre et que la gestion du formulaire est dans FormAjouterLivre, quand on appelle FormAjouterLivre on doit lui passer en param\u00e8tre la fonction addBooks() pour pouvoir l\u2019utiliser. <FormAjouterLivre addBook={this.addBook}/> Dans le composant FormAjouterLivre , je d\u00e9finis les variables dans le state qui contiendront les valeurs du formulaire. Je me suis aussi cr\u00e9\u00e9 trois fonction : handleChange , qui va modifier les variables du state quand un contr\u00f4le du formulaire sera modifi\u00e9. handleSubmit , qui va appel\u00e9 la fonction addBook du composant ListeLivres re\u00e7u en props. clearImputs , qui va simplement r\u00e9initialiser les variables state et en m\u00eame temps les contr\u00f4les du formulaire. Ensuite dans le formulaire, je relis la fonction handleSubmit \u00e0 l\u2019\u00e9v\u00e9nement onSubmit de la balise form et handleChange \u00e0 l\u2019\u00e9v\u00e9nement onChange de chaque input. Les variables titre, genreId et isbn vont contenir les valeurs des inputs du m\u00eame nom. Ensuite je bind les fonctions utilis\u00e9es. // Constructeur de la classe FormAjouterLivre constructor(props) { super(props); this.state = { titre: '', genreId: '', isbn: '', }; this.handleChange = this.handleChange.bind(this); this.handleSubmit = this.handleSubmit.bind(this); this.clearInput = this.clearInput.bind(this); } Dans la fonction handleChange, le code suivant permet de mettre \u00e0 jour la variable de l\u2019objet state qui a le m\u00eame nom que le input du formulaire. Pour que \u00e7a fonctionne, il faut que la propri\u00e9t\u00e9 name du input soit du m\u00eame nom que la variable. On aurait aussi pu faire une fonction handleChange par input mais \u00e7a ajoute beaucoup de code pour rien. Ex. handleTitreChange qui met \u00e0 jour this.state.titre. handleChange(event) { const name = event.target.name; const value = event.target.value; this.setState({ [name]: value }); } Dans la fonction handleSubmit, je cr\u00e9e un objet book avec les valeurs de l\u2019objet state et ensuite j\u2019appelle la fonction addBook re\u00e7u en param\u00e8tre. J\u2019emp\u00eache aussi le comportement par d\u00e9faut du submit avec event.preventDefault(); handleSubmit(event) { const book = { titre: this.state.titre, genreId: this.state.genreId, isbn: this.state.isbn, }; this.props.addBook(book); event.preventDefault(); this.clearInput(); } Finalement j\u2019appelle la fonction clearInput qui s\u2019occupe de r\u00e9initialiser les variables. clearInput() { this.setState({ titre: '', genreId: '', isbn: '', }); } Voici une partie du formulaire <form onSubmit={this.handleSubmit}> <table className='BooksTable'> <tbody> <tr> <td><label>Titre :</label></td> <td> <input type=\"text\" id=\"titre\" name=\"titre\" value={this.state.titre} onChange={this.handleChange} /> </td> </tr> Voil\u00e0 une fa\u00e7on de g\u00e9rer les formulaires et faire un ajout via un appel \u00e0 notre api. Les fichiers de mes composantes ListeLivres et FormAjouterLivre sont disponible ici pour consultation : ListeLivres.js FormAjouterLivre.js","title":"Exemple"},{"location":"notes_de_cours/react/form/#source","text":"https://fr.reactjs.org/docs/forms.html https://www.w3schools.com/react/react_forms.asp","title":"Source"},{"location":"notes_de_cours/react/introduction/","text":"Introduction \u00e0 React Une librairie \"front-end\" Essentiellement React est une librairie javascript \u00ab front-end \u00bb qui se concentre sur la gestion de l\u2019interface utilisateur. C\u2019est un projet \u00ab open-source \u00bb pilot\u00e9 par Facebook depuis 2013. Le concept g\u00e9n\u00e9ral de React est de permettre la cr\u00e9ation d'application web dont on peut \"rafraichir\" seulement le contenu d\u00e9sir\u00e9. React propose une approche bas\u00e9e sur des composantes Un application React sera en fait une arborescence de composants r\u00e9utilisables. DOM virtuel Utilise le concept de DOM virtuel : les changements au DOM r\u00e9el ne sont appliqu\u00e9s qu\u2019au bon moment en minimisant le nombres d\u2019op\u00e9rations pour optimiser les performances. Applique le principe \u00ab Les donn\u00e9es descendent, l\u2019\u00e9tat remonte\u00bb Un composant parent peut \"passer\" des donn\u00e9es \u00e0 un composant enfant, mais le composant enfant ne peut faire \"remonter\" ces donn\u00e9es. On va utiliser plut\u00f4t utiliser des fonctions. React Developper Tools Pour vous aider dans le d\u00e9veloppement, installez l\u2019extension React Developper Tools pour votre navigateur. R\u00e9f\u00e9rences Documentation officiel https://fr.reactjs.org/ Tutoriels https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_getting_started https://www.w3schools.com/react/default.asp https://fr.reactjs.org/tutorial/tutorial.html https://www.freecodecamp.org/learn/front-end-development-libraries/react/ Cours en ligne https://openclassrooms.com/fr/courses/4664381-realisez-une-application-web-avec-react-js/4664388-decouvrez-lutilite-et-les-concepts-cles-de-react","title":"Introduction \u00e0 React"},{"location":"notes_de_cours/react/introduction/#introduction-a-react","text":"Une librairie \"front-end\" Essentiellement React est une librairie javascript \u00ab front-end \u00bb qui se concentre sur la gestion de l\u2019interface utilisateur. C\u2019est un projet \u00ab open-source \u00bb pilot\u00e9 par Facebook depuis 2013. Le concept g\u00e9n\u00e9ral de React est de permettre la cr\u00e9ation d'application web dont on peut \"rafraichir\" seulement le contenu d\u00e9sir\u00e9. React propose une approche bas\u00e9e sur des composantes Un application React sera en fait une arborescence de composants r\u00e9utilisables. DOM virtuel Utilise le concept de DOM virtuel : les changements au DOM r\u00e9el ne sont appliqu\u00e9s qu\u2019au bon moment en minimisant le nombres d\u2019op\u00e9rations pour optimiser les performances. Applique le principe \u00ab Les donn\u00e9es descendent, l\u2019\u00e9tat remonte\u00bb Un composant parent peut \"passer\" des donn\u00e9es \u00e0 un composant enfant, mais le composant enfant ne peut faire \"remonter\" ces donn\u00e9es. On va utiliser plut\u00f4t utiliser des fonctions. React Developper Tools Pour vous aider dans le d\u00e9veloppement, installez l\u2019extension React Developper Tools pour votre navigateur.","title":"Introduction \u00e0 React"},{"location":"notes_de_cours/react/introduction/#references","text":"","title":"R\u00e9f\u00e9rences"},{"location":"notes_de_cours/react/introduction/#documentation-officiel","text":"https://fr.reactjs.org/","title":"Documentation officiel"},{"location":"notes_de_cours/react/introduction/#tutoriels","text":"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_getting_started https://www.w3schools.com/react/default.asp https://fr.reactjs.org/tutorial/tutorial.html https://www.freecodecamp.org/learn/front-end-development-libraries/react/","title":"Tutoriels"},{"location":"notes_de_cours/react/introduction/#cours-en-ligne","text":"https://openclassrooms.com/fr/courses/4664381-realisez-une-application-web-avec-react-js/4664388-decouvrez-lutilite-et-les-concepts-cles-de-react","title":"Cours en ligne"},{"location":"notes_de_cours/react/jsx/","text":"","title":"Jsx"},{"location":"notes_de_cours/react/liste_component/","text":"Afficher une liste de composantes identiques Comment afficher une s\u00e9rie de composants au moyen d\u2019une boucle? Quand on veut afficher une s\u00e9rie de composantes identiques, il est plus pertinent de le faire au moyen d\u2019une boucle que de r\u00e9p\u00e9ter x fois la balise du composant. C\u2019est d\u2019autant plus vrai quand on ne connait pas d\u2019avance le nombre de composants qu\u2019on voudra afficher. Le principe est de cr\u00e9er un tableau de composants et d\u2019ensuite l\u2019appeler quand on veut l\u2019afficher. Pour \u00ab remplir \u00bb le tableau, on peut utiliser une boucle for , foreach ou bien array.map selon la situation. On doit aussi ajouter un attribut key avec une valeur unique quand on ajoute la composante pour permettre \u00e0 React de bien les diff\u00e9rencier. Exemple <Todo id={task.id} name={task.name} completed={task.completed} key={task.id} /> L'erreur qui est affich\u00e9 si on ne donne pas le param\u00e8tre key Cr\u00e9er un tableau de composantes Voici deux exemples, le premier avec une boucle foreach et le second avec la fonction array.map . let lignesTableau = []; // La classe re\u00e7oit en param\u00e8tre un tableau livres // LigneTableau est une composante this.props.livres.foreach(function(livre) { lignesTableau.push(<LigneTableau livre={livre} key={livre.id}/>); }); // ou avec une fonction fl\u00e9ch\u00e9e this.props.livres.foreach(book => lignesTableau.push(<LigneTableau livre={livre} key={livre.id}/>)); const lignesTableau = this.props.livres.map(livre => (<LigneTableau book={livre} key={livre.id}/>)); Dans les deux cas, on peut ensuite utiliser le tableau lignesTableau comme ceci <table className=\"BooksTable\"> <thead> <tr> <th>id</th> <th>Titre</th> </tr> </thead> <tbody> {lignesTableau} </tbody> </table>","title":"Afficher une liste de composantes identiques"},{"location":"notes_de_cours/react/liste_component/#afficher-une-liste-de-composantes-identiques","text":"","title":"Afficher une liste de composantes identiques"},{"location":"notes_de_cours/react/liste_component/#comment-afficher-une-serie-de-composants-au-moyen-dune-boucle","text":"Quand on veut afficher une s\u00e9rie de composantes identiques, il est plus pertinent de le faire au moyen d\u2019une boucle que de r\u00e9p\u00e9ter x fois la balise du composant. C\u2019est d\u2019autant plus vrai quand on ne connait pas d\u2019avance le nombre de composants qu\u2019on voudra afficher. Le principe est de cr\u00e9er un tableau de composants et d\u2019ensuite l\u2019appeler quand on veut l\u2019afficher. Pour \u00ab remplir \u00bb le tableau, on peut utiliser une boucle for , foreach ou bien array.map selon la situation. On doit aussi ajouter un attribut key avec une valeur unique quand on ajoute la composante pour permettre \u00e0 React de bien les diff\u00e9rencier. Exemple <Todo id={task.id} name={task.name} completed={task.completed} key={task.id} /> L'erreur qui est affich\u00e9 si on ne donne pas le param\u00e8tre key","title":"Comment afficher une s\u00e9rie de composants au moyen d\u2019une boucle?"},{"location":"notes_de_cours/react/liste_component/#creer-un-tableau-de-composantes","text":"Voici deux exemples, le premier avec une boucle foreach et le second avec la fonction array.map . let lignesTableau = []; // La classe re\u00e7oit en param\u00e8tre un tableau livres // LigneTableau est une composante this.props.livres.foreach(function(livre) { lignesTableau.push(<LigneTableau livre={livre} key={livre.id}/>); }); // ou avec une fonction fl\u00e9ch\u00e9e this.props.livres.foreach(book => lignesTableau.push(<LigneTableau livre={livre} key={livre.id}/>)); const lignesTableau = this.props.livres.map(livre => (<LigneTableau book={livre} key={livre.id}/>)); Dans les deux cas, on peut ensuite utiliser le tableau lignesTableau comme ceci <table className=\"BooksTable\"> <thead> <tr> <th>id</th> <th>Titre</th> </tr> </thead> <tbody> {lignesTableau} </tbody> </table>","title":"Cr\u00e9er un tableau de composantes"},{"location":"notes_de_cours/react/props/","text":"Param\u00e8tres de composantes (props) Les \u00ab props \u00bb sont des param\u00e8tres qu\u2019on \u00ab passe \u00bb aux composantes via des attributs html. <Helloworld name='Mathieu' /> La composante re\u00e7oit un objet props qui va contenir les attributs qu\u2019on lui envoie. <H1>Hello, {this.props.name}</H1> Dans ces deux exemples, la balise H1 afficherait \"Hello, Mathieu\". Notez la syntaxe pour utiliser une variable avec JSX, il faut l\u2019entourer des caract\u00e8res { }. On peut envoyer ce qu\u2019on veut dans l\u2019objet prop : une variable, une constante, un tableau, un autre objet, une fonction, etc. const infoUsager = {prenom: 'Mathieu', nom: 'Fr\u00e9chette'} // ... <Helloworld usager={infoUsager} /> et ensuite dans le composant HelloWorld <H1>Hello, {this.props.usager.prenom} {this.props.usager.prenom}</H1> Si vous avez une fonction constructeur (constructor) dans votre classe composante, vous devez passer props en arguments de la fonction et utiliser la methode super(props) . constructor(props) { super(props); // ... } Les props sont en lecture seule , on ne peut les modifier.","title":"Les props"},{"location":"notes_de_cours/react/props/#parametres-de-composantes-props","text":"Les \u00ab props \u00bb sont des param\u00e8tres qu\u2019on \u00ab passe \u00bb aux composantes via des attributs html. <Helloworld name='Mathieu' /> La composante re\u00e7oit un objet props qui va contenir les attributs qu\u2019on lui envoie. <H1>Hello, {this.props.name}</H1> Dans ces deux exemples, la balise H1 afficherait \"Hello, Mathieu\". Notez la syntaxe pour utiliser une variable avec JSX, il faut l\u2019entourer des caract\u00e8res { }. On peut envoyer ce qu\u2019on veut dans l\u2019objet prop : une variable, une constante, un tableau, un autre objet, une fonction, etc. const infoUsager = {prenom: 'Mathieu', nom: 'Fr\u00e9chette'} // ... <Helloworld usager={infoUsager} /> et ensuite dans le composant HelloWorld <H1>Hello, {this.props.usager.prenom} {this.props.usager.prenom}</H1> Si vous avez une fonction constructeur (constructor) dans votre classe composante, vous devez passer props en arguments de la fonction et utiliser la methode super(props) . constructor(props) { super(props); // ... } Les props sont en lecture seule , on ne peut les modifier.","title":"Param\u00e8tres de composantes (props)"},{"location":"notes_de_cours/react/react_notes/","text":"Notes sur React Don't touch the dom Build website like lego blocks (component) Unidirectional data flow I'm just the UI, the rest is up to you Multiplatform, react native librairie de component Material Blueprint keywords Declarative JSX Components State Props Virtual Dom What make a good React Dev Decide on components Decide the state and where it lives What change when state changes npm vs npx npm t\u00e9l\u00e9charge et installe npx t\u00e9l\u00e9charge, ex\u00e9cute et supprimer ensuite, ne reste pas sur le disque Le point d'entr\u00e9e d'une application React est index.js Installation Node 16.14.0 LTS (vient avec npm) gitbash Create React App https://fr.reactjs.org/docs/create-a-new-react-app.html React-scripts Pour se simplifier la vie, lance des scripts pour bien utiliser notre projet React. D\u00e9finie dans package.json sous \"scripts\", pour utiliser, on utilise npm ou yarn et le nom du script : npm start . start, lance l'application sur un serveur de d\u00e9veloppement local build, cr\u00e9e une version optimis\u00e9 de l'application, pour la distribuer et quelle soit la plus rapide possible. test, lance les fichiers \".test.js\" eject, pas touche!! Pour exclure des trucs du build? Je suis pas sur, mais c'est pas \u00e0 utiliser sauf dans des cas tr\u00e8s sp\u00e9cifique. Classes vs Hook","title":"Notes sur React"},{"location":"notes_de_cours/react/react_notes/#notes-sur-react","text":"Don't touch the dom Build website like lego blocks (component) Unidirectional data flow I'm just the UI, the rest is up to you Multiplatform, react native librairie de component Material Blueprint keywords Declarative JSX Components State Props Virtual Dom What make a good React Dev Decide on components Decide the state and where it lives What change when state changes npm vs npx npm t\u00e9l\u00e9charge et installe npx t\u00e9l\u00e9charge, ex\u00e9cute et supprimer ensuite, ne reste pas sur le disque Le point d'entr\u00e9e d'une application React est index.js","title":"Notes sur React"},{"location":"notes_de_cours/react/react_notes/#installation","text":"Node 16.14.0 LTS (vient avec npm) gitbash","title":"Installation"},{"location":"notes_de_cours/react/react_notes/#create-react-app","text":"https://fr.reactjs.org/docs/create-a-new-react-app.html","title":"Create React App"},{"location":"notes_de_cours/react/react_notes/#react-scripts","text":"Pour se simplifier la vie, lance des scripts pour bien utiliser notre projet React. D\u00e9finie dans package.json sous \"scripts\", pour utiliser, on utilise npm ou yarn et le nom du script : npm start . start, lance l'application sur un serveur de d\u00e9veloppement local build, cr\u00e9e une version optimis\u00e9 de l'application, pour la distribuer et quelle soit la plus rapide possible. test, lance les fichiers \".test.js\" eject, pas touche!! Pour exclure des trucs du build? Je suis pas sur, mais c'est pas \u00e0 utiliser sauf dans des cas tr\u00e8s sp\u00e9cifique.","title":"React-scripts"},{"location":"notes_de_cours/react/react_notes/#classes-vs-hook","text":"","title":"Classes vs Hook"},{"location":"notes_de_cours/react/remonter_data/","text":"Faire \"remonter\" des donn\u00e9es entre composant On a vu qu'en React les \"donn\u00e9es descendent, l'\u00e9tat remonte\". En passant les donn\u00e9es en param\u00e8tre du composant parent au composant enfant on peut y acc\u00e9der avec l'objet props mais elles sont en lecture seule. Quand on veut faire remonter des donn\u00e9es dans l'autre sens on doit utiliser une fonction d\u00e9fini dans le composant parent et la passer elle aussi en param\u00e8tre au composant enfant. Prenons comme exemple l'affichage suivant qui est divis\u00e9 en deux composant parent / enfant : La valeur du nom est stock\u00e9 dans l'\u00e9tat local de App.js . On veut pouvoir le modifier dans la zone de texte du composant EditName . Le composant App.js va passer en param\u00e8tre la valeur du nom mais il ne pourra pas \u00eatre modifi\u00e9 par le composant enfant car les props sont toujours en lecture seule. On va devoir cr\u00e9er une fonction dans App.js qui va modifier l'\u00e9tat de celui-ci et la passer en param\u00e8tre au composant EditName . Ensuite dans EditName on va associer une fonction \u00e0 l'\u00e9v\u00e9nement OnChange de la zone de saisie et dans cette fonction on va appeler la fonction re\u00e7u en param\u00e8tre par le composant App . App.js import React from 'react'; import './App.css'; import EditName from './EditName'; class App extends React.Component { constructor() { super(); this.state = { nom : \"World\" }; } // Fonction qui modifie la valeur de la variable nom de l'\u00e9tat local handleChangeNameFromEdit = (nouveauNom) => this.setState({nom: nouveauNom}); render() { return ( <div className=\"App\"> <h1>Hello {this.state.nom}</h1> <EditName nom={this.state.nom} // On transmet la fonction \u00e0 la composante EditName changeName={this.handleChangeNameFromEdit} /> </div> ) } } export default (App); EditName.js import React from \"react\"; class EditName extends React.Component { constructor(props) { super(props); } // La fonction va seulement ex\u00e9cuter la fonction re\u00e7u en param\u00eatre. handleNameChange = (event) => { this.props.changeName(event.target.value); } render() { return ( <div> <label htmlFor='editName'>Modifier le nom</label> <input type=\"text\" id=\"editName\" name=\"editName\" value={this.props.nom} // On branche la fonctioni handleChangeName \u00e0 l'\u00e9v\u00e9nement onChange du editbox onChange={this.handleNameChange} /> </div> ) } } export default (EditName); Attention, si vous utilisez une fonction \"classique\" (pas une fonction fl\u00e8ch\u00e9e) il faudra \"l'associer\" dans le constructeur pour pouvoir utiliser this . import React from \"react\"; class EditName extends React.Component { constructor(props) { super(props); // Liaison de la fonction avec this this.handleNameChange = this.handleNameChange.bind(this) } // La fonction \u00e0 lier handleNameChange = function (event) { this.props.changeName(event.target.value); } render() { return ( <div> <label htmlFor='editName'>Modifier le nom</label> <input type=\"text\" id=\"editName\" name=\"editName\" value={this.props.nom} onChange={this.handleNameChange} /> </div> ) } } export default (EditName);","title":"Faire \"remonter\" des donn\u00e9es"},{"location":"notes_de_cours/react/remonter_data/#faire-remonter-des-donnees-entre-composant","text":"On a vu qu'en React les \"donn\u00e9es descendent, l'\u00e9tat remonte\". En passant les donn\u00e9es en param\u00e8tre du composant parent au composant enfant on peut y acc\u00e9der avec l'objet props mais elles sont en lecture seule. Quand on veut faire remonter des donn\u00e9es dans l'autre sens on doit utiliser une fonction d\u00e9fini dans le composant parent et la passer elle aussi en param\u00e8tre au composant enfant. Prenons comme exemple l'affichage suivant qui est divis\u00e9 en deux composant parent / enfant : La valeur du nom est stock\u00e9 dans l'\u00e9tat local de App.js . On veut pouvoir le modifier dans la zone de texte du composant EditName . Le composant App.js va passer en param\u00e8tre la valeur du nom mais il ne pourra pas \u00eatre modifi\u00e9 par le composant enfant car les props sont toujours en lecture seule. On va devoir cr\u00e9er une fonction dans App.js qui va modifier l'\u00e9tat de celui-ci et la passer en param\u00e8tre au composant EditName . Ensuite dans EditName on va associer une fonction \u00e0 l'\u00e9v\u00e9nement OnChange de la zone de saisie et dans cette fonction on va appeler la fonction re\u00e7u en param\u00e8tre par le composant App . App.js import React from 'react'; import './App.css'; import EditName from './EditName'; class App extends React.Component { constructor() { super(); this.state = { nom : \"World\" }; } // Fonction qui modifie la valeur de la variable nom de l'\u00e9tat local handleChangeNameFromEdit = (nouveauNom) => this.setState({nom: nouveauNom}); render() { return ( <div className=\"App\"> <h1>Hello {this.state.nom}</h1> <EditName nom={this.state.nom} // On transmet la fonction \u00e0 la composante EditName changeName={this.handleChangeNameFromEdit} /> </div> ) } } export default (App); EditName.js import React from \"react\"; class EditName extends React.Component { constructor(props) { super(props); } // La fonction va seulement ex\u00e9cuter la fonction re\u00e7u en param\u00eatre. handleNameChange = (event) => { this.props.changeName(event.target.value); } render() { return ( <div> <label htmlFor='editName'>Modifier le nom</label> <input type=\"text\" id=\"editName\" name=\"editName\" value={this.props.nom} // On branche la fonctioni handleChangeName \u00e0 l'\u00e9v\u00e9nement onChange du editbox onChange={this.handleNameChange} /> </div> ) } } export default (EditName); Attention, si vous utilisez une fonction \"classique\" (pas une fonction fl\u00e8ch\u00e9e) il faudra \"l'associer\" dans le constructeur pour pouvoir utiliser this . import React from \"react\"; class EditName extends React.Component { constructor(props) { super(props); // Liaison de la fonction avec this this.handleNameChange = this.handleNameChange.bind(this) } // La fonction \u00e0 lier handleNameChange = function (event) { this.props.changeName(event.target.value); } render() { return ( <div> <label htmlFor='editName'>Modifier le nom</label> <input type=\"text\" id=\"editName\" name=\"editName\" value={this.props.nom} onChange={this.handleNameChange} /> </div> ) } } export default (EditName);","title":"Faire \"remonter\" des donn\u00e9es entre composant"},{"location":"notes_de_cours/react/routing/","text":"Routage Source https://reactrouter.com/ https://v5.reactrouter.com/web/guides/quick-start https://www.digitalocean.com/community/tutorials/how-to-handle-routing-in-react-apps-with-react-router https://medium.com/the-andela-way/understanding-the-fundamentals-of-routing-in-react-b29f806b157e","title":"Routage"},{"location":"notes_de_cours/react/routing/#routage","text":"Source https://reactrouter.com/ https://v5.reactrouter.com/web/guides/quick-start https://www.digitalocean.com/community/tutorials/how-to-handle-routing-in-react-apps-with-react-router https://medium.com/the-andela-way/understanding-the-fundamentals-of-routing-in-react-b29f806b157e","title":"Routage"},{"location":"notes_de_cours/react/snippet/","text":"Extraits de code utile pour React Question d'acc\u00e9l\u00e9rer votre travail, voici un extrait de code que vous allez r\u00e9utiliser souvent : import React from 'react'; class NomComponent extends React.Component { constructor(props) { super(props); this.state = {}; } render() { return ( ); } } export default NomComponent;","title":"Extraits de code"},{"location":"notes_de_cours/react/snippet/#extraits-de-code-utile-pour-react","text":"Question d'acc\u00e9l\u00e9rer votre travail, voici un extrait de code que vous allez r\u00e9utiliser souvent : import React from 'react'; class NomComponent extends React.Component { constructor(props) { super(props); this.state = {}; } render() { return ( ); } } export default NomComponent;","title":"Extraits de code utile pour React"},{"location":"notes_de_cours/react/state/","text":"L'\u00e9tat local d'un composant (state) Chaque composant React \u00e0 un object state cr\u00e9\u00e9 par d\u00e9faut. Dans cet objet on va stocker les propri\u00e9t\u00e9s qui sont propre au composant. Quand l\u2019objet change, qu\u2019on change une de ces propri\u00e9t\u00e9s, le composant est r\u00e9afficher dans la page. On doit initialiser les propri\u00e9t\u00e9s de state dans le constructeur constructor(props) { super(props); this.state = {titre: this.props.titre, note: 4}; } On y fait r\u00e9f\u00e9rence avec this : this.state.titre Modification de l'\u00e9tat Pour modifier la valeur de state on doit utiliser la fonction setSate() this.setState({note: 5}); On n\u2019est pas oblig\u00e9 d\u2019inclure toutes les propri\u00e9t\u00e9s de state, seulement celle que l\u2019on veut changer. Par contre on ne doit pas modifier directement une valeur de l'\u00e9tat sinon le composant ne sera pas r\u00e9affich\u00e9. // \u00c0 ne pas faire this.state.note = 5; La fonction setState() peut aussi aussi accepter une fonction en param\u00e8tre au lieu d'un objet (notez ici qu'on n'est pas oblig\u00e9 d'utiliser this) : // Dans cet exemple on voudrait augmenter la note d'une valeur re\u00e7u en // param\u00e8tre par le composant this.setState((state, props) => ({ note: state.note + props.increment })); R\u00e9f\u00e9rences https://fr.reactjs.org/docs/state-and-lifecycle.html https://www.w3schools.com/react/react_state.asp","title":"L'\u00e9tat local (state)"},{"location":"notes_de_cours/react/state/#letat-local-dun-composant-state","text":"Chaque composant React \u00e0 un object state cr\u00e9\u00e9 par d\u00e9faut. Dans cet objet on va stocker les propri\u00e9t\u00e9s qui sont propre au composant. Quand l\u2019objet change, qu\u2019on change une de ces propri\u00e9t\u00e9s, le composant est r\u00e9afficher dans la page. On doit initialiser les propri\u00e9t\u00e9s de state dans le constructeur constructor(props) { super(props); this.state = {titre: this.props.titre, note: 4}; } On y fait r\u00e9f\u00e9rence avec this : this.state.titre","title":"L'\u00e9tat local d'un composant (state)"},{"location":"notes_de_cours/react/state/#modification-de-letat","text":"Pour modifier la valeur de state on doit utiliser la fonction setSate() this.setState({note: 5}); On n\u2019est pas oblig\u00e9 d\u2019inclure toutes les propri\u00e9t\u00e9s de state, seulement celle que l\u2019on veut changer. Par contre on ne doit pas modifier directement une valeur de l'\u00e9tat sinon le composant ne sera pas r\u00e9affich\u00e9. // \u00c0 ne pas faire this.state.note = 5; La fonction setState() peut aussi aussi accepter une fonction en param\u00e8tre au lieu d'un objet (notez ici qu'on n'est pas oblig\u00e9 d'utiliser this) : // Dans cet exemple on voudrait augmenter la note d'une valeur re\u00e7u en // param\u00e8tre par le composant this.setState((state, props) => ({ note: state.note + props.increment })); R\u00e9f\u00e9rences https://fr.reactjs.org/docs/state-and-lifecycle.html https://www.w3schools.com/react/react_state.asp","title":"Modification de l'\u00e9tat"},{"location":"notes_de_cours/slim/devilbox/","text":"Configurer un projet SLIM avec Devilbox Cr\u00e9ation du \"Virtual Host\" Cr\u00e9ez le r\u00e9pertoire qui va contenir votre projet dans le sous r\u00e9pertoire data/www de votre dossier Devilbox. Allez ensuite ajouter une entr\u00e9e dans le fichier hosts de Windows (C:\\Windows\\System32\\drivers\\etc\\hosts) avec le nom du dossier qui va conternir le projet suivi de .loc 127.0.0.1 nomDossierProjet.loc Cr\u00e9ation d'un Symlink Habituellement avec Devilbox on cr\u00e9e un sous-dossier htdocs qui contient notre fichier index.php. Avec Slim notre fichier index.php se retrouve dans le sous-r\u00e9pertoire public . Au lieu de cr\u00e9er un r\u00e9pertoire nomm\u00e9 htdocs on va cr\u00e9er \u00e0 la place un symlink du m\u00eame nom qui va pointer sur le r\u00e9pertoire public. En ligne de commande \u00e0 la racine de votre projet entrez la commande suivante ln -s public/ htdocs source","title":"Configurer un projet SLIM avec Devilbox"},{"location":"notes_de_cours/slim/devilbox/#configurer-un-projet-slim-avec-devilbox","text":"","title":"Configurer un projet SLIM avec Devilbox"},{"location":"notes_de_cours/slim/devilbox/#creation-du-virtual-host","text":"Cr\u00e9ez le r\u00e9pertoire qui va contenir votre projet dans le sous r\u00e9pertoire data/www de votre dossier Devilbox. Allez ensuite ajouter une entr\u00e9e dans le fichier hosts de Windows (C:\\Windows\\System32\\drivers\\etc\\hosts) avec le nom du dossier qui va conternir le projet suivi de .loc 127.0.0.1 nomDossierProjet.loc","title":"Cr\u00e9ation du \"Virtual Host\""},{"location":"notes_de_cours/slim/devilbox/#creation-dun-symlink","text":"Habituellement avec Devilbox on cr\u00e9e un sous-dossier htdocs qui contient notre fichier index.php. Avec Slim notre fichier index.php se retrouve dans le sous-r\u00e9pertoire public . Au lieu de cr\u00e9er un r\u00e9pertoire nomm\u00e9 htdocs on va cr\u00e9er \u00e0 la place un symlink du m\u00eame nom qui va pointer sur le r\u00e9pertoire public. En ligne de commande \u00e0 la racine de votre projet entrez la commande suivante ln -s public/ htdocs source","title":"Cr\u00e9ation d'un Symlink"},{"location":"notes_de_cours/slim/logger_factory/","text":"LoggerFactory.php <?php // Source : https://odan.github.io/2020/05/25/slim4-logging.html namespace App\\Factory; use Monolog\\Formatter\\LineFormatter; use Monolog\\Handler\\RotatingFileHandler; use Monolog\\Handler\\StreamHandler; use Monolog\\Logger; use Psr\\Log\\LoggerInterface; /** * Factory. */ final class LoggerFactory { /** * @var string */ private $path; /** * @var int */ private $level; /** * @var array<mixed> Handler */ private $handler = []; /** * @var LoggerInterface|null */ private $testLogger; /** * The constructor. * * @param array<mixed> $settings The settings */ public function __construct(array $settings) { $this->path = (string)$settings['path']; $this->level = (int)$settings['level']; // This can be used for testing to make the Factory testable if (isset($settings['test'])) { $this->testLogger = $settings['test']; } } /** * Build the logger. * * @param string|null $name The logging channel * * @return LoggerInterface The logger */ public function createLogger(string $name = null): LoggerInterface { if ($this->testLogger) { return $this->testLogger; } $logger = new Logger($name ?: uuid_create()); foreach ($this->handler as $handler) { $logger->pushHandler($handler); } $this->handler = []; return $logger; } /** * Add rotating file logger handler. * * @param string $filename The filename * @param int|null $level The level (optional) * * @return self The logger factory */ public function addFileHandler(string $filename, int $level = null): self { $filename = sprintf('%s/%s', $this->path, $filename); $nbFileMax = 7; // Nb de fichiers de log qui seront cr\u00e9\u00e9 avant d'\u00eatre supprim\u00e9, 0 = illimit\u00e9 $rotatingFileHandler = new RotatingFileHandler($filename, $nbFileMax, $level ?? $this->level, true, 0777); // The last \"true\" here tells monolog to remove empty []'s $rotatingFileHandler->setFormatter(new LineFormatter(null, null, false, true)); $this->handler[] = $rotatingFileHandler; return $this; } /** * Add a console logger. * * @param int|null $level The level (optional) * * @return self The logger factory */ public function addConsoleHandler(int $level = null): self { $streamHandler = new StreamHandler('php://stdout', $level ?? $this->level); $streamHandler->setFormatter(new LineFormatter(null, null, false, true)); $this->handler[] = $streamHandler; return $this; } }","title":"LoggerFactory.php"},{"location":"notes_de_cours/slim/logger_factory/#loggerfactoryphp","text":"<?php // Source : https://odan.github.io/2020/05/25/slim4-logging.html namespace App\\Factory; use Monolog\\Formatter\\LineFormatter; use Monolog\\Handler\\RotatingFileHandler; use Monolog\\Handler\\StreamHandler; use Monolog\\Logger; use Psr\\Log\\LoggerInterface; /** * Factory. */ final class LoggerFactory { /** * @var string */ private $path; /** * @var int */ private $level; /** * @var array<mixed> Handler */ private $handler = []; /** * @var LoggerInterface|null */ private $testLogger; /** * The constructor. * * @param array<mixed> $settings The settings */ public function __construct(array $settings) { $this->path = (string)$settings['path']; $this->level = (int)$settings['level']; // This can be used for testing to make the Factory testable if (isset($settings['test'])) { $this->testLogger = $settings['test']; } } /** * Build the logger. * * @param string|null $name The logging channel * * @return LoggerInterface The logger */ public function createLogger(string $name = null): LoggerInterface { if ($this->testLogger) { return $this->testLogger; } $logger = new Logger($name ?: uuid_create()); foreach ($this->handler as $handler) { $logger->pushHandler($handler); } $this->handler = []; return $logger; } /** * Add rotating file logger handler. * * @param string $filename The filename * @param int|null $level The level (optional) * * @return self The logger factory */ public function addFileHandler(string $filename, int $level = null): self { $filename = sprintf('%s/%s', $this->path, $filename); $nbFileMax = 7; // Nb de fichiers de log qui seront cr\u00e9\u00e9 avant d'\u00eatre supprim\u00e9, 0 = illimit\u00e9 $rotatingFileHandler = new RotatingFileHandler($filename, $nbFileMax, $level ?? $this->level, true, 0777); // The last \"true\" here tells monolog to remove empty []'s $rotatingFileHandler->setFormatter(new LineFormatter(null, null, false, true)); $this->handler[] = $rotatingFileHandler; return $this; } /** * Add a console logger. * * @param int|null $level The level (optional) * * @return self The logger factory */ public function addConsoleHandler(int $level = null): self { $streamHandler = new StreamHandler('php://stdout', $level ?? $this->level); $streamHandler->setFormatter(new LineFormatter(null, null, false, true)); $this->handler[] = $streamHandler; return $this; } }","title":"LoggerFactory.php"},{"location":"notes_de_cours/slim/middleware/","text":"Les Middlewares En terme g\u00e9n\u00e9ral, un middleware est un logiciel qui est ex\u00e9cut\u00e9 durant la communication entre deux applications. Au niveau des services web, les middlewares seront utilis\u00e9s principalement pour manipuler la requ\u00eate en entr\u00e9e et la r\u00e9ponse en sortie. Un exemple d'utilisation serait un syst\u00e8me d'authentification qui ne laisserait \"passer\" la requ\u00eate HTTP \u00e0 notre api seulement si elle est authentifi\u00e9 ad\u00e9quatement. Comment utiliser des middlewares avec SLIM? Les middlewares forment des couches concentriques autour de l\u2019application. En commen\u00e7ant par le plus r\u00e9cent, la requ\u00eate les traverses un a un jusqu\u2019\u00e0 l\u2019application pour ensuite refaire le chemin inverse avec la r\u00e9ponse. Chaque middleware impl\u00e9mente l\u2019interface middleware de PSR-15 Psr\\Http\\Message\\ServerRequestInterface \u2013 L\u2019objet requ\u00eate PSR-7 Psr\\Http\\Server\\RequestHandlerInterface \u2013 L\u2019objet request handler PSR-15 On peut faire ce qu\u2019on veut de ces objets, mais on doit absolument retourner une instance de Psr\\Http\\Message\\ResponseInterface . Il est aussi \u00e0 noter qu'on ne peut pas modifier la r\u00e9ponse qu'on aura intercept\u00e9e. Si on veut la modifier on doit en recr\u00e9er une autre. Exemple d'un middleware Dans votre projet, cr\u00e9ez le r\u00e9pertoire src/Middleware si ce n'est pas d\u00e9j\u00e0 fait. Cr\u00e9ez ensuite dans ce r\u00e9pertoire le fichier ExampleBeforeMiddleware.php et copiez-y le code suivant : <?php // Source : https://www.slimframework.com/docs/v4/concepts/middleware.html namespace App\\Middleware; use Psr\\Http\\Message\\ServerRequestInterface as Request; use Psr\\Http\\Server\\RequestHandlerInterface as RequestHandler; use Slim\\Psr7\\Response; class ExampleBeforeMiddleware { /** * Example middleware invokable class * * @param ServerRequest $request PSR-7 request * @param RequestHandler $handler PSR-15 request handler * * @return Response */ public function __invoke(Request $request, RequestHandler $handler): Response { $response = $handler->handle($request); $existingContent = (string) $response->getBody(); $response = new Response(); $response->getBody()->write('Voici la r\u00e9ponse -> ' . $existingContent); return $response; } } Comment emp\u00eacher le traitement de la requ\u00eate? Dans la fonction __invoke() , la ligne de code suivante sert \u00e0 ex\u00e9cuter la requ\u00eate : $response = $handler->handle($request); Donc pour tant que cette ligne n'est pas ex\u00e9cut\u00e9, la requ\u00eate ne l'est pas non plus. Il faut se rappeler par contre qu'on doit retourner une instance de Psr\\Http\\Message\\ResponseInterface . Voici un exemple d'une fonction de validation d'un authentification et qui retournerait un code 401 si les informations de connexion ne sont pas valides. public function __invoke( Request $request, RequestHandler $handler): ResponseInterface { // Extraction du token encod\u00e9 de l'ent\u00eate $token = explode(' ', $request->getHeaderLine('Authorization'))[1] ?? ''; if (!$this->basicAuthValidation->isTokenValid($token)) { // Si le token n'est pas valide, on retourne une r\u00e9ponse vide avec le code // de statut 401 return $this->responseFactory->createResponse() ->withStatus(401, 'Unauthorized'); } // Sinon on retourne la r\u00e9ponse originale return $handler->handle($request); } O\u00f9 ajouter le middleware dans notre structure de projet? On peut ajouter le middleware au niveau de l'application, sur une route ou sur un groupe de routes. Application Dans le fichier config\\middleware.php , il suffit d'ajouter la classe \u00e0 l'objet $app \u00e0 l'aide de la fonction add() : <?php // ... use App\\Middleware\\ExampleBeforeMiddleware; return function (App $app) { // ... $app->add(ExampleBeforeMiddleware::class); // ... }; Le middleware sera ex\u00e9cut\u00e9 pour chaque requ\u00eate http envoy\u00e9e vers notre api. Dans notre exemple, chaque r\u00e9ponse d\u00e9butera par le mot BEFORE : Voici la r\u00e9ponse -> {\"success\":true,\"message\":\"Hello world!\"} Sur une route ou un groupe de routes Dans le fichier config\\route.php , il suffit d'ajouter la classe \u00e0 l'objet $app sur la route ou le groupe de routes souhait\u00e9s \u00e0 l'aide de la fonction add() : <?php // ... use App\\Middleware\\ExampleBeforeMiddleware; return function (App $app) { $app->get('/', \\App\\Action\\HomeAction::class)->setName('home') ->add(ExampleBeforeMiddleware::class); // ... }; Dans cet exemple, le middleware ne sera appliqu\u00e9 que sur la route GET / . Source https://www.slimframework.com/docs/v4/concepts/middleware.html","title":"Middleware"},{"location":"notes_de_cours/slim/middleware/#les-middlewares","text":"En terme g\u00e9n\u00e9ral, un middleware est un logiciel qui est ex\u00e9cut\u00e9 durant la communication entre deux applications. Au niveau des services web, les middlewares seront utilis\u00e9s principalement pour manipuler la requ\u00eate en entr\u00e9e et la r\u00e9ponse en sortie. Un exemple d'utilisation serait un syst\u00e8me d'authentification qui ne laisserait \"passer\" la requ\u00eate HTTP \u00e0 notre api seulement si elle est authentifi\u00e9 ad\u00e9quatement.","title":"Les Middlewares"},{"location":"notes_de_cours/slim/middleware/#comment-utiliser-des-middlewares-avec-slim","text":"Les middlewares forment des couches concentriques autour de l\u2019application. En commen\u00e7ant par le plus r\u00e9cent, la requ\u00eate les traverses un a un jusqu\u2019\u00e0 l\u2019application pour ensuite refaire le chemin inverse avec la r\u00e9ponse. Chaque middleware impl\u00e9mente l\u2019interface middleware de PSR-15 Psr\\Http\\Message\\ServerRequestInterface \u2013 L\u2019objet requ\u00eate PSR-7 Psr\\Http\\Server\\RequestHandlerInterface \u2013 L\u2019objet request handler PSR-15 On peut faire ce qu\u2019on veut de ces objets, mais on doit absolument retourner une instance de Psr\\Http\\Message\\ResponseInterface . Il est aussi \u00e0 noter qu'on ne peut pas modifier la r\u00e9ponse qu'on aura intercept\u00e9e. Si on veut la modifier on doit en recr\u00e9er une autre.","title":"Comment utiliser des middlewares avec SLIM?"},{"location":"notes_de_cours/slim/middleware/#exemple-dun-middleware","text":"Dans votre projet, cr\u00e9ez le r\u00e9pertoire src/Middleware si ce n'est pas d\u00e9j\u00e0 fait. Cr\u00e9ez ensuite dans ce r\u00e9pertoire le fichier ExampleBeforeMiddleware.php et copiez-y le code suivant : <?php // Source : https://www.slimframework.com/docs/v4/concepts/middleware.html namespace App\\Middleware; use Psr\\Http\\Message\\ServerRequestInterface as Request; use Psr\\Http\\Server\\RequestHandlerInterface as RequestHandler; use Slim\\Psr7\\Response; class ExampleBeforeMiddleware { /** * Example middleware invokable class * * @param ServerRequest $request PSR-7 request * @param RequestHandler $handler PSR-15 request handler * * @return Response */ public function __invoke(Request $request, RequestHandler $handler): Response { $response = $handler->handle($request); $existingContent = (string) $response->getBody(); $response = new Response(); $response->getBody()->write('Voici la r\u00e9ponse -> ' . $existingContent); return $response; } }","title":"Exemple d'un middleware"},{"location":"notes_de_cours/slim/middleware/#comment-empecher-le-traitement-de-la-requete","text":"Dans la fonction __invoke() , la ligne de code suivante sert \u00e0 ex\u00e9cuter la requ\u00eate : $response = $handler->handle($request); Donc pour tant que cette ligne n'est pas ex\u00e9cut\u00e9, la requ\u00eate ne l'est pas non plus. Il faut se rappeler par contre qu'on doit retourner une instance de Psr\\Http\\Message\\ResponseInterface . Voici un exemple d'une fonction de validation d'un authentification et qui retournerait un code 401 si les informations de connexion ne sont pas valides. public function __invoke( Request $request, RequestHandler $handler): ResponseInterface { // Extraction du token encod\u00e9 de l'ent\u00eate $token = explode(' ', $request->getHeaderLine('Authorization'))[1] ?? ''; if (!$this->basicAuthValidation->isTokenValid($token)) { // Si le token n'est pas valide, on retourne une r\u00e9ponse vide avec le code // de statut 401 return $this->responseFactory->createResponse() ->withStatus(401, 'Unauthorized'); } // Sinon on retourne la r\u00e9ponse originale return $handler->handle($request); }","title":"Comment emp\u00eacher le traitement de la requ\u00eate?"},{"location":"notes_de_cours/slim/middleware/#ou-ajouter-le-middleware-dans-notre-structure-de-projet","text":"On peut ajouter le middleware au niveau de l'application, sur une route ou sur un groupe de routes. Application Dans le fichier config\\middleware.php , il suffit d'ajouter la classe \u00e0 l'objet $app \u00e0 l'aide de la fonction add() : <?php // ... use App\\Middleware\\ExampleBeforeMiddleware; return function (App $app) { // ... $app->add(ExampleBeforeMiddleware::class); // ... }; Le middleware sera ex\u00e9cut\u00e9 pour chaque requ\u00eate http envoy\u00e9e vers notre api. Dans notre exemple, chaque r\u00e9ponse d\u00e9butera par le mot BEFORE : Voici la r\u00e9ponse -> {\"success\":true,\"message\":\"Hello world!\"} Sur une route ou un groupe de routes Dans le fichier config\\route.php , il suffit d'ajouter la classe \u00e0 l'objet $app sur la route ou le groupe de routes souhait\u00e9s \u00e0 l'aide de la fonction add() : <?php // ... use App\\Middleware\\ExampleBeforeMiddleware; return function (App $app) { $app->get('/', \\App\\Action\\HomeAction::class)->setName('home') ->add(ExampleBeforeMiddleware::class); // ... }; Dans cet exemple, le middleware ne sera appliqu\u00e9 que sur la route GET / .","title":"O\u00f9 ajouter le middleware dans notre structure de projet?"},{"location":"notes_de_cours/slim/middleware/#source","text":"https://www.slimframework.com/docs/v4/concepts/middleware.html","title":"Source"},{"location":"notes_de_cours/slim/monolog/","text":"Utilisation de journaux d'\u00e9v\u00e8nements (Log files) Pourquoi utiliser des fichiers log? C'est une bonne fa\u00e7on de d\u00e9bugger les erreurs \u00c7a nous permet de \"voir\" ce qui se passe dans notre application, de suivre comment les usagers l'utilisent Pour garder une trace des op\u00e9rations effectu\u00e9s par le serveur Il y a plusieurs choix possible pour cr\u00e9er des fichiers log et les utiliser. Nous allons utiliser la librairie Monolog pour php. Installation Vous pouvez retrouver la documentation de Monolog \u00e0 cette adresse : https://seldaek.github.io/monolog/ . L'installation se fait via composer avec l'instruction suivante : composer require monolog/monolog Int\u00e9gration \u00e0 notre projet SLIM Dans notre projet de d\u00e9part nous avons d\u00e9j\u00e0 une classe nomm\u00e9 LoggerFactory qui s'occupe de la cr\u00e9ation des fichiers et de l'\u00e9criture dans ceux-ci. Elle est situ\u00e9 dans le r\u00e9pertoire src/Factory Pour son utilisation nous avons aussi besoin d'un g\u00e9n\u00e9rateur de UUID qu'on peut installer aussi via composer : composer require symfony/polyfill-uuid Normalement monolog et le g\u00e9n\u00e9rateur de uuid devrait d\u00e9j\u00e0 avoir \u00e9t\u00e9 install\u00e9 dans votre projet quand vous avec fait la commande composer update apr\u00e8s avoir clon\u00e9 le projet. Pour v\u00e9rifier le tout allez dans le fichier composer.json, vous devriez avoir les lignes suivantes : { \"require\": { \"monolog/monolog\": \"^2.2\", \"symfony/polyfill-uuid\": \"^1.22\", ... }, ... } Une fois les deux d\u00e9pendances install\u00e9es : Cr\u00e9ez un r\u00e9pertoire nomm\u00e9 logs \u00e0 la racine de votre application Ajouter le nom de se r\u00e9pertoire dans le fichier .gitignore pour exclure de vos commit Git les fichiers de log que vous allez cr\u00e9er. vendor/ logs/ Assurez-vous d'avoir les lignes suivantes dans le fichier config/settings.php // Logger settings $settings['logger'] = [ 'name' => 'app', // C'est ici qu'on indique dans quel r\u00e9pertoire sera les fichiers // \u00e0 modifier si vous avez utiliser un autre nom 'path' => __DIR__ . '/../logs', 'filename' => 'app.log', 'level' => \\Monolog\\Logger::DEBUG, 'file_permission' => 0775, ]; C'est tout ce qu'on aurait \u00e0 faire pour utiliser Monolog, mais on va rendre notre code plus robuste en cr\u00e9ant une classe qui va se charger de l'\u00e9criture dans diff\u00e9rents fichiers. Cr\u00e9ez le fichier src/Factory/LoggerFactory.php et copier le code disponible ici . Votre projet comporte probablement d\u00e9j\u00e0 ce fichier, juste vous assurez qu'il est bien l\u00e0 et que le code y est. Dans le fichier config/container.php , ajoutez les lignes suivantes si elles n'y sont pas d\u00e9j\u00e0 <?php use App\\Factory\\LoggerFactory; // ... return [ // ... LoggerFactory::class => function (ContainerInterface $container) { return new LoggerFactory($container->get('settings')['logger']); }, // ... ]; Si vous voulez \"logger\" les erreurs g\u00e9n\u00e9r\u00e9s par SLIM automatiquement, modifiez le fichier config/middleware.php de la fa\u00e7on suivante : // Remplacer cette ligne $app->add(ErrorMiddleware::class); // Par ces lignes $loggerFactory = $app->getContainer()->get(\\App\\Factory\\LoggerFactory::class); // Le nom du fichier o\u00f9 les erreurs seront inscrites $logger = $loggerFactory->addFileHandler('error.log')->createLogger(); $app->addErrorMiddleware(true, true, true, $logger); Utilisation dans notre projet SLIM Pour \u00e9crire dans un fichier de log depuis une classe de notre projet, on doit r\u00e9cup\u00e9rer un objet LoggerFactory pass\u00e9 en param\u00e8tre dans le constructeur de la classe. On peut ensuite utiliser cette objet pour \u00e9crire le message souhait\u00e9. Exemple avec la classe HomeAction <?php namespace App\\Action; use App\\Factory\\LoggerFactory; // \u00c0 ajouter // ... final class HomeAction { /** * @var LoggerInterface */ private $logger; public function __construct(LoggerFactory $loggerFactory) { $this->logger = $loggerFactory // Le nom de fichier de log utilis\u00e9 ->addFileHandler('hello.log') // On peut passer du texte en parametre ici qui identifiera // la ligne de log, sinon un UUID sera utilis\u00e9 ->createLogger('MessageFromMath'); } public function __invoke( ServerRequestInterface $request, ResponseInterface $response ): ResponseInterface { // ... // C'est ici qu'on inscrit notre message $this->logger->info('Hello world'); // ... } } Le r\u00e9sultat sera inscrit dans le fichier hello-[date-du-jour].log [2022-02-11T05:52:53.347534+01:00] 73c96cc8-4c6c-42d7-8a39-593ab0f964c6.INFO: Hello World [2022-02-11T05:52:56.912031+01:00] MessageFromMath.INFO: Hello World Niveaux de s\u00e9v\u00e9rit\u00e9 des messages Quand on inscrit un message d'\u00e9v\u00e9nement, on lui attache un niveau de s\u00e9v\u00e9rit\u00e9. \u00c7a nous permet de cat\u00e9goriser les messages et m\u00eame dans omettre selon la configuration. Les diff\u00e9rents niveaux support\u00e9s par Monolog sont les suivants, trier par ordre d'importance : DEBUG - Message de d\u00e9bogage INFO - Message d'information NOTICE - Il est arriv\u00e9 un \u00e9v\u00e9nement important WARNING - Message d'avertissement mais pas d'erreur ERROR - Message d'erreur mais qui ne requiert pas d'action imm\u00e9diate CRITICAL - Message de condition critique ALERT - Erreur qui n\u00e9cessite une action imm\u00e9diate EMERGENCY - Alerte rouge Pour chacun des niveaux, il y a une fonction du m\u00eame nom \u00e0 utiliser // Message d'information $this->logger->info(\"Ceci est un message d'information\"); // Message d'erreur $this->logger->error(\"Ceci est un message d'erreur\"); Pour modifier le niveau minimum de s\u00e9v\u00e9rit\u00e9, c'est-\u00e0-dire \u00e0 partir de quel niveau le message sera inscrit dans le fichier, on doit changer la valeur de la cl\u00e9 level du tableau settings dans le fichier config/settings.php // Logger settings $settings['logger'] = [ 'name' => 'app', 'path' => __DIR__ . '/../logs', 'filename' => 'app.log', 'level' => \\Monolog\\Logger::DEBUG, // Changer la valeur de level ici 'file_permission' => 0775, ]; Si on change cette valeur pour 'level' => \\Monolog\\Logger::ERROR , dans l'exemple plus haut seulement le message d'erreur sera inscrit, pas le message \"info\". L'utilit\u00e9 principale est qu'on peut contr\u00f4ler les messages \u00e0 retenir quand notre projet est d\u00e9ployer sur le Internet. Source https://odan.github.io/2020/05/25/slim4-logging.html","title":"Utilisation de journaux d'\u00e9v\u00e8nements (Log files)"},{"location":"notes_de_cours/slim/monolog/#utilisation-de-journaux-devenements-log-files","text":"","title":"Utilisation de journaux d'\u00e9v\u00e8nements (Log files)"},{"location":"notes_de_cours/slim/monolog/#pourquoi-utiliser-des-fichiers-log","text":"C'est une bonne fa\u00e7on de d\u00e9bugger les erreurs \u00c7a nous permet de \"voir\" ce qui se passe dans notre application, de suivre comment les usagers l'utilisent Pour garder une trace des op\u00e9rations effectu\u00e9s par le serveur Il y a plusieurs choix possible pour cr\u00e9er des fichiers log et les utiliser. Nous allons utiliser la librairie Monolog pour php.","title":"Pourquoi utiliser des fichiers log?"},{"location":"notes_de_cours/slim/monolog/#installation","text":"Vous pouvez retrouver la documentation de Monolog \u00e0 cette adresse : https://seldaek.github.io/monolog/ . L'installation se fait via composer avec l'instruction suivante : composer require monolog/monolog","title":"Installation"},{"location":"notes_de_cours/slim/monolog/#integration-a-notre-projet-slim","text":"Dans notre projet de d\u00e9part nous avons d\u00e9j\u00e0 une classe nomm\u00e9 LoggerFactory qui s'occupe de la cr\u00e9ation des fichiers et de l'\u00e9criture dans ceux-ci. Elle est situ\u00e9 dans le r\u00e9pertoire src/Factory Pour son utilisation nous avons aussi besoin d'un g\u00e9n\u00e9rateur de UUID qu'on peut installer aussi via composer : composer require symfony/polyfill-uuid Normalement monolog et le g\u00e9n\u00e9rateur de uuid devrait d\u00e9j\u00e0 avoir \u00e9t\u00e9 install\u00e9 dans votre projet quand vous avec fait la commande composer update apr\u00e8s avoir clon\u00e9 le projet. Pour v\u00e9rifier le tout allez dans le fichier composer.json, vous devriez avoir les lignes suivantes : { \"require\": { \"monolog/monolog\": \"^2.2\", \"symfony/polyfill-uuid\": \"^1.22\", ... }, ... } Une fois les deux d\u00e9pendances install\u00e9es : Cr\u00e9ez un r\u00e9pertoire nomm\u00e9 logs \u00e0 la racine de votre application Ajouter le nom de se r\u00e9pertoire dans le fichier .gitignore pour exclure de vos commit Git les fichiers de log que vous allez cr\u00e9er. vendor/ logs/ Assurez-vous d'avoir les lignes suivantes dans le fichier config/settings.php // Logger settings $settings['logger'] = [ 'name' => 'app', // C'est ici qu'on indique dans quel r\u00e9pertoire sera les fichiers // \u00e0 modifier si vous avez utiliser un autre nom 'path' => __DIR__ . '/../logs', 'filename' => 'app.log', 'level' => \\Monolog\\Logger::DEBUG, 'file_permission' => 0775, ]; C'est tout ce qu'on aurait \u00e0 faire pour utiliser Monolog, mais on va rendre notre code plus robuste en cr\u00e9ant une classe qui va se charger de l'\u00e9criture dans diff\u00e9rents fichiers. Cr\u00e9ez le fichier src/Factory/LoggerFactory.php et copier le code disponible ici . Votre projet comporte probablement d\u00e9j\u00e0 ce fichier, juste vous assurez qu'il est bien l\u00e0 et que le code y est. Dans le fichier config/container.php , ajoutez les lignes suivantes si elles n'y sont pas d\u00e9j\u00e0 <?php use App\\Factory\\LoggerFactory; // ... return [ // ... LoggerFactory::class => function (ContainerInterface $container) { return new LoggerFactory($container->get('settings')['logger']); }, // ... ]; Si vous voulez \"logger\" les erreurs g\u00e9n\u00e9r\u00e9s par SLIM automatiquement, modifiez le fichier config/middleware.php de la fa\u00e7on suivante : // Remplacer cette ligne $app->add(ErrorMiddleware::class); // Par ces lignes $loggerFactory = $app->getContainer()->get(\\App\\Factory\\LoggerFactory::class); // Le nom du fichier o\u00f9 les erreurs seront inscrites $logger = $loggerFactory->addFileHandler('error.log')->createLogger(); $app->addErrorMiddleware(true, true, true, $logger);","title":"Int\u00e9gration \u00e0 notre projet SLIM"},{"location":"notes_de_cours/slim/monolog/#utilisation-dans-notre-projet-slim","text":"Pour \u00e9crire dans un fichier de log depuis une classe de notre projet, on doit r\u00e9cup\u00e9rer un objet LoggerFactory pass\u00e9 en param\u00e8tre dans le constructeur de la classe. On peut ensuite utiliser cette objet pour \u00e9crire le message souhait\u00e9. Exemple avec la classe HomeAction <?php namespace App\\Action; use App\\Factory\\LoggerFactory; // \u00c0 ajouter // ... final class HomeAction { /** * @var LoggerInterface */ private $logger; public function __construct(LoggerFactory $loggerFactory) { $this->logger = $loggerFactory // Le nom de fichier de log utilis\u00e9 ->addFileHandler('hello.log') // On peut passer du texte en parametre ici qui identifiera // la ligne de log, sinon un UUID sera utilis\u00e9 ->createLogger('MessageFromMath'); } public function __invoke( ServerRequestInterface $request, ResponseInterface $response ): ResponseInterface { // ... // C'est ici qu'on inscrit notre message $this->logger->info('Hello world'); // ... } } Le r\u00e9sultat sera inscrit dans le fichier hello-[date-du-jour].log [2022-02-11T05:52:53.347534+01:00] 73c96cc8-4c6c-42d7-8a39-593ab0f964c6.INFO: Hello World [2022-02-11T05:52:56.912031+01:00] MessageFromMath.INFO: Hello World","title":"Utilisation dans notre projet SLIM"},{"location":"notes_de_cours/slim/monolog/#niveaux-de-severite-des-messages","text":"Quand on inscrit un message d'\u00e9v\u00e9nement, on lui attache un niveau de s\u00e9v\u00e9rit\u00e9. \u00c7a nous permet de cat\u00e9goriser les messages et m\u00eame dans omettre selon la configuration. Les diff\u00e9rents niveaux support\u00e9s par Monolog sont les suivants, trier par ordre d'importance : DEBUG - Message de d\u00e9bogage INFO - Message d'information NOTICE - Il est arriv\u00e9 un \u00e9v\u00e9nement important WARNING - Message d'avertissement mais pas d'erreur ERROR - Message d'erreur mais qui ne requiert pas d'action imm\u00e9diate CRITICAL - Message de condition critique ALERT - Erreur qui n\u00e9cessite une action imm\u00e9diate EMERGENCY - Alerte rouge Pour chacun des niveaux, il y a une fonction du m\u00eame nom \u00e0 utiliser // Message d'information $this->logger->info(\"Ceci est un message d'information\"); // Message d'erreur $this->logger->error(\"Ceci est un message d'erreur\"); Pour modifier le niveau minimum de s\u00e9v\u00e9rit\u00e9, c'est-\u00e0-dire \u00e0 partir de quel niveau le message sera inscrit dans le fichier, on doit changer la valeur de la cl\u00e9 level du tableau settings dans le fichier config/settings.php // Logger settings $settings['logger'] = [ 'name' => 'app', 'path' => __DIR__ . '/../logs', 'filename' => 'app.log', 'level' => \\Monolog\\Logger::DEBUG, // Changer la valeur de level ici 'file_permission' => 0775, ]; Si on change cette valeur pour 'level' => \\Monolog\\Logger::ERROR , dans l'exemple plus haut seulement le message d'erreur sera inscrit, pas le message \"info\". L'utilit\u00e9 principale est qu'on peut contr\u00f4ler les messages \u00e0 retenir quand notre projet est d\u00e9ployer sur le Internet.","title":"Niveaux de s\u00e9v\u00e9rit\u00e9 des messages"},{"location":"notes_de_cours/slim/monolog/#source","text":"https://odan.github.io/2020/05/25/slim4-logging.html","title":"Source"},{"location":"notes_de_cours/slim/recuperer_params/","text":"R\u00e9cup\u00e9rer les param\u00e8tres d'une requ\u00eate HTTP On a vu qu'il y a plusieurs m\u00e9thodes pour passer des param\u00e8tres dans une requ\u00eate HTML : dans la section \"query\" de l'url, directement dans l'url et dans le corps (body) de la requ\u00eate. SLIM nous permet de facilement r\u00e9cup\u00e9rer ces donn\u00e9es avec l'objet ServerRequestInterface Cette objet est re\u00e7u en param\u00eatre de la fonction _invoke des classes \"action\" de notre api. public function __invoke( ServerRequestInterface $request, ResponseInterface $response ): ResponseInterface { // Avec la variable $request nous avons acc\u00e8s aux param\u00e8tres // ... } Param\u00e8tre de la section \"query\" La fonction getQueryParams() de l'objet ServerRequestInterface nous retourne un tableau associatif qui contient tous les param\u00e8tres. L'exemple suivant avec la route /livres?page=1 nous montres comment r\u00e9cup\u00e9rer la valeur du param\u00e8tre page public function __invoke( ServerRequestInterface $request, ResponseInterface $response ): ResponseInterface { // R\u00e9cup\u00e9ration des param\u00e8tres dans un tableau // S'il n'y a pas de param\u00e8tre, retourne un tableau vide $queryParams = $request->getQueryParams() ?? []; // R\u00e9cup\u00e9ration de la valeur du param\u00e8tre page $page = $queryParams['page'] ?? 1; //... } Param\u00e8tre dans la route La fonction getAttribute('nomDuParam\u00e8tre', valeurPardefaut) de l'objet ServerRequestInterface nous retourne la valeur du param\u00e8tre demand\u00e9. Quand on d\u00e9fini notre route, les valeurs qui seront d\u00e9fini comme param\u00e8tre sont entour\u00e9es d'accolades. Prenons comme exemple la route /livres/13 qui affichera le livre avec le id 13. Dans notre code la route sera d\u00e9finie comme ceci dans le fichier route.php // Le nom de la classe importe peu, ici c'est la description de la route qui est importante $app->get('/livres/{id}', \\App\\Action\\Book\\BookViewByIdAction::class); Exemple d'utilisation de getAttribute() public function __invoke( ServerRequestInterface $request, ResponseInterface $response ): ResponseInterface { // R\u00e9cup\u00e9ration du param\u00e8tre de route 'id' $id = $request->getAttribute('id', 0); // ... } Param\u00e8tre dans le corps de la requ\u00eate La fonction getParsedBody() de l'objet ServerRequestInterface nous retourne un tableau associatif qui contient tous les param\u00e8tres du corps de la requ\u00eate. Prenons comme exemple une requ\u00eate HTTP de cr\u00e9ation d'un livre qui aurait les valeurs suivantes : { \"genreId\": \"1\", \"titre\": \"Mon livre\", \"isbn\": \"123456789\" } Pour r\u00e9cup\u00e9rer le titre avec getParsedBody() public function __invoke( ServerRequestInterface $request, ResponseInterface $response ): ResponseInterface { // R\u00e9cup\u00e9ration des donn\u00e9es du corps de la requ\u00eate $data = (array)$request->getParsedBody(); // R\u00e9cup\u00e9ration de la valeur de titre $titre = $data['titre'] ?? ''; // ... }","title":"R\u00e9cup\u00e9rer les param\u00e8tres d'une requ\u00eate HTTP"},{"location":"notes_de_cours/slim/recuperer_params/#recuperer-les-parametres-dune-requete-http","text":"On a vu qu'il y a plusieurs m\u00e9thodes pour passer des param\u00e8tres dans une requ\u00eate HTML : dans la section \"query\" de l'url, directement dans l'url et dans le corps (body) de la requ\u00eate. SLIM nous permet de facilement r\u00e9cup\u00e9rer ces donn\u00e9es avec l'objet ServerRequestInterface Cette objet est re\u00e7u en param\u00eatre de la fonction _invoke des classes \"action\" de notre api. public function __invoke( ServerRequestInterface $request, ResponseInterface $response ): ResponseInterface { // Avec la variable $request nous avons acc\u00e8s aux param\u00e8tres // ... }","title":"R\u00e9cup\u00e9rer les param\u00e8tres d'une requ\u00eate HTTP"},{"location":"notes_de_cours/slim/recuperer_params/#parametre-de-la-section-query","text":"La fonction getQueryParams() de l'objet ServerRequestInterface nous retourne un tableau associatif qui contient tous les param\u00e8tres. L'exemple suivant avec la route /livres?page=1 nous montres comment r\u00e9cup\u00e9rer la valeur du param\u00e8tre page public function __invoke( ServerRequestInterface $request, ResponseInterface $response ): ResponseInterface { // R\u00e9cup\u00e9ration des param\u00e8tres dans un tableau // S'il n'y a pas de param\u00e8tre, retourne un tableau vide $queryParams = $request->getQueryParams() ?? []; // R\u00e9cup\u00e9ration de la valeur du param\u00e8tre page $page = $queryParams['page'] ?? 1; //... }","title":"Param\u00e8tre de la section \"query\""},{"location":"notes_de_cours/slim/recuperer_params/#parametre-dans-la-route","text":"La fonction getAttribute('nomDuParam\u00e8tre', valeurPardefaut) de l'objet ServerRequestInterface nous retourne la valeur du param\u00e8tre demand\u00e9. Quand on d\u00e9fini notre route, les valeurs qui seront d\u00e9fini comme param\u00e8tre sont entour\u00e9es d'accolades. Prenons comme exemple la route /livres/13 qui affichera le livre avec le id 13. Dans notre code la route sera d\u00e9finie comme ceci dans le fichier route.php // Le nom de la classe importe peu, ici c'est la description de la route qui est importante $app->get('/livres/{id}', \\App\\Action\\Book\\BookViewByIdAction::class); Exemple d'utilisation de getAttribute() public function __invoke( ServerRequestInterface $request, ResponseInterface $response ): ResponseInterface { // R\u00e9cup\u00e9ration du param\u00e8tre de route 'id' $id = $request->getAttribute('id', 0); // ... }","title":"Param\u00e8tre dans la route"},{"location":"notes_de_cours/slim/recuperer_params/#parametre-dans-le-corps-de-la-requete","text":"La fonction getParsedBody() de l'objet ServerRequestInterface nous retourne un tableau associatif qui contient tous les param\u00e8tres du corps de la requ\u00eate. Prenons comme exemple une requ\u00eate HTTP de cr\u00e9ation d'un livre qui aurait les valeurs suivantes : { \"genreId\": \"1\", \"titre\": \"Mon livre\", \"isbn\": \"123456789\" } Pour r\u00e9cup\u00e9rer le titre avec getParsedBody() public function __invoke( ServerRequestInterface $request, ResponseInterface $response ): ResponseInterface { // R\u00e9cup\u00e9ration des donn\u00e9es du corps de la requ\u00eate $data = (array)$request->getParsedBody(); // R\u00e9cup\u00e9ration de la valeur de titre $titre = $data['titre'] ?? ''; // ... }","title":"Param\u00e8tre dans le corps de la requ\u00eate"},{"location":"notes_de_cours/slim/structure/","text":"Structure de nos projet avec SLIM Pour tous nos projet avec SLIM nous allons adopt\u00e9 la structure suivante. Structure des r\u00e9pertoires R\u00e9pertoire Description config/ Les fichiers de configurations public/ Les fichiers du serveur web src/ Le code de notre application vendor/ R\u00e9serv\u00e9 \u00e0 composer config/ Fichier Description bootstrap.php Initialise l'application container.php Initialisation du conteneur de l'application middleware.php Lancement des Middlewares routes.php On y d\u00e9clare les routes settings.php Information de configuration (\u00e0 la BD, fichiers de logs) public/ Dans ce r\u00e9pertoire on retrouve le fichier index.php qui est la porte d'entr\u00e9e de notre application. Il va juste lancer le fichier bootstrap.php qui lui s'occupera de tout le reste. src/ C'est dans se r\u00e9pertoire qu'on va placer le code de notre application. Pour chaque route on va diviser le code en trois sections : Action : Re\u00e7oit la requ\u00eate, lance la bonne proc\u00e9dure et retourne la r\u00e9ponse \u00e0 l'usager. Service : La logique de notre code se fait ici. On valide les param\u00eatres, on lance une fonction \u00e0 la bd, on formate la r\u00e9ponse qu'on retourne \u00e0 l'action. Repository : C'est la couche de donn\u00e9es, on lance simplement les requ\u00eates \u00e0 la BD et retourne le r\u00e9sultat. On ne fait pas de logique ici. On va cr\u00e9er un fichier par \"Action\", dans le r\u00e9pertoire src/Action . Ensuite dans le r\u00e9psertoire src/Domain on va cr\u00e9er un sous-r\u00e9pertoire qui va regrouper nos services et \"repositories\" (donnez-lui un nom significatif). Ensuite dans ce r\u00e9pertoire on va avoir deux sous-r\u00e9pertoire, Service et Repository qui vont contenir les fichiers de ces deux types. Dans l'exemple suivant j'ai une route qui affiche un message de salutation (greeting)","title":"Structure de nos projet avec SLIM"},{"location":"notes_de_cours/slim/structure/#structure-de-nos-projet-avec-slim","text":"Pour tous nos projet avec SLIM nous allons adopt\u00e9 la structure suivante.","title":"Structure de nos projet avec SLIM"},{"location":"notes_de_cours/slim/structure/#structure-des-repertoires","text":"R\u00e9pertoire Description config/ Les fichiers de configurations public/ Les fichiers du serveur web src/ Le code de notre application vendor/ R\u00e9serv\u00e9 \u00e0 composer","title":"Structure des r\u00e9pertoires"},{"location":"notes_de_cours/slim/structure/#config","text":"Fichier Description bootstrap.php Initialise l'application container.php Initialisation du conteneur de l'application middleware.php Lancement des Middlewares routes.php On y d\u00e9clare les routes settings.php Information de configuration (\u00e0 la BD, fichiers de logs)","title":"config/"},{"location":"notes_de_cours/slim/structure/#public","text":"Dans ce r\u00e9pertoire on retrouve le fichier index.php qui est la porte d'entr\u00e9e de notre application. Il va juste lancer le fichier bootstrap.php qui lui s'occupera de tout le reste.","title":"public/"},{"location":"notes_de_cours/slim/structure/#src","text":"C'est dans se r\u00e9pertoire qu'on va placer le code de notre application. Pour chaque route on va diviser le code en trois sections : Action : Re\u00e7oit la requ\u00eate, lance la bonne proc\u00e9dure et retourne la r\u00e9ponse \u00e0 l'usager. Service : La logique de notre code se fait ici. On valide les param\u00eatres, on lance une fonction \u00e0 la bd, on formate la r\u00e9ponse qu'on retourne \u00e0 l'action. Repository : C'est la couche de donn\u00e9es, on lance simplement les requ\u00eates \u00e0 la BD et retourne le r\u00e9sultat. On ne fait pas de logique ici. On va cr\u00e9er un fichier par \"Action\", dans le r\u00e9pertoire src/Action . Ensuite dans le r\u00e9psertoire src/Domain on va cr\u00e9er un sous-r\u00e9pertoire qui va regrouper nos services et \"repositories\" (donnez-lui un nom significatif). Ensuite dans ce r\u00e9pertoire on va avoir deux sous-r\u00e9pertoire, Service et Repository qui vont contenir les fichiers de ces deux types. Dans l'exemple suivant j'ai une route qui affiche un message de salutation (greeting)","title":"src/"}]}