{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Services Web","text":"<p>Bienvenue sur le site du cours de Services Web de l'hiver 2024 du c\u00e9gep de Victoriaville. Cette plateforme se veut un compl\u00e9ment au groupe Teams du m\u00eame cours. Vous y retrouverez les notes de cours et les diff\u00e9rents exercices. Nous ajoutons continuellement du nouveau contenu, assurez-vous donc de revenir nous voir souvent.</p>"},{"location":"#pour-joindre-votre-enseignant","title":"Pour joindre votre enseignant","text":"<p>Mathieu Fr\u00e9chette</p><p>frechette.mathieu@cegepvicto.ca</p>"},{"location":"#un-peu-dhumour","title":"Un peu d'humour","text":""},{"location":"exercices/01_utilisation_api/","title":"Exercice 01 - Utilisation d\u2019un service web","text":"<p>Utilisez Postman et la documentation en lien pour faire les requ\u00eates suivantes. </p>"},{"location":"exercices/01_utilisation_api/#1-bored-api","title":"1 Bored API","text":"<p>Documentation : https://www.boredapi.com/documentation</p> <p>Requ\u00eates</p> <ul> <li> Affichez l\u2019activit\u00e9 dont la cl\u00e9 est 6482790</li> <li> Affichez une activit\u00e9 de type \u00ab cooking \u00bb avec 2 participants</li> </ul>"},{"location":"exercices/01_utilisation_api/#2-chucknorrisio","title":"2 Chucknorris.io","text":"<p>Documentation : https://api.chucknorris.io/</p> <p>Requ\u00eates</p> <ul> <li> Combien il y a de cat\u00e9gorie au total?</li> <li> Combien de blagues contiennent le mot \"beer\"?</li> </ul>"},{"location":"exercices/01_utilisation_api/#3-imgflip","title":"# 3 ImgFlip","text":"<p>Documentation : https://imgflip.com/api</p> <p>Note</p> <p>Vous devez vous cr\u00e9er un compte sur imgflip pour pouvoir utiliser l'api.</p> <p>Requ\u00eates</p> <ul> <li> Cr\u00e9ez un meme de votre choix.</li> <li> Enregistrez votre chef d'oeuvre sous le format NomPrenom.jpg et t\u00e9l\u00e9versez le sur Teams dans le dossier de l'exercice 01 dans le groupe du cours. </li> </ul> <p>Astuce</p> <ul> <li>Commencez par trouver l'identifiant de l'image de base (template_id) que vous allez utiliser (il y a une route pour \u00e7a)</li> <li>Utilisez la route /caption_image pour cr\u00e9er votre meme en utilisant les bonnes informations</li> <li>Attention \u00e0 la m\u00e9thode de la route</li> <li>Les informations doivent \u00eatre envoy\u00e9es dans le corps de la requ\u00eate au format x-www-form-urlencoded</li> </ul> <p></p>"},{"location":"exercices/02_serverweb_node/","title":"Exercice 02 - Serveur web avec Node.js","text":"<p>Cr\u00e9ez un serveur web en Node.js, vous pouvez vous inspirer des exemples dans les notes de cours.</p> <p>Le serveur doit pouvoir r\u00e9cup\u00e9rer la valeur du param\u00eatre <code>code</code> dans l'url envoy\u00e9. Par exemple si j'envoie <code>localhost:3000/?code=1</code> la valeur est 1.</p> <p>Ajoutez l'objet JavaScript suivant \u00e0 votre code : </p> <pre><code>const professeurs = {\n    1: { nom: \"Fr\u00e9chette\", prenom: \"Mathieu\"},\n    2: { nom: \"Lagac\u00e9\", prenom: \"Christiane\" },\n    3: { nom: \"Trottier\", prenom: \"S\u00e9bastien\" },\n    4: { nom: \"Tousignant\", prenom: \"Simon\" },\n    5: { nom: \"Mercier\", prenom: \"Fran\u00e7ois\" },\n    6: { nom: \"Croteau\", prenom: \"Carine\" },\n    7: { nom: \"Taleb\", prenom: \"Fr\u00e9d\u00e9rik\" },\n    8: { nom: \"Ouellet\", prenom: \"Alexandre\" },\n}\n</code></pre> <p>Maintentant quand le serveur re\u00e7oit une url : </p> <ul> <li>Si le param\u00e8tre <code>code</code> est pr\u00e9sent, affichez le pr\u00e9nom et le nom du professeur correspondant \u00e0 sa valeur. Le texte retourn\u00e9 sera \"Bonjour pr\u00e9nom nom\" dans une balise H1 et le code de statut sera 200.</li> <li>Si le param\u00e8tre est absent ou bien que la valeur n'est pas pr\u00e9sente dans l'objet, affichez \"Professeur non trouv\u00e9\" dans une balise H1. Le code de statut sera 404.</li> </ul> <p>Changez la valeur du Content-Type pour que le format de la r\u00e9ponse soit du html.</p> <p>Installez nodemon et configurez votre projet pour pouvoir le lancer avec la commande <code>npm dev</code>.</p> <p>Installer le module dotenv et modifiez votre code pour que la valeur du port \u00e0 utiliser soit stock\u00e9e dans un fichier .env.</p>"},{"location":"exercices/02_serverweb_node/#gestion-des-routes","title":"Gestion des routes","text":"<p>Maintenant que vous avez un serveur web qui fonctionne, on va l'am\u00e9liorer un peu avec une gestion basique de route.</p> <ul> <li>Quand on n'entre que l'h\u00f4te ou bien la route <code>/</code>, affichez en html \"Bienvenue \u00e0 mon premier api\" dans une balise h1</li> <li>Quand on entre la route <code>/professeurs</code>, reprenez le code de la premi\u00e8re partie. Donc si j'entre <code>localhost:3000/professeurs?code=1</code> la r\u00e9ponse sera \"Bonjour Mathieu Fr\u00e9chette\" dans une balise H1.</li> <li>Quand j'entre la route <code>/professeurs/tous</code> je retourne en json l'objet professeurs.</li> </ul> <p>Astuce</p> <p>Utilisez la fonction JSON.stringify() pour convertir un objet en JSON. Dans les notes de cours sur le format JSON vous avez des exemples.</p>"},{"location":"exercices/03_helloworld_api/","title":"Exercice 03 - HelloWorldApi","text":"<p>Cr\u00e9ez un nouveau projet dans lequel vous allez cr\u00e9er votre premier API en Node.js \u00e0 l'aide d'Express.</p>"},{"location":"exercices/03_helloworld_api/#simulation-des-donnees","title":"Simulation des donn\u00e9es","text":"<p>On va simuler l'acc\u00e8s \u00e0 la base de donn\u00e9es avec le tableau d'objets suivant.</p> salutations.js<pre><code>const salutations = [\n    { code_langue : \"fr\", langue : \"Fran\u00e7ais\", message : \"Bonjour le monde\"},\n    { code_langue : \"fr\", langue : \"Fran\u00e7ais\", message : \"Bon matin\"},\n    { code_langue : \"fr\", langue : \"Fran\u00e7ais\", message : \"Salut\"},\n    { code_langue : \"fr\", langue : \"Fran\u00e7ais\", message : \"Bonne nuit je vais travailler\"},\n    { code_langue : \"en\", langue : \"Anglais\", message : \"Hello world\"},\n    { code_langue : \"en\", langue : \"Anglais\", message : \"Good morning\"},\n    { code_langue : \"en\", langue : \"Anglais\", message : \"Hi\"},\n    { code_langue : \"en\", langue : \"Anglais\", message : \"Good night, i''m going to work\"},\n    { code_langue : \"es\", langue : \"Espagnol\", message : \"Hola Mundo\"},\n    { code_langue : \"es\", langue : \"Espagnol\", message : \"Buenos dias\"},\n    { code_langue : \"es\", langue : \"Espagnol\", message : \"Hola\"},\n    { code_langue : \"es\", langue : \"Espagnol\", message : \"Buenas noches me voy a trabajar\"},\n    { code_langue : \"de\", langue : \"Allemand\", message : \"Hallo Welt\"},\n    { code_langue : \"de\", langue : \"Allemand\", message : \"guten Morgen\"},\n    { code_langue : \"de\", langue : \"Allemand\", message : \"Hallo\"},\n    { code_langue : \"de\", langue : \"Allemand\", message : \"Gute Nacht, ich gehe zur Arbei\"}\n];\n\nmodule.exports = salutations;\n</code></pre> <p>Ensuite pour utiliser votre tableau vous pouvez faire <code>const salutations = require('./salutations');</code> dans un autre fichier (ajuster le chemin au besoin).</p>"},{"location":"exercices/03_helloworld_api/#postman","title":"Postman","text":"<p>Dans le logiciel Postman, cr\u00e9z un r\u00e9pertoire pour l'exercice et enregistrez une requ\u00eate pour chacune des routes dans l'onglet Collections.</p> <p></p> Une bonne habitude \u00e0 prendre"},{"location":"exercices/03_helloworld_api/#routage","title":"Routage","text":"<p>Votre api comportera les routes suivante: </p> M\u00e9thode Route Description GET /api Message de bienvenue \u00e0 l'api GET /api/salutations?langue=[fr,en,es,de] Afficher une salutation al\u00e9atoire. Si le param\u00e8tre est ajout\u00e9 et valide, la salutation sera dans la langue choisie GET /api/salutations/liste Afficher la liste de toutes les salutations POST /api/salutations Ajouter une salutation (voir aide plus bas) <ul> <li> <p> Vous devez utiliser l'objet Router pour regrouper toutes les routes \"salutations\" dans un m\u00eame fichier.</p> </li> <li> <p> Pour la route <code>POST /api/salutations</code>, vous devez dans le corps de la requ\u00eate envoyer les informations suivantes en JSON (utilisez Postman le faire) : </p> </li> </ul> corps<pre><code>{ \n    \"code_langue\" : \"fr\", \n    \"langue\" : \"Fran\u00e7ais\", \n    \"message\" : \"Votre nouveau message\"\n}\n</code></pre> <p>Ensuite dans votre code utilisez l'intergiciel express.json() pour convertir les donn\u00e9es JSON en objet JavaScript. Vous aurez acc\u00e8s aux donn\u00e9es par l'objet req. Il ne vous restera ensuite qu'\u00e0 ajouter les valeurs au tableau salutations. </p> index.js<pre><code>app.post('/', (req, res) =&gt; {\n    const message = req.body.message; // Il y a un item message dans le json envoy\u00e9\n    ...\n    if(!req.body.message) {\n        console.log(\"Le param\u00e8tre message est absent\");\n    }\n    ...\n});\n</code></pre> <p>Apr\u00e8s l'ajout du message, retournez le json suivant</p> <pre><code>{\n    \"message\" : \"Salutation ajout\u00e9e\",\n    \"salutation\" : [message]\n}\n</code></pre> <p>Attention si les informations du corps de la requ\u00eate sont incomplete, qu'il manque des champs, retourner le message suivant : </p> <pre><code>{\n    \"message\" : \"Erreur, les param\u00e8tres code_langue, langue et message sont obligatoires\"\n}\n</code></pre> <ul> <li> Pour la route <code>GET /api/salutations?langue=[fr,en,es,de]</code>, si vous sp\u00e9cifiez le code de langue en param\u00e8tre et qu'il n'existe pas, retournez le json suivant avec le code d'erreur 404 : </li> </ul> <pre><code>{\n    \"message\" : \"Erreur, le code de langue [code] n'existe pas\"\n}\n</code></pre> <ul> <li> Avec Express, pour acc\u00e9der aux param\u00e8tres de la section requ\u00eate de l'url on peut utiliser <code>req.query.nomParam</code>. Pour tester si le param\u00e8tre existe, on peut faire le test avec un simple if comme ceci <code>if(req.query.langue) {}</code></li> </ul> index.js<pre><code>router.get('/', (req, res) =&gt; {\n    if(req.query.langue) {\n        console.log(req.query.langue);\n    } else {\n        console.log(\"Le param\u00e8tre langue est manquant\");\n    } \n    ...\n});\n</code></pre> <ul> <li> J'ai utilis\u00e9 array.filter() pour ne conserver que les salutations qui correspondent au code de la langue. </li> </ul>"},{"location":"exercices/03_helloworld_api/#intergiciel","title":"Intergiciel","text":"<p>\u00c0 l'aide de l'intergiciel Morgan ajoutez dans un fichier nomm\u00e9 access.log une entr\u00e9e \u00e0 chaque fois qu'on acc\u00e8de \u00e0 une route du serveur. Cette entr\u00e9e devra afficher la date au format clf, la m\u00e9thode http, la route, le status de la r\u00e9ponse et le temps de r\u00e9ponse en millisecondes. Le r\u00e9sultat doit \u00eatre format\u00e9 comme ceci: </p> access.log<pre><code>22/Jan/2024:15:07:15 +0000 =&gt; GET / 200 - 7.331 ms\n</code></pre> <p>Consultez les notes de cours sur les intergiciels et la documentation de Mogan pour vous aider.</p>"},{"location":"notes_de_cours/api/bonnes_pratiques/","title":"Les bonnes pratiques dans la conception d'un API","text":""},{"location":"notes_de_cours/api/bonnes_pratiques/#utiliser-le-format-json","title":"Utiliser le format JSON","text":"<p>Le format \u00e0 pr\u00e9coniser pour recevoir et retourner de l'information de notre api est le format JSON. C'est de loin le plus utilis\u00e9 aujourd'hui et la grande majorit\u00e9 des langages de programmation on des fonctions natives pour le manipuler.</p> <p>Plus de d\u00e9tail dans cette section : Le format JSON</p>"},{"location":"notes_de_cours/api/bonnes_pratiques/#utiliser-des-noms-au-lieu-de-verbes-pour-les-routes","title":"Utiliser des noms au lieu de verbes pour les routes","text":"<p>Quand on nomme les routes de notre api, on ne devrait pas utiliser de verbe. L'emploi d'un nom significatif est \u00e0 privil\u00e9gier. Par exemple notre api nous permet de retourner une liste d'utilisateurs ou d'en cr\u00e9er un, on serait tent\u00e9 d'utiliser comme nom de route </p> <pre><code>https://monApi/getUtilisateurs\nhttps://monApi/createUtilisateurs\n</code></pre> <p>mais il est pr\u00e9f\u00e9rable d'utiliser dans les deux cas</p> <pre><code>https://monApi/utilisateurs\n</code></pre> <p>Une m\u00eame route peut avoir plus d'une fonctionnalit\u00e9, c'est la m\u00e9thode HTTP qui nous permet de les diff\u00e9renci\u00e9es.</p>"},{"location":"notes_de_cours/api/bonnes_pratiques/#utiliser-la-methode-http-pour-decrire-la-fonctionnalite-de-la-ressource","title":"Utiliser la m\u00e9thode HTTP pour d\u00e9crire la fonctionnalit\u00e9 de la ressource","text":"<p>En lien avec le point suivant, utilisez la bonne m\u00e9thode HTTP pour indiquer quelle est la fonctionnalit\u00e9 de la route. Il existe une m\u00e9thode qui correspondante \u00e0 chaque op\u00e9ration CRUD. </p> Op\u00e9ration dans la BD M\u00e9thode http Lire GET Ins\u00e9rer POST Modifier PUT Modifier partiellement PATCH Supprimer DELETE <p>Attention</p> <p>On ne doit jamais modifier une ressource avec une m\u00e9thode GET.</p> <p>Les actions de modification PUT et PATCH sont tr\u00e8s similaires, la diff\u00e9rence est que PUT est utilis\u00e9 pour modifier toutes les valeurs de la ressource alors que PATCH l'est pour une modification partielle. Autre distinction de PUT, si la ressource n'est pas trouv\u00e9, elle sera cr\u00e9\u00e9e. Prenons l'exemple suivant, on veut pouvoir modifier un utilisateur ayant ces informations </p> <pre><code>{\n    \"id\" : \"1\",\n    \"username\" : \"[username]\",\n    \"first_name\" : \"[first_name]\",\n    \"last_name\" : \"[last_name]\",\n    \"email\" : \"[email]\"\n}\n</code></pre> <p>Avec PUT on doit envoyer toutes ces informations dans la requ\u00eate, alors qu'avec PATCH on pourrait permettre seulement d'envoyer et de modifier le email.</p> <p>L'utilisation de la bonne m\u00e9thode HTTP nous permet d'utiliser la m\u00eame route pour plus d'une fonction.</p> M\u00e9thode Route Description GET /utilisateurs Retourne la liste de tous les utilisateurs POST /utilisateurs Cr\u00e9ation d'un utilisateur PUT /utilisateurs/21 Modification de l'utilisateur avec le id 21 DELETE /utilisateurs/21 Suppression de l'utilisateur avec le id 21"},{"location":"notes_de_cours/api/bonnes_pratiques/#utiliser-les-codes-de-statut-http","title":"Utiliser les codes de statut HTTP","text":"<p>Dans la r\u00e9ponse de la requ\u00eate \u00e0 votre API utilisez une code de statut HTTP appropri\u00e9 \u00e0 la situation.</p> <ul> <li>200 - 299 indique un succ\u00e8s</li> <li>400 - 499 Il y a eu une erreur c\u00f4t\u00e9 client</li> <li>500 - 599 Il y a eu une erreur c\u00f4t\u00e9 serveur</li> </ul>"},{"location":"notes_de_cours/api/bonnes_pratiques/#resume-des-methodes-avec-le-code-de-statut-suggere","title":"R\u00e9sum\u00e9 des m\u00e9thodes avec le code de statut sugg\u00e9r\u00e9","text":"M\u00e9thode GLOBAL (/utilisateurs) Sur un element (/utilisateurs/{id}) POST 201 Created - La ressource est cr\u00e9\u00e9e et est retourn\u00e9e dans la r\u00e9ponse - GET 200 OK 200 OK 404 Not Found - La ressource n'a pas \u00e9t\u00e9 trouv\u00e9e, ex: le id utilisateur est invalide. PUT 405 Method Not Allowed - On ne devrait pas permettre de modifier toutes les ressources en une action 200 OK - La ressource est modifi\u00e9e et est retourn\u00e9e dans la r\u00e9ponse. 201 Created - La ressource a \u00e9t\u00e9 cr\u00e9\u00e9 car elle etait inexistante. PATCH 405 Method Not Allowed - On ne devrait pas permettre de modifier toutes les ressources en une action 200 OK - La ressource est modifi\u00e9e et est retourn\u00e9e dans la r\u00e9ponse. 404 Not Found - La ressource \u00e0 modifier n'a pas \u00e9t\u00e9 trouv\u00e9e, ex: le id utilisateur est invalide. DELETE 405 Method Not Allowed - On ne devrait pas permettre de supprimer toutes les ressources en une action. Si oui utilisez le code 200. 204 No Content - La ressource a \u00e9t\u00e9 supprim\u00e9 et aucune information n'est retourn\u00e9e dans la r\u00e9ponse. 200 OK - La ressource est supprim\u00e9 et est retourn\u00e9e dans la r\u00e9ponse. 404 Not Found - La ressource \u00e0 supprimer n'a pas \u00e9t\u00e9 trouv\u00e9e, ex: le id utilisateur est invalide."},{"location":"notes_de_cours/api/bonnes_pratiques/#codes-a-utiliser-pour-les-erreurs","title":"Codes \u00e0 utiliser pour les erreurs","text":"Code Utilisation 401 - Unauthorized Le client ne s'est pas encore authentifier pour acc\u00e9der \u00e0 l'api. 403 - Forbidden Le client est authentifi\u00e9 mais n'a pas les autorisations pour acc\u00e9der \u00e0 la ressource. 404 - Not Found L'url utilis\u00e9 est invalide, le client demande une ressource qui n'existe pas. 500 - Internal Server Error Une erreur est survenu c\u00f4t\u00e9 serveur. Retournez de l'information sur l'erreur dans la r\u00e9ponse."},{"location":"notes_de_cours/api/bonnes_pratiques/#utiliser-limbrication-dans-les-routes","title":"Utiliser l'imbrication dans les routes","text":"<p>Quand des ressources de votre api peuvent \u00eatre reli\u00e9es, utilisez l'imbrication pour cr\u00e9er des urls significatifs. Par exemple un auteur peut avoir \u00e9crit plusieurs livres, on pourrait avoir une route nomm\u00e9e <code>/{auteurs}/livres</code> qui retourne tous les livres de l'auteur en param\u00e8tre.</p> <p>Il faut cependant faire attention \u00e0 ne pas trop surcharger la route en allant trop profond\u00e9ment avec l'imbrication.</p>"},{"location":"notes_de_cours/api/bonnes_pratiques/#permettre-les-filtres-le-tri-selection-des-champs-retournes-et-la-pagination","title":"Permettre les filtres, le tri, s\u00e9lection des champs retourn\u00e9s et la pagination","text":"<p>Pour permettre \u00e0 l'utilisateur un meilleur contr\u00f4le sur les donn\u00e9es r\u00e9cup\u00e9r\u00e9es, permettez quand c'est possible l'utilisation de filtres, de tri et de pagination dans vos requ\u00eate. Les param\u00e8tres devraient \u00eatre situ\u00e9 dans la section \"requ\u00eate\" de l'url</p>"},{"location":"notes_de_cours/api/bonnes_pratiques/#filtre","title":"Filtre","text":"<p>Utilisez un nom de param\u00e8tre significatif. Pour saisir plusieurs valeurs, on doit les s\u00e9parer par une virgule.</p> <p>Exemple : </p> <ul> <li><code>/livres?categorie=roman</code> pour afficher tous les livres de la cat\u00e9gorie roman.</li> <li><code>/livres?categorie=roman,documentaire</code> pour afficher tous les livres de la cat\u00e9gorie roman et documentaire.</li> </ul>"},{"location":"notes_de_cours/api/bonnes_pratiques/#tri","title":"tri","text":"<p>Utilisez comme valeur du param\u00e8tre le nom du champ avec un code pr\u00e9d\u00e9fini en pr\u00e9fixe ( + et - par exemple) qui indiquera si le tri est ascendant ou descendant. Le tri sur plus d'un champ devrait aussi \u00eatre permis.</p> <p>Exemple : </p> <ul> <li><code>/livres?tri=+titre,-prix</code> pour trier par les livres titre de mani\u00e8re ascendante et par prix de mani\u00e8re descendante.</li> </ul>"},{"location":"notes_de_cours/api/bonnes_pratiques/#selection-des-champs-retournes","title":"S\u00e9lection des champs retourn\u00e9s","text":"<p>Il peut aussi \u00eatre pertinent de permettre au client de pouvoir s\u00e9lectionner uniquement les champs qu'il veut avoir dans la r\u00e9ponse \u00e0 la requ\u00eate. </p> <p>Exemple : </p> <ul> <li><code>/livres?champs=titre,isbn</code> retournera la liste de tous les livres mais seulement le titres et isbn de chacun.</li> </ul>"},{"location":"notes_de_cours/api/bonnes_pratiques/#pagination","title":"Pagination","text":"<p>Il n'est pas rare qu'une ressource comporte plusieurs centaines sinon milliers d'enregistrements. On devrait permettre au client de pouvoir s\u00e9lectionner seulement une partie des enregistrements en d\u00e9finissant un point de d\u00e9part (offset) et un nombre d'enregistrement (limit). Si on utilise la pagination, on devrait d\u00e9finir des valeurs par d\u00e9faut au param\u00e8tre offset et limit (g\u00e9n\u00e9ralement offset sera \u00e9gale \u00e0 0 pour le premier enregistrement). </p> <p>Exemple : </p> <ul> <li><code>/livres?limit=50&amp;offset=100</code> En partant du centi\u00e8me enregistrement, affiche les 50 livres suivants.</li> </ul> <p>Pour faciliter le traitement des donn\u00e9es, on devrait ajouter dans la r\u00e9ponse le nombre total d'enregistrements ainsi que les valeurs de limit et offset.</p> <p>Une autre technique est d'avoir un nombre d'enregistrement fixe par page et de seulement permettre \u00e0 l'usager de choisir la page qu'il veut afficher. Exemple, on d\u00e9cide d'afficher 30 enregistrements par page, l'url suivant va afficher les enregistrement 61 \u00e0 90 : </p> <ul> <li><code>/livres?page=3</code></li> </ul> <p>On peut bien sur combiner les deux m\u00e9thodes comme c'est souvent le cas dans les sites d'achats en lignes (On peut choisir la page et le nombre d'articles affich\u00e9s par page).</p>"},{"location":"notes_de_cours/api/bonnes_pratiques/#source","title":"Source","text":"<ul> <li>API design patterns and best practices. API Design Patterns and Best Practices | API Guide. (2022, January 12). https://www.moesif.com/blog/api-guide/api-design-guidelines/</li> <li>Chris, K. (2021, September 16). Rest API best practices \u2013 rest endpoint design examples. freeCodeCamp.org. https://www.freecodecamp.org/news/rest-api-best-practices-rest-endpoint-design-examples/</li> <li>Mockel, J.-M. (2022, June 22). Rest api design best practices handbook \u2013 how to build a REST API with JavaScript, node.js, and express.js. freeCodeCamp.org. https://www.freecodecamp.org/news/rest-api-design-best-practices-build-a-rest-api/</li> <li>MozDevNet. (n.d.). M\u00e9thodes de requ\u00eate HTTP - http: MDN. MDN Web Docs. https://developer.mozilla.org/fr/docs/Web/HTTP/Methods </li> <li>Solutions, M.-W. (2017, May 16). 10 best practices for better restful API. Medium. https://medium.com/@mwaysolutions/10-best-practices-for-better-restful-api-cbe81b06f291</li> </ul>"},{"location":"notes_de_cours/api/introduction/","title":"Introduction","text":""},{"location":"notes_de_cours/api/introduction/#cest-quoi-un-service-web-api","title":"C'est quoi un service web (API)?","text":"<p>L'acronyme API signifie en anglais Application Programming Interface. On peut d\u00e9finir une api comme un interface qui permet d\u2019\u00e9changer de l\u2019informations avec d\u2019autres applications, peut importe le langage de programmation et le syst\u00e8me d\u2019exploitation.</p> <p>Il existe plusieurs types d'architectures d'api. Nous allons choisir l'architecture REST qui se base sur les standarts du web et le protocole HTTP. </p>"},{"location":"notes_de_cours/api/introduction/#court-resume-en-4-minutes","title":"Court r\u00e9sum\u00e9 en 4 minutes","text":""},{"location":"notes_de_cours/api/introduction/#fonctionnement-general","title":"Fonctionnement g\u00e9n\u00e9ral","text":"<p>Donc si on r\u00e9sume notre api va recevoir des requ\u00eates HTTP qu'il traitera selon les param\u00eatres envoy\u00e9s et retourner une r\u00e9ponse \u00e0 la requ\u00eate.</p> <p> </p> Source : https://www.altexsoft.com/blog/rest-api-design/ <p>Une requ\u00eate \u00e0 un api REST va toujours \u00eatre compos\u00e9e de quatre parties essentielles:</p> <ul> <li>Une m\u00e9thode HTTP: GET, POST, PUT, PATCH, DELETE.</li> <li>Une porte d'entr\u00e9e (endpoint), le plus souvent sous la forme d'une url.</li> <li>Une ent\u00eate \u00e0 la requ\u00eate HTTP qui contient plusieurs informations comme les informations de l'usager et une cl\u00e9 d'api. </li> <li>Un \"corps\" qui peut contenir des informations a envoy\u00e9 \u00e0 l'api.</li> </ul> <p> </p> Source : https://www.apinewbies.com/api-request/"},{"location":"notes_de_cours/api/introduction/#envoyer-une-requete","title":"Envoyer une requ\u00eate","text":"<p>On peut simplement envoyer une requ\u00eate \u00e0 un api avec n'importe quel navigateur mais on n'aura pas de contr\u00f4le sur les informations envoy\u00e9 et on sera limit\u00e9 \u00e0 la m\u00e9thode GET.</p> <p>Il existe plusieurs outils qui nous permettent une utilisation plus pouss\u00e9 des apis, Postman en est un bon exemple. Sinon on peut incorpor\u00e9 le tout dans une application ou page web, la pluppart des langages de programmation prennent en charge les requ\u00eates HTTP.</p>"},{"location":"notes_de_cours/api/json/","title":"Le format JSON","text":"<p>JSON (JavaScript Object Notation) est un format cr\u00e9\u00e9 pour faciliter l'\u00e9change de donn\u00e9es entre diff\u00e9rents syst\u00e8mes. Bien que grandement inspir\u00e9 de la notation objet de JavaScript le format JSON est ind\u00e9pendant de tout langage et peut \u00eatre interpr\u00e9ter par la majorit\u00e9 des diff\u00e9rents langage de programmation.</p>"},{"location":"notes_de_cours/api/json/#structure-de-base","title":"Structure de base","text":"<p>Les deux structures suivantes sont utilis\u00e9es pour construire notre JSON : </p>"},{"location":"notes_de_cours/api/json/#lobjet","title":"L'objet","text":"<p>Une suite d'\u00e9l\u00e9ments cl\u00e9/valeurs, s\u00e9rar\u00e9s par une virgule. L'objet sera entour\u00e9 par des accolades. <pre><code>{\n    \"cle1\" : \"valeur1\",\n    \"cle2\" : \"valeur2\"\n}\n</code></pre> </p>"},{"location":"notes_de_cours/api/json/#le-tableau","title":"Le tableau","text":"<p>Une suite d'\u00e9l\u00e9ments ordonn\u00e9s, s\u00e9par\u00e9e par une virgule et entour\u00e9e par des crochets [ ] <pre><code>[\"valeur1\", \"valeur2\"]\n</code></pre> </p> <p>On peut m\u00e9langer les deux structures sans probl\u00e8me (un tableau d'objet, une valeur de l'objet est un tableau, etc.) <pre><code>{\n    \"cle1\" : [\n        \"valeur1\", \n        \"valeur2\"\n    ],\n    \"cle2\" : \"valeur2\"\n}\n</code></pre></p> <p>Il est aussi possible d'avoir un objet ou un tableau vide, qu'on notera respectivement {} et [].</p>"},{"location":"notes_de_cours/api/json/#liste-des-valeurs-possibles","title":"Liste des valeurs possibles","text":"<ul> <li>String : du texte entour\u00e9 de guillemets \"</li> <li>Nombre : sans les guillemets, on peut utiliser les d\u00e9cimales avec le point et les exposants avec le caract\u00e8re e.</li> <li>objet : comme vu plus haut, liste de cl\u00e9/valeur entour\u00e9es par des accolades</li> <li>tableau : liste d'items entour\u00e9s de crochet</li> <li>bool\u00e9an : utilisez true ou false sans guillemets et en minuscule</li> <li>valeur nulle : null sans guillemets et en minuscule</li> </ul> <p>Note sur les dates : Le format date n'\u00e9tant pas pleinenement support\u00e9, on devrait par pr\u00e9caution les convertir en texte.</p>"},{"location":"notes_de_cours/api/json/#valider-un-texte-au-format-json","title":"Valider un texte au format JSON","text":"<p>JSONLint est un petit outils en ligne tr\u00e8s pratique pour valider qu'un texte respecte le format JSON : www.jsonlint.com</p>"},{"location":"notes_de_cours/api/json/#utilisation-en-javascript","title":"Utilisation en JavaScript","text":""},{"location":"notes_de_cours/api/json/#jsonstringify","title":"JSON.stringify()","text":"<p>La m\u00e9thode la plus simple pour envoyer des donn\u00e9es au format JSON est de convertir un objet JavaScript avec la fonction <code>JSON.stringify</code>.</p>"},{"location":"notes_de_cours/api/json/#jsonparse","title":"JSON.parse()","text":"<p>Les donn\u00e9es qu'on re\u00e7oit au format JSON sont sous forme de texte. Pour les utiliser facilement en JavaScript on va les convertir en objet avec la fonction <code>JSON.parse()</code>.</p> JSON.js<pre><code>// Objet JavaScript \u00e0 convertir en JSON\nconst usager = {prenom: \"Mathieu\", nom: \"Frechette\", age:43, cours:[\"Services Web\", \"Conception de syst\u00e8mes\"]};\n// Convertir l'objet JavaScript en JSON avec JSON.stringify()\nconst jsToJSON = JSON.stringify(usager);\n\nconsole.log('reponseJson: ', jsToJSON); // {\"prenom\":\"Mathieu\",\"nom\":\"Frechette\",\"age\":43,\"cours\":[\"Services Web\",\"Conception de syst\u00e8mes\"]}\n\n// Convertir le JSON en objet JavaScript avec JSON.parse()\nconst objJS = JSON.parse(jsToJSON);\n\nconsole.log('Nom: ', objJS.prenom + ' ' + objJS.nom); // Nom: Mathieu Frechette\n</code></pre>"},{"location":"notes_de_cours/api/json/#sources","title":"Sources","text":"<ul> <li>Toutes les images proviennent du site www.json.org</li> <li>ECMA-404 The JSON Data Interchange Standard.</li> <li>www.json.org</li> <li>Standart de l'ECMA en version PDF</li> </ul>"},{"location":"notes_de_cours/node/express/","title":"Express.js","text":"<p>Express.js est un framework pour construire des applications web en Node.js. C'est de fait le framework standard pour le d\u00e9veloppement de serveur en Node.js. </p> <p>Documentation officielle: </p> <p>Manuel</p> <p>Express JS </p> <p>Pour installer Express :</p> console<pre><code>npm install express\n</code></pre>"},{"location":"notes_de_cours/node/express/#premier-serveur-web-avec-express","title":"Premier serveur web avec Express","text":"index.js<pre><code>// Importer le module express\nconst express = require ('express');\n\n// Cr\u00e9er une application express\nconst app = express();\nconst PORT = 3000;\n\napp.get('/', (req, res) =&gt; {\n    res.send(\"&lt;h1&gt;Mon premier serveur web sur express !&lt;/h1&gt;\");\n});\n\napp.listen(PORT, () =&gt; {\n    console.log(`Serveur d\u00e9marr\u00e9 sur le port ${PORT}`);\n});\n</code></pre>"},{"location":"notes_de_cours/node/express/#les-objets-req-et-res","title":"Les objets req et res","text":"<p>L\u2019objet req repr\u00e9sente la requ\u00eate HTTP transmise au serveur. Cet objet permet, entre autres :  </p> <ul> <li>D\u2019acc\u00e9der aux param\u00e8tres transmis dans l\u2019URL  </li> <li>D\u2019acc\u00e9der aux donn\u00e9es transmise dans le corps de la requ\u00eate (body)  </li> <li>De manipuler les cookies   </li> </ul> <p>L\u2019objet res repr\u00e9sente la r\u00e9ponse HTTP transmise du serveur au client. Cet objet permet, entre autres : </p> <ul> <li>Retourner des informations au clien</li> <li>Modifier le code de statut de la requ\u00eate</li> <li>Rediriger une demande</li> <li>G\u00e9n\u00e9rer un mod\u00e8le de vue</li> </ul> <p>Manuel</p> <ul> <li>L'objet Request (req)</li> <li>L'objet Response (res)</li> </ul>"},{"location":"notes_de_cours/node/express/#routes-et-methodes-http","title":"Routes et m\u00e9thodes HTTP","text":"<p>Dans l\u2019exemple pr\u00e9c\u00e9dent, la requ\u00eate utilise la m\u00e9thode GET, qui r\u00e9cup\u00e8rent les informations directement dans l\u2019URL. </p> <p>D\u2019autres m\u00e9thodes sont aussi d\u00e9finies dans le protocole HTTP. Les plus communes sont : GET, POST, PUT, DELETE.   </p> <p>Avec Express.js, il est possible d\u2019utiliser la m\u00eame URL avec diff\u00e9rentes m\u00e9thodes. Cela se fait en modifiant la m\u00e9thode aupr\u00e8s de la route :</p> M\u00e9thode http Code GET router.get(path, function(req, res, next) { \u2026 }) POST router.post(path, function(req, res, next) { \u2026 }) PUT router.put(path, function(req, res, next) { \u2026 }) DELETE router.delete(path, function(req, res, next) { \u2026 }) <p>Manuel</p> <p>MDN HTTP Methods </p>"},{"location":"notes_de_cours/node/introduction/","title":"Introduction \u00e0 Node.js","text":"<p>Javascript est un langage de programmation qui est interpret\u00e9 par le navigateur dans lequel il est ex\u00e9cut\u00e9. Avec Node.js on s'affranchit de cette d\u00e9pendance au navigateur en pouvant lancer du code JavaScript directement depuis notre machine. On peut donc programmer notre logique c\u00f4t\u00e9 serveur (backend) directement en JavaScript. Pour le dire autrement, Node.js nous fournit un environnement d'ex\u00e9cution (runtime environment) Javascript sans aucun lien avec les navigateurs.</p>"},{"location":"notes_de_cours/node/introduction/#installation-de-node","title":"Installation de Node","text":"<ul> <li>Node.js 20.11.0 LTS</li> <li>T\u00e9l\u00e9chargement de Node.js</li> </ul>"},{"location":"notes_de_cours/node/introduction/#executer-du-code-javascript-sur-un-serveur","title":"Ex\u00e9cuter du code JavaScript sur un serveur","text":"<ul> <li>Cr\u00e9ez un fichier .js qui va contenir votre code</li> <li>Lancez le fichier avec la commande <code>node nomFichier.js</code></li> </ul> hello.js<pre><code>console.log(\n    'J\u2019\u00e9cris directement dans la console! Je peux faire du code qui ne s\u2019ex\u00e9cute que sur le serveur'\n);\n\nvar fruits = ['pomme', 'orange', 'banane'];\n\nfruits.forEach(afficherElementTableau);\n\n/*\n* Affiche \u00e0 la console un \u00e9l\u00e9ment du tableau\n*\n* @param item - L'item \u00e0 afficher\n* @param index - La position de l'item dans le tableau\n*/\nfunction afficherElementTableau(item, index) {\n    console.log(index + ':' + item);\n}\n</code></pre>"},{"location":"notes_de_cours/node/introduction/#references","title":"R\u00e9f\u00e9rences","text":"<ul> <li>Introduction \u00e0 Node.js</li> <li>Documentation officielle node.js</li> </ul>"},{"location":"notes_de_cours/node/middleware/","title":"Intergiciel (Middleware)","text":"<p>En terme g\u00e9n\u00e9ral, un middleware est un logiciel qui est ex\u00e9cut\u00e9 durant la communication entre deux applications. Au niveau des services web, les middlewares seront utilis\u00e9s principalement pour manipuler la requ\u00eate en entr\u00e9e et la r\u00e9ponse en sortie. </p> <p>Les middlewares forment des couches concentriques autour de l\u2019application. En commen\u00e7ant par le plus r\u00e9cent, la requ\u00eate les traverses un a un jusqu\u2019\u00e0 l\u2019application pour ensuite refaire le chemin inverse avec la r\u00e9ponse.</p> <p> </p> Trajet d'une requ\u00eate HTTP dans les couches d'intergiciels <p>Un exemple d'utilisation serait un syst\u00e8me d'authentification qui ne laisserait \"passer\" la requ\u00eate HTTP \u00e0 notre api seulement si elle est authentifi\u00e9 ad\u00e9quatement. </p> <p>Avec Express.js, nous allons utiliser la fonction <code>app.use()</code> qui va prendre en param\u00e8tre une fonction (l'intergiciel). Lorsque la requ\u00eate arrive, elle passe \u00e0 travers chaque intergiciel dans l'ordre des fonctions use(). </p> <p>Note</p> <p>\u00c0 la fin de chaque intergiciel vous devez ex\u00e9cuter la fonction next() pour continuer le traitement et passer au prochain intergiciel sinon le traitement s'arr\u00eatera \u00e0 la fin de la fonction.</p> intergiciel.js<pre><code>function historique(req, res, next) {\n    // Affiche \u00e0 la console des informations de la requ\u00eate\n    console.log(`${req.method} ${req.url}`);\n    // Continue le traitement\n    next();\n}\n\napp.use(historique);\n</code></pre>"},{"location":"notes_de_cours/node/middleware/#expressjson","title":"express.json()","text":"<p>Express.json() est un intergiciel d\u00e9j\u00e0 inclus dans Express et qui est utile pour transformer le json re\u00e7u du client en objet javascript. Il nous permet donc facilement d'acc\u00e9der aux donn\u00e9es que le client auraient envoy\u00e9es en JSON dans la requ\u00eate sous la forme d'un objet. On acc\u00e8de \u00e0 l'objet par <code>req.body</code> et le nom de la cl\u00e9 dans le json. </p> <p>Utilisation :  </p> tableau_de_fruits.js<pre><code>app.use(express.json());\n\napp.post('/', (req, res) =&gt; {\n    const id = req.body.id; // Il y a un item id dans le json envoy\u00e9\n\n    ...\n});\n</code></pre> <p>Manuel</p> <p>express.json - ExpressJS </p>"},{"location":"notes_de_cours/node/middleware/#morgan","title":"morgan","text":"<p>Morgan est un intergiciel pour garder l\u2019historique des requ\u00eates trait\u00e9es par votre serveur Express.</p> <p>Pour l\u2019installation : console<pre><code>npm install morgan\n</code></pre></p> <p>Utilisation :  </p> utilisation_morgan.ts<pre><code>var morgan = require('morgan')\n\napp.use(morgan('dev')); // format pr\u00e9difini, voir dans la doc\n</code></pre> <p>Manuel</p> <p>Morgan - ExpressJS </p>"},{"location":"notes_de_cours/node/npm/","title":"npm","text":"<p>Npm est le gestionnaire de paquets (modules) officiel de Node.js. Celui-ci permet d\u2019ajouter des modules externes dans une application Node.js Depuis la version 0.6.3 de Node.js, npm fait partie de l'environnement et est donc automatiquement install\u00e9 par d\u00e9faut. npm fonctionne avec un terminal et g\u00e8re les d\u00e9pendances pour une application. Il permet \u00e9galement d'installer des applications Node.js disponibles sur le d\u00e9p\u00f4t npm.</p> <p>Manuel</p> <p>Documentation de npm js Wikipedia - Article sur npm </p>"},{"location":"notes_de_cours/node/npm/#npm-init","title":"npm init","text":"<p>La commande npm init permet d\u2019initialiser un projet Node.js dans le but de g\u00e9rer les modules associ\u00e9s au projet. </p> console<pre><code>npm init -y\n</code></pre> <p>Cette commande cr\u00e9e un fichier nomm\u00e9 package.json qui contiendra les configurations du projet ainsi que la liste des divers modules n\u00e9cessaires pour son bon fonctionnement. L'option -y va cr\u00e9er le fichier avec les informations par d\u00e9faut.</p> <p>Cette commande devrait toujours \u00eatre ex\u00e9cut\u00e9e avant de proc\u00e9der \u00e0 l\u2019installation de modules. </p> <p>Manuel</p> <p>npm init</p> package.json<pre><code>{\n  \"name\": \"AppName\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n</code></pre>"},{"location":"notes_de_cours/node/npm/#npm-install","title":"npm install","text":"<p>La commande npm install permet d\u2019installer des modules dans un projet. Lors de l\u2019ajout d\u2019un premier module au projet, le dossier node_modules est automatiquement cr\u00e9\u00e9.  Pour installer un module dans un projet :</p> console<pre><code>npm install nomModule\n</code></pre> <p>Pour chaque installation de module : Un sous-dossier au nom du module est cr\u00e9\u00e9. Toutes les d\u00e9pendances sont \u00e9galement charg\u00e9es. Le module et ses d\u00e9pendances sont ajout\u00e9es dans le fichier package.json </p> <p>Partage et D\u00e9ploiement : Lorsqu\u2019on partage un projet, on ne fournit g\u00e9n\u00e9ralement pas le dossier node_modules car sa taille peut devenir relativement \u00e9lev\u00e9e et les versions de Node.js ne sont pas n\u00e9cessairement les m\u00eames.  La commande npm install (sans pr\u00e9ciser le nom du module) permet d\u2019installer automatiquement tous les modules manquants (npm se fie au fichier package.json pour identifier les modules \u00e0 installer)</p>"},{"location":"notes_de_cours/node/npm/#les-options","title":"Les options","text":"<p>Lors de l\u2019installation de modules, je recommande toujours d\u2019utiliser la commande disponible dans la proc\u00e9dure d\u2019installation du module.  Parfois, certaines options sont n\u00e9cessaires.  </p> <p>Manuel</p> <p>npm-install </p> <p>Les plus courantes :  </p> <ul> <li>--save ou -S : Ajoute le module \u00e0 la liste de d\u00e9pendances dans le fichier package.json. Cette option n\u2019est plus n\u00e9cessaire depuis la version npm 5.0.0, les modules \u00e9tant ajout\u00e9s par d\u00e9faut \u00e0 la liste de d\u00e9pendances. Vous verrez cependant r\u00e9guli\u00e8rement cette option dans les proc\u00e9dures d\u2019installation de modules officiels.  </li> <li>--global ou -g : Ajoute le module globalement sur votre PC. Je recommande peu cette option \u00e0 moins que le module ne soit pas implicitement impliqu\u00e9 dans le projet. npm global (If you are using npm 5.2 or higher, we recommend using\u00a0npx\u00a0to run packages globally).  </li> </ul>"},{"location":"notes_de_cours/node/npm/#npm-install-save-dev","title":"npm install --save-dev","text":"<p>Dans votre d\u00e9veloppement, c\u2019est possible que vous utilisiez des modules seulement pour aider le d\u00e9veloppement, mais qui ne sont pas n\u00e9cessaires en production.</p> <p>Dans ce cas, il faut utiliser npm install avec l\u2019option --save-dev ou -D.  </p> <p>Ex :   </p> console<pre><code>npm install nodemon --D\n</code></pre> <p>Dans packages.json \u00e7a donne :  </p> packages.json<pre><code>{\n  \"name\": \"AppName\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"nodemon\": \"^3.0.2\"\n  }\n}\n</code></pre>"},{"location":"notes_de_cours/node/npm/#modules-utiles-au-developpement","title":"Modules utiles au d\u00e9veloppement","text":""},{"location":"notes_de_cours/node/npm/#nodemon","title":"nodemon","text":"<p>Module qui observe les fichiers de votre projet et qui red\u00e9marre le programme automatiquement.</p> <p>Installation : </p> Console<pre><code>npm install nodemon -D\n</code></pre> <p>L'option -D (ou --save-dev) indique que le module sera install\u00e9 que pour le d\u00e9veloppement et qui n'est pas n\u00e9cessaire. C'est le cas ici pour nodemon</p> <p>Pour faciliter l\u2019utilisation de nodemon, ajoutez un script dans packages.json en ajustant le nom du fichier JavaScript \u00e0 lancer au d\u00e9marrage : </p> packages.json<pre><code>{\n  \"name\": \"AppName\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"nodemon fichier.js\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"nodemon\": \"^3.0.2\"\n  }\n}\n</code></pre> <p>Pour ex\u00e9cuter votre programme, il suffit de faire la commande :</p> console<pre><code>npm start\n</code></pre>"},{"location":"notes_de_cours/node/npm/#dotenv","title":"dotenv","text":"<p>Param\u00e9trer votre application directement dans le code est imprudent. Des informations confidentielles peuvent se retrouver dans votre repo GitHub \u00e0 la vue de tout le monde, ex :  </p> a_ne_pas_faire.js<pre><code>const cleAPI = \"FKSDKLJFKDSKLJF898FSDKJKSD898F9DSKLFDSKFSD\";\nconst utilisateurBD = \"admin\";\nconst motDePasse=\"password\";\n</code></pre> <p>Installation : </p> console<pre><code>npm install dotenv  \n</code></pre> <p>Pour plus de s\u00e9curit\u00e9 cr\u00e9\u00e9 un fichier nomm\u00e9 .env qui va contenir les informations sensibles. Ce fichier ne doit pas \u00eatre index\u00e9 dans votre d\u00e9pot Github, penser \u00e0 l'ajouter au fichier .gitignore.</p> <p>.env<pre><code>cleAPI=\"FKSDKLJFKDSKLJF898FSDKJKSD898F9DSKLFDSKFSD\"\nutilisateurBD=\"admin\"\nmotDePasse=\"password\"\n</code></pre> Ensuite dans le code import\u00e9 le fichier et vous pouvez r\u00e9cup\u00e9rer les informations de cette fa\u00e7on :   </p> a_faire.js<pre><code>const dotenv = require('dotenv');\n\ndotenv.config();\n\nconst cleAPI = process.env.cleAPI;\n</code></pre>"},{"location":"notes_de_cours/node/npm/#information-a-ajouter-dans-le-fichier-gitignore","title":"Information \u00e0 ajouter dans le fichier .gitignore","text":"<p>Il est essentiel de ne pas envoyer dans votre d\u00e9p\u00f4t git le dossier node_modules ainsi que le fichier .env si vous en avez un. Ajoutez ces lignes dans .gitignore : </p> .gitignore<pre><code>**/node_modules \n.env  \n</code></pre>"},{"location":"notes_de_cours/node/npm/#mise-a-jour-des-modules","title":"Mise \u00e0 jour des modules","text":"<p>Pour mettre \u00e0 jour les modules, on doit faire la commande </p> .gitignore<pre><code>npm update [-g] [&lt;pkg&gt;...]\n</code></pre> <p> </p> Le fonctionnement des versions <p>Explication du syst\u00e8me de version et des symboles utilis\u00e9s : npm version cheatsheet</p>"},{"location":"notes_de_cours/node/routage/","title":"Routage avec Express.js","text":""},{"location":"notes_de_cours/node/routage/#les-routes-dynamiques","title":"Les routes dynamiques","text":"<p>On a vue qu'on pouvait ajouter des param\u00e8tres \u00e0 l'url en utilisant le caract\u00e8re ? suivi du nom du param\u00e8te et de sa valeur.</p> <p><code>http://localhost:3000/professeurs?code=1</code></p> <p>On peut aussi ajouter la valeur du param\u00e8tre directement dans l'url sans le nommer, c'est ce qu'on appelle une route dynamique. </p> <p><code>http://localhost:3000/professeurs/1</code></p> <p>Dans cet exemple on pourra r\u00e9cup\u00e9rer la valeur 1 dans l'url comme \u00e9tant un param\u00e8tre. Les deux m\u00e9thodes se valent bien que je trouve celle-ci plus \"propre\" quand la situation le permet.</p> <p>Dans le code, quand on d\u00e9clare la route on va ajouter le nom du param\u00e8tre pr\u00e9c\u00e9d\u00e9 du caract\u00e8re :. Ensuite le param\u00e8tre sera stock\u00e9 dans l'objet <code>req.params</code> et portera le nom d\u00e9fini dans la route.</p> index.js<pre><code>app.get('/professeurs/:code', (req, res) =&gt; {\n    const code = req.params.code;\n    res.send(`Vous avez demand\u00e9 le professeur avec le code ${code}`);\n});\n</code></pre> <p>Danger</p> <p>Faites attention \u00e0 l'ordre des routes dynamiques si la syntaxe de plusieurs routes se ressemble.</p> <p>Par exemple j'ai ces deux routes qui fonctionnent correctement</p> script.js<pre><code>app.get('/professeurs/tous', (req, res) =&gt; {\n    const code = req.params.code;\n    res.send(`Vous avez demand\u00e9 tous les professeurs.`);\n});\n\napp.get('/professeurs/:code', (req, res) =&gt; {\n    const code = req.params.code;\n    res.send(`Vous avez demand\u00e9 le professeur avec le code ${code}`);\n});\n</code></pre> <p>Par contre si j'inverse les routes et que la premi\u00e8re est la route avec le param\u00e8tre code, on ne pourra jamais acc\u00e9der \u00e0 la route <code>/professeurs/tous</code>.</p>"},{"location":"notes_de_cours/node/routage/#le-routage","title":"Le routage","text":"<p>Le module Router permet de regrouper plusieurs routes similaire. C'est une tr\u00e8s bonne pratique pour maintenir un code clair et consistant qu'on pourra faire \u00e9voluer facilement.</p> <p>Reprenons l'exemple de mes deux routes professeurs plus haut. On doit premi\u00e8rement cr\u00e9er un fichier qui va contenir toutes ces routes similaires. Ensuite dans ce fichier on importe le module Express et cr\u00e9er un objet Router. Au lieu de d\u00e9finir les routes avec app on va utiliser l'objet Router qu'on vient de cr\u00e9er. Finalement \u00e0 la fin du fichier on va exporter le module pour pouvoir l'utiliser dans notre fichier index.js</p> professeurs.js<pre><code>// Nous avons besoin d'importer le module express pour utiliser le Router\nconst express = require('express');\n// Nous cr\u00e9ons un objet router qui va nous permettre de g\u00e9rer les routes\nconst router = express.Router();    \n\n// On utilise router au lieu de app\nrouter.get('/tous', (req, res) =&gt; {\n    const code = req.params.code;\n    res.send(`Vous avez demand\u00e9 tous les professeurs.`);\n});\n\nrouter.get('/:code', (req, res) =&gt; {\n    const code = req.params.code;\n    res.send(`Vous avez demand\u00e9 le professeur avec le code ${code}`);\n});\n\n// On exporte le router pour pouvoir l'utiliser dans index.js\nmodule.exports = router;\n</code></pre> <p>Vous avez remarqu\u00e9 que j'ai enlev\u00e9 <code>/professeurs</code> de mes routes? On va g\u00e9rer cette partie de la route dans le fichier index.js. La seule modification qu'on va faire \u00e0 ce fichier est d'ajouter cette ligne dans la section o\u00f9 l'on ajoute les intergiciels.</p> index.js<pre><code>app.use('/api/professeurs', require('./routes/api/professeurs'));\n</code></pre> <p>Toutes les routes qui d\u00e9bute par <code>/api/professeurs</code> seront dirig\u00e9es vers le fichier ./routes/api/professeurs (L'ajout de api dans la route est purement esth\u00e9tique). Donc maintenant quand le serveur recevra par exemple la route <code>/api/professeurs/tous</code> il va diriger la requ\u00e8te dans le fichier professeurs.js pour trouver quoi faire avec la route <code>/tous</code>.</p> <p>Avec Router on peut organiser notre projet de plusieurs fa\u00e7on. Nous verrons plus tard des exemples de bonnes structures \u00e0 adopter pour nos api.</p> <p>Manuel</p> <p>Router - ExpressJS </p>"},{"location":"notes_de_cours/node/server_web/","title":"Introduction \u00e0 Node.js - Serveur Web","text":""},{"location":"notes_de_cours/node/server_web/#un-hello-world-dans-un-serveur-web","title":"Un Hello World dans un serveur web","text":"<p>Voici un petit exemple tout simple de serveur web qui affiche le message \"Hello World\". L'exemple est tir\u00e9 de la documentation de Node.js.</p> serveur_hello.js<pre><code>const http = require('node:http');\n\nconst hostname = '127.0.0.1';\nconst port = 3000;\n\nconst server = http.createServer((req, res) =&gt; {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain; charset=utf-8');\n  res.end('Hello World\\n');\n});\n\nserver.listen(port, hostname, () =&gt; {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});\n</code></pre> <ul> <li>Le module http de Node est inclus \u00e0 la premi\u00e8re ligne, c'est lui qui va \u00eatre en charge du serveur</li> <li>On d\u00e9finit ensuite une adresse d'h\u00f4te et un port pour notre serveur</li> <li>On cr\u00e9e un objet serveur \u00e0 la ligne 6. Dans la fonction de rappel les param\u00eatres repr\u00e9sentent des objets associ\u00e9s \u00e0 la requ\u00eate http qui est re\u00e7u (req) et la r\u00e9ponse retourn\u00e9e (res).</li> <li>Le statusCode est le code de statut retourn\u00e9, ici 200 pour un succ\u00e8s</li> <li>Le Content-Type d\u00e9fini le format de la r\u00e9ponse.</li> <li>Avec la fonction end() on envoi le texte de la r\u00e9ponse.</li> <li>La fonction listen \u00e0 la ligne 12 lance le serveur et le met en mode \"\u00e9coute\"</li> </ul> <p>Pour lancer le serveur</p> <ul> <li>Lancer le programme avec la commande <code>node serveur_hello.js</code> dans un terminal.</li> <li>Depuis un navigateur acc\u00e9d\u00e9 \u00e0 l'url <code>http://localhost:3000/</code></li> </ul>"},{"location":"notes_de_cours/node/server_web/#lurl-et-ses-parametres","title":"L'url et ses param\u00e8tres","text":"Comment extraire les parties d'un url <p>Deux modules \u00e0 ajouter pour utiliser les commandes de l'image</p> <pre><code>const url = require('url');\nconst querystring = require('node:querystring'); \n</code></pre> <p>On peut aussi simplifier l'acquisition des param\u00e8tres en ajoutant le param\u00e8tre true \u00e0 la fonction url.parse(). \u00c7a permet d'automatiquement convertir les param\u00e8tres de la requ\u00eate en objet. \u00c7a \u00e9vite l'utilisation de <code>querystring</code>.</p> <pre><code>const params = url.parse(req.url, true).query;\n</code></pre> <p>La variable params est un tableau associatif avec le nom des param\u00e8tres en cl\u00e9. Donc si je re\u00e7ois le param\u00e8tre page=1, je peux y acc\u00e8der avec comme ceci.</p> <pre><code>console.log(params[\"page\"]);  // La valeur affich\u00e9 sera 1\n</code></pre>"},{"location":"notes_de_cours/node/server_web/#exemple-de-serveur-web-avec-gestion-des-parametres","title":"Exemple de serveur web avec gestion des param\u00e8tres","text":"serveur_parametres.js<pre><code>const http = require('node:http');\nconst url = require('url');\n\nconst hostname = 'localhost';\nconst port = 3000;\n\nconst server = http.createServer((req, res) =&gt; {\n    // R\u00e9cup\u00e9ration des param\u00e8tres\n    const params = url.parse(req.url, true).query;\n    const route = url.parse(req.url).pathname;\n\n    // Affichage des valeurs de la requ\u00eate\n    console.log('Route : ' + route);\n    console.log('Param\u00e8tres : ' + JSON.stringify(params));\n\n    // Retourne les param\u00e8tres en JSON dans la r\u00e9ponse\n    res.statusCode = 200;\n    res.setHeader('Content-Type', 'application/json');\n    res.write(JSON.stringify(params));\n\n    res.end();\n});\n\nserver.listen(port, hostname, () =&gt; {\n    console.log(`Server running at http://${hostname}:${port}/`);\n});\n</code></pre> <p>Pour lancer le code, ex\u00e9cutez le fichier et entrez l'url  <code>http://localhost:3000/</code> dans un navigateur avec n'importe quels param\u00e8tres. Par exemple  <code>http://localhost:3000/param1=hello&amp;param2=world</code>. Le serveur va retourner les param\u00e8tres sous format JSON.</p>"},{"location":"notes_de_cours/node/server_web/#autre-exemple-avec-gestion-des-routes","title":"Autre exemple avec gestion des routes","text":"serveur_route.js<pre><code>const http = require('node:http');\nconst url = require('url');\nconst querystring = require('node:querystring'); \n\nconst hostname = 'localhost';\nconst port = 3000;\nconst server = http.createServer((req, res) =&gt; {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain; charset=utf-8');\n\n  let page = req.url ? req.url : '/';\n  if (page == '/') {\n    res.write(\n      \"Bienvenue au jeu d'\u00e9vasion entrez dans la salle de regroupement.\"\n    );\n  } else if (page == '/salle-serveurs') {\n    res.write('Vous \u00eates dans la salles des serveurs, bonne chance !');\n  } else if (page == '/etage/1/prof') {\n    res.write('H\u00e9 ho, que fa\u00eetes-vous dans mon bureau !?!?!');\n  } else {\n    res.statusCode = 404;\n  }\n  res.end();\n});\n\nserver.listen(port, hostname, () =&gt; {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});\n</code></pre> <p>\u00c0 la ligne 11 on r\u00e9cup\u00e8re le nom de la route dans l'url. Ensuite avec une s\u00e9rie de if..else on peut ex\u00e9cut\u00e9 un traitement diff\u00e9rent selon la route. Si la route est diff\u00e9rente de ceux qu'on a cod\u00e9, on retourne une erreur 404.</p>"},{"location":"notes_de_cours/node/structure_express/","title":"Structure d'un projet avec Express","text":""}]}